<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:media="http://www.rssboard.org/media-rss" version="2.0">
  <channel>
    <title><![CDATA[Codegrid做HTML5[YT+]]]></title>
    <link>http://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw</link>
    <image>
      <url>https://yt3.googleusercontent.com/LNnq4LDKi68wTnNigehkVrVe64Hadzcn_cNgGXA2AHpqqLBQpa1qw4PyKndrEgPHSX2wMBja=s900-b50-c-k-c0x008A95A5-no-rj</url>
      <title>Codegrid做HTML5[YT+]</title>
      <link>http://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw</link>
    </image>
    <language>en-us</language>
    <atom:link href="https://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw" rel="self" type="application/rss+xml"/>
    <copyright><![CDATA[Codegrid做HTML5[YT+]]]></copyright>
    <itunes:author><![CDATA[Codegrid做HTML5[YT+]]]></itunes:author>
    <itunes:summary>
      <![CDATA[
      <a href="https://www.youtube.com/channel/UC7pVho4O31FyfQsZdXWejEw" target="_blank">https://www.youtube.com/channel/UC7pVho4O31FyfQsZdXWejEw</a><br />
<br />
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw" target="_blank">https://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw</a>
      ]]>
    </itunes:summary>
    <description>
      <![CDATA[
      <a href="https://www.youtube.com/channel/UC7pVho4O31FyfQsZdXWejEw" target="_blank">https://www.youtube.com/channel/UC7pVho4O31FyfQsZdXWejEw</a><br />
<br />
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw" target="_blank">https://www.youtube.com/feeds/videos.xml?channel_id=UC7pVho4O31FyfQsZdXWejEw</a>
      ]]>
    </description>
    <itunes:owner>
      <itunes:name><![CDATA[Codegrid做HTML5[YT+]]]></itunes:name>
    </itunes:owner>
    <itunes:image href="https://yt3.googleusercontent.com/LNnq4LDKi68wTnNigehkVrVe64Hadzcn_cNgGXA2AHpqqLBQpa1qw4PyKndrEgPHSX2wMBja=s900-b50-c-k-c0x008A95A5-no-rj"/>
<item>
      <title><![CDATA[When I Let ScrollTrigger Direct the Team Page Like a Scroll-Controlled Reveal]]></title>
      <link>https://www.youtube.com/watch?v=HWoKkkPVJ9A</link>
      <itunes:title><![CDATA[When I Let ScrollTrigger Direct the Team Page Like a Scroll-Controlled Reveal]]></itunes:title>
      <itunes:author><![CDATA[Codegrid]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/HWoKkkPVJ9A/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=HWoKkkPVJ9A">https://www.youtube.com/watch?v=HWoKkkPVJ9A</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 創建複雜且流暢的滾動驅動動畫。</li> <li>深入了解一個專業級網站的「團隊」區塊動畫是如何從零開始重建，包括其 <strong>HTML</strong> 結構、<strong>CSS</strong> 樣式和 <strong>JavaScript</strong> 動畫邏輯。</li> <li>掌握將平滑滾動庫 <strong>Lenis</strong> 與 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 整合，以提供優雅的用戶體驗。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片介紹與靈感來源</h2> <p>在十月二日，<strong>GSAP</strong> 在其 Twitter 上將一個令人驚嘆的網站標記為當日之星。該網站獨特的動畫設計立刻引起了作者的注意，尤其是其「關於我們」頁面中，<strong>團隊成員介紹區塊</strong>那種無縫且分階段呈現的時程軸動畫。當使用者滾動頁面時，團隊卡片的<strong>佔位符</strong>會一個接一個地滑入，每個只顯示隊員名字的首字母。整個區塊會被<strong>釘住</strong>在原地，隨後，實際的個人資料卡片會從側邊動畫滑入，精確地落在各自的佔位符上方，最終該區塊才會解除釘住並滾動離開。作者認為這整個序列既巧妙又執行得很好，因此決定使用 <strong>HTML、CSS 和 JavaScript</strong>，並藉助 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 的力量，從頭開始重建它。本影片旨在逐步引導觀眾了解其建立過程，以便他們能為自己的專案創建類似的滾動驅動動畫。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_95.jpg" /></p> <hr /> <h2>HTML 骨架的搭建</h2> <p>作者首先創建了兩個簡單的區塊：頂部的 `hero` 區塊和底部的 `outro` 區塊，它們為頁面提供了垂直結構和視覺上的呼吸空間。在這兩個區塊之間，作者建立了一個核心的 `team` 區塊，作為所有團隊成員卡片的主容器。每個團隊成員的結構被定義在一個 `team-member` 的 `div` 中，作為實際卡片動畫滑入時的<strong>佔位符</strong>。每個 `team-member` 區域包含兩個關鍵元素：一個是顯示團隊成員名字<strong>首字母</strong>的 `team-member-name-initial` `div`，另一個則是將來會動畫滑入的<strong>實際卡片</strong> `team-member-card`。卡片內部進一步細分為一個用於個人資料圖片的 `image container` 和一個顯示角色與姓名的 `info container`，其中姓氏的最後一部分被包裹在 `span` 中以提供樣式彈性。完成一個團隊成員的結構後，作者複製並貼上兩次以創建共三個團隊成員卡片，並更新其內容。這便完成了所有的 <strong>HTML 結構</strong>。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_235.jpg" /></p> <hr /> <h2>CSS 樣式的設計</h2> <p>在 <strong>CSS 階段</strong>，作者首先從 Google Fonts 導入了兩種字體（Boondensed 用於粗體標題，DM mono 用於細節文字）並定義了自訂的根變數來管理顏色主題，包括深色背景、淺色卡片和亮橘色強調色。全球樣式設定移除了預設間距，確保了<strong>一致的盒模型</strong>，並為頁面設定了基礎樣式，如深色背景與淺色前景文字。圖片被設定為完美覆蓋其容器，主要標題設計為大寫、粗體且特大，而較小的文本則使用等寬字體以避免與主標題競爭。針對各區塊的佈局，所有區塊都被賦予了全高並隱藏溢出內容。<strong>團隊區塊</strong>則採用了 <strong>Flex 佈局</strong>，使三位團隊成員並排顯示，每個成員佔據相同的空間，並帶有圓角和虛線邊框作為卡片的佔位符。為了控制動畫期間的圖層順序，作者利用 <strong>Z-index</strong> 進行堆疊。首字母被精確置中，尺寸巨大並使用亮橘色強調色，其大小將在動畫中改變。實際卡片同樣置中，並具有與容器相同的尺寸，包含內邊距、圓角和垂直佈局，營造出一個平滑覆蓋佔位符的圖層。圖片容器是一個完美的正方形，資訊區塊則垂直堆疊顯示角色和姓名，其中姓氏的特定部分被單獨設計以產生對比。最後，作者定義了<strong>初始動畫狀態</strong>，包括將佔位符推出螢幕下方、首字母縮小至隱藏、以及卡片向右偏移、輕微旋轉並縮小，以實現分層滑入的效果。同時也加入了<strong>響應式設計</strong>，確保在小螢幕上文字縮小、移除寬度限制，並將團隊區塊改為垂直佈局，且移除所有動畫轉換。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_649.jpg" /></p> <hr /> <h2>JavaScript 動畫的準備</h2> <p>在 <strong>JavaScript 階段</strong>，作者首先導入了三個關鍵工具：用於處理動畫的 <strong>GSAP</strong>、用於將動畫與用戶滾動同步的 <strong>ScrollTrigger</strong>、以及提供平滑滾動體驗的輕量級庫 <strong>Lenis</strong>。所有代碼都被包裹在一個 `DOM content loaded` 事件監聽器中，以確保頁面完全加載後才開始執行。隨後，作者註冊了 <strong>ScrollTrigger 插件</strong>，這是使用 ScrollTrigger 的必要步驟。接著，初始化 <strong>Lenis</strong> 實例，使其監聽滾動事件，並將其與 <strong>GSAP 的內部觸發器</strong>連接，確保平滑滾動與基於滾動的動畫完美同步。然後，作者選取了將用於動畫的 DOM 元素，包括主 `team` 區塊、所有單獨的 `team-member` 佔位符區塊，以及它們內部的所有 `team-member` 卡片，將它們轉換為陣列以便於後續迭代處理。最後，作者設定了兩個變數來儲存即將創建的 <strong>ScrollTrigger 實例</strong>的引用，一個用於佔位符的進入動畫，另一個用於卡片的滑入動畫，以便於在螢幕尺寸改變時進行清理或刷新。為了保持代碼的整潔和可重用性，所有的動畫邏輯都將被封裝在一個名為 `initTeamAnimations` 的新函數中，便於重置或重新運行。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">On October 2nd, GSAP spotlighted this. incredible website as their site of the. day on Twitter. It stood out to me right. away, packed with fresh, unique. animations that felt smooth and visually. striking. One interaction in particular. really caught my eye. The seamlessly. staged timeline animation on their about. page for the team section. As you. scroll, placeholders for the team card. slide in one by one, each showing just. the initial letter of a team member's. name, and the entire section pins in. place while this unfolds. Then as you. continue scrolling, the actual profile. cards animate in from the side, landing. right on top of their respective. placeholders before this action. eventually unpins and scrolls away. I. thought the entire sequence was clever. and well executed. So I decided to try. rebuilding it from scratch using just. HTML, CSS, and JavaScript powered by. GSAP and scroll trigger. After a few. hours of experimenting, I managed to. recreate the core animation timeline,. including most of the car. transformations. In today's video, I'll. walk you through exactly how I built it. step by step so you can understand how. to create similar scroll-driven. animations for your own projects. If you. find these kinds of rebuilds helpful,. make sure you leave a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_87.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=87" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm creating two simple sections. One at the top with the class hero and. another at the bottom with the class. outro. This give the page a bit of. vertical structure and they also help us. bookend the scroll animation with some. breathing room. Inside each one, I'm. just dropping a heading and H1 tag with. some placeholder text just so the page. doesn't feel empty when we are scrolling. through. Now, between these two sections, we are. going to build the team section itself. I'm adding a new section with the class. team. This is the main wrapper that will. hold all of our team member cards. Inside this section, we are defining the. structure for each individual card. To. do that, I'm creating a div with the. class team member. This is our parent. container. We'll style it later as a. placeholder that the actual card can. animate into. Inside every team member. area, there are two key elements. The. first is a div with the class team. member name initial and the second. element is another div with the class. team member card. This is the actual. card that we'll animate in later. Now,. team member name initial is where I'll. put a large single letter H1, the. initial of the team member's name. This. letter will appear first as a. placeholder before the full card slides. in. Inside the card, we are splitting it. into two parts. an image container with. the class team member image which just. holds an image tag for the profile. picture and a second container with the. class team member info where we'll place. a paragraph for the role and an H1 for. the full name with the last name wrapped. in a span for styling flexibility. That's the basic structure for one team. member. Once that's in place, we simply. copy and paste this whole team member. block two more times and update the. initials, the role, the name, and the. image source for the other two members. This gives us three team member cards in. total, each following the exact same. structure. And that's pretty much it for. the HTML. Next, we'll move on to the CSS. to style everything and prepare it for. the scroll trigger transitions. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_199.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=199" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I've imported two type faces from. Google Fonts. We are using Boondensed. for the bold oversized headings and DM. mono for the smaller details like ro. descriptions. Then, I'm setting up a few. custom colors using root variables. There is a dark background for the base,. a light off-white tone for the cards,. and a bright orange accent we'll use. throughout the animation. Now, let's set. the global styles. I'm removing all. default spacing and making sure elements. follow consistent box model just to keep. the layout predictable as we go. Next,. I'm setting the base styles for the. page. The body uses our main type face. with a dark background and light. foreground text. It's clean and minimal,. which works really well with the bold. animation we are going to build. images. are set to fully cover their containers. and crop neatly inside their frames. For. the main headings, I'm making them all. uppercase and really bold. They are. oversized, tight in line spacing and. meant to fill like strong design. elements on the page. For smaller text. like the team rolls, I am switching to. the monospaced font. It's also. uppercase, just more subtle in size and. weight, so it doesn't compete with the. main headlines. Now, let's style the layout for each. section. I'm giving all sections full. height and hiding any overflow. This. makes sure our animations stay. contained. There is also a bit of. padding to keep everything from hugging. the edges. The content inside hero and. outro sections are centered in both. directions. Inside them, the heading sits in the. middle of the screen and uses the accent. color to stand out clearly against the. dark background. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_295.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's move on to the team section. We are displaying it as a flex layout. So all three team members sit side by. side with some space between them. Each member takes up equal space, has. rounded corners and gets a subtle dashed. border. This acts as the placeholder. zone where the card will eventually. slide in. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">To control the layer order during. animation, I'm stacking them using the. Zindex. So the first card sits on top. the second one behind that and the third. one at the bottom. Now, inside each team. member block, we start with the initial. letter. This is placed exactly at the. center using transforms and it's huge. meant to represent the first letter of. the team member's name before the full. card arrives. The color here is our. orange accent and we'll animate the. scale of this letter later on. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then we have the actual card that slides. in. It's also centered within its parent. and it has the same width and height as. the container including the offset for. the borders. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_361.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">I have added some padding and rounded. corners. And we are using a vertical. layout to stack everything inside. This. will feel like a smooth layer that. animates over the placeholder. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The image container is a perfect square. with rounded edges and the image inside. will crop cleanly so it doesn't. overflow. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Below that the info section is also. centered and stragged vertically. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">We have got the role at the top in small. text and the name below in large bold. type. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The last name is wrapped in a span so we. can style it separately. In this case,. using the dark background color to. create contrast against the lighter. card. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_425.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's define the initial animation. states. Each team member placeholder. area starts off push down from the. screen. The initial letter is scaled all the way. down. So it's hidden. and the card themselves are offset to. the right, slightly rotated and scaled. down. H1 is pushed away a little more. than the last which pushes all the cards. way out of the screen and gives us that. layered sliding effect we are going to. animate later. Finally, I've added some. responsive styling for smaller screens. when the screen width drops below a. certain point which shrink down the. text. Remove the width limits on the. headings and switch the team section to. a vertical layout instead of horizontal. Each card is centered and stacked with. some spacing between them. And we remove. all the transforms so the layout sits. naturally without animation. The. initials are now fully scaled up by. default and the cards are reset to full. scale with no rotation. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">And that's it for the CSS. We have. styled the full layout, set the stage. for all our scroll-based animations, and. made sure everything responds properly. on smaller screens. Next, we'll move. into JavaScript and bring all of this to. life using GSAP and scroll trigger. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_500.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=500" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First of all, I'm importing the tools. we'll be using for this build. We are. bringing in GSAP to handle all the. animations, scroll trigger to sync them. with the user scroll, and Lenis, a. lightweight library that gives a smooth. buttery scrolling. Next, I'm wrapping. everything inside a DOM content loaded. event. This just makes sure the page has. finished loading before we start. selecting elements or triggering. animations. Inside that, the first thing. we do is register the scroll trigger. plug-in with GSAP. This step is always. required whenever we are using scroll. trigger, otherwise the animations won't. work. After that, I'm setting up Lennis. We create a new instance and tell it to. listen to scroll events. Then we connect. Lis Gap's internal trigger so GSAP knows. when to update during scroll. This keeps. everything perfectly synced between our. smooth scroll and the scroll-based. animations. Next, we are grabbing the. elements we'll be animating. We are. selecting the main team section, then. converting all the individual team. member area blocks into an array and. doing the same for all the team member. cards inside them. This just makes it. easier to loop through everything later. And finally, for this block, I'm setting. up two variables. These will hold. references to the scroll triggers we are. about to create. one for the placeholder. entrance and one for the card slide in. animation. This way, we can clean them. up or refresh them later if the screen. resizes. That's the setup. In the next. block, we'll start defining how the. animations actually work. Now, to. organize everything cleanly, I'm. creating a new function called init team. animations. This is where we'll define. all the animation logic from the. entrance of the placeholders to the full. card slide in sequence. I like keeping. it inside a dedicated function like this. so it's easy to reset or rerun when. needed, especially on resize. Right. after defining the function, I'm calling. it at the bottom of the script just once. to kick things off as soon as the page. loads. This way, I can walk you through. each animation one step at a time and we. can preview how it behaves in the. browser as we build it out. In the next. step, we'll start with a quick check for. screen size and add logic to reset or. disable the animation on smaller. devices. inside the function. The first. thing I'm doing is checking the screen. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">size. If the window width is below a,000. pixels, which basically means we are on. a tablet or a phone, then we don't want. to run any of the scroll triggered. animations. So, right away, I'm checking. if any animations already exist, and if. they do, I'm killing them. This just. makes sure we are not leaving any old. scroll triggers active in the. background. Then I'm looping through all. the team member elements and clearing. any inline styles that may have been. added by GSAP during previous. animations. I am doing the same thing. for the large initials inside each. member block and also for all the cards. themselves. This resets everything back. to a clean state with no transforms or. overrides. So the layout stacks properly. on smaller screens. After that I just. return early and skip the rest of the. function. There is no point running any. scroll-based logic if we are on a small. device. Right after that mobile block,. I'm also repeating the same kill check. again just to be safe. If this is a. larger screen and the function is being. reinitialized for any reason, we want to. make sure we are starting fresh without. any duplicate triggers. Next, we'll. start building the first scroll. animation, the placeholder entrance. All. right, now we are setting up our first. scroll trigger. This one handles the. placeholder entrance animation, but the. team member blocks rise up into view and. reveal their initial letters. We are. creating a new scroll trigger instance. and assigning it to a variable called. card placeholder entrance. First, I'm. telling it what to watch. In this case,. we are using the main team section as. the trigger. The animation begins when. the top of the team section hits the. bottom of the viewport. Basically, when. it starts coming into viewport and ends. when the top of that section reaches the. top of the screen. This gives us a nice. vertical range to work with. I've also. enabled scrub, which means the animation. is fully tied to the scroll. So as you. scroll forward or backward the movement. plays in sync. Now inside the on update. call back I'm tracking the scroll. progress. This value goes from 0 to one. based on how far we are between the. start and end. Then I'm looping through. all the team members one by one and I'm. calculating when each one should animate. in. I'm giving each member a slight. delay so they don't all animate at the. same time. The delay increases with each. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">index which creates a nice staggered. entrance. Then I'm checking where we are. in the scroll timeline. If this cl is. within the window for that member's. entrance, we calculate how far into the. animation they should be. Based on that,. I move the entire team member upward by. adjusting its vertical position,. starting fully pushed down and easing it. into place as we scroll. At the same. time, I'm targeting the initial letter. inside that block and scaling it up from. zero to full size. I'm also delaying. that scale a little so the block slides. in first and then the letter pops into. view shortly after. If you have already. scrolled past that member's entrance. completely, I'm snapping everything into. place. The team member sits at the top. and the letter is fully scaled. This. whole block gives us that first part of. the animation. The scroll triggered. entrance of the placeholders one by one. with their initials rising up and. scaling into view. Next, we'll move on. to the second animation where the full. cards slide in and settle on top of the. placeholders. So, we are creating. another scroll trigger and assigning it. to a variable called card slide in. animation. This time the animation. starts when the top of the team section. reaches the top of the screen and it. scrolls for the height of three full. screen lines. So we have enough space to. slowly animate all the cards in one by. one. I've also pinned the team section. during this phase so the rest of the. page freezes while the cards animate in. place. And just like before I've enabled. scrub so the entire sequence stays tied. to scroll position. Inside the on update call back, we are. tracking the scroll progress from 0 to. one and looping through each team member. card. First, I'm calculating how long. each card should take to slide in and. when it should begin. I'm staggering. them one after another. So, the first. card moves first, then the second, then. the third. For each card, I am figuring. out its current progress through that. entrance window. Then, I'm calculating. its horizontal movement, starting way. off to the right and easing into the. center as the scroll continues. At the. same time, I'm rotating the card. starting with a slight tilt and slowly. leveling it out to zero. This creates. that nice natural and stacking effect. If you scrolled past the point where the. card should have finished sliding in, I. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">am just snapping it into its final. position centered and upright. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_888.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">After that, we move on to the scaling. effect. Each card starts a little. smaller and gradually scales up to its. full size as the scroll moves forward. Again, I'm staggering this for each card. so the timing feels fluid and layered. I'm calculating the current scale. progress based on scroll position and. easing the size up from the smaller. value to the final scale. If we scrolled. past that point, we simply lock the. scale at full size and that's it. This. block brings in all three cards, slides. them into place with smooth motion,. eases out the rotation, and scales them. up as the scroll unfolds. By the end of. the sequence, we have transitioned from. simple letter placeholders to fully. animated profile cards sitting cleanly. on the screen. That completes the entire. animation timeline. Now, just to make. sure everything stays responsive, I'm. adding a resize listener at the very end. of the script. So, anytime the browser. window is resized, whether someone is. rotating their phone or changing device. orientation or dragging the window on. desktop, we want to recheck everything. and adjust the animation if needed. To. avoid running it too many times in a. row, I'm using a quick timeout to. debounce it. This just waits a short. moment after the resize stops and then. calls our init animations function again. that reruns all the scroll logic from. scratch and then I'm calling scroll. trigger refresh to recalculate all the. trigger positions and layouts. This. makes the entire animation timeline. fully responsive and ensures everything. behaves correctly whether we resize from. desktop to mobile or the other way. around. So that was it. Hope you found. the video helpful. See you in the next. one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=HWoKkkPVJ9A">https://www.youtube.com/watch?v=HWoKkkPVJ9A</a></p><p>Rebuilding an award-winning animated team section using HTML, CSS, and JavaScript — powered by GSAP and ScrollTrigger.</p><p></p><p>Unlock Source Code with PRO — Get 50% OFF CodegridPRO using the code CGPROSAVE50 at checkout, or grab it directly here: <a href="https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50">https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50</a></p><p></p><p>Inspiration: Working Stiff Films</p><p>Website: <a href="https://stiff.madebybuzzworthy.com/">https://stiff.madebybuzzworthy.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:27 HTML</p><p>3:19 CSS</p><p>8:20 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/HWoKkkPVJ9A/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=HWoKkkPVJ9A">https://www.youtube.com/watch?v=HWoKkkPVJ9A</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 創建複雜且流暢的滾動驅動動畫。</li> <li>深入了解一個專業級網站的「團隊」區塊動畫是如何從零開始重建，包括其 <strong>HTML</strong> 結構、<strong>CSS</strong> 樣式和 <strong>JavaScript</strong> 動畫邏輯。</li> <li>掌握將平滑滾動庫 <strong>Lenis</strong> 與 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 整合，以提供優雅的用戶體驗。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片介紹與靈感來源</h2> <p>在十月二日，<strong>GSAP</strong> 在其 Twitter 上將一個令人驚嘆的網站標記為當日之星。該網站獨特的動畫設計立刻引起了作者的注意，尤其是其「關於我們」頁面中，<strong>團隊成員介紹區塊</strong>那種無縫且分階段呈現的時程軸動畫。當使用者滾動頁面時，團隊卡片的<strong>佔位符</strong>會一個接一個地滑入，每個只顯示隊員名字的首字母。整個區塊會被<strong>釘住</strong>在原地，隨後，實際的個人資料卡片會從側邊動畫滑入，精確地落在各自的佔位符上方，最終該區塊才會解除釘住並滾動離開。作者認為這整個序列既巧妙又執行得很好，因此決定使用 <strong>HTML、CSS 和 JavaScript</strong>，並藉助 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 的力量，從頭開始重建它。本影片旨在逐步引導觀眾了解其建立過程，以便他們能為自己的專案創建類似的滾動驅動動畫。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_95.jpg" /></p> <hr /> <h2>HTML 骨架的搭建</h2> <p>作者首先創建了兩個簡單的區塊：頂部的 `hero` 區塊和底部的 `outro` 區塊，它們為頁面提供了垂直結構和視覺上的呼吸空間。在這兩個區塊之間，作者建立了一個核心的 `team` 區塊，作為所有團隊成員卡片的主容器。每個團隊成員的結構被定義在一個 `team-member` 的 `div` 中，作為實際卡片動畫滑入時的<strong>佔位符</strong>。每個 `team-member` 區域包含兩個關鍵元素：一個是顯示團隊成員名字<strong>首字母</strong>的 `team-member-name-initial` `div`，另一個則是將來會動畫滑入的<strong>實際卡片</strong> `team-member-card`。卡片內部進一步細分為一個用於個人資料圖片的 `image container` 和一個顯示角色與姓名的 `info container`，其中姓氏的最後一部分被包裹在 `span` 中以提供樣式彈性。完成一個團隊成員的結構後，作者複製並貼上兩次以創建共三個團隊成員卡片，並更新其內容。這便完成了所有的 <strong>HTML 結構</strong>。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_235.jpg" /></p> <hr /> <h2>CSS 樣式的設計</h2> <p>在 <strong>CSS 階段</strong>，作者首先從 Google Fonts 導入了兩種字體（Boondensed 用於粗體標題，DM mono 用於細節文字）並定義了自訂的根變數來管理顏色主題，包括深色背景、淺色卡片和亮橘色強調色。全球樣式設定移除了預設間距，確保了<strong>一致的盒模型</strong>，並為頁面設定了基礎樣式，如深色背景與淺色前景文字。圖片被設定為完美覆蓋其容器，主要標題設計為大寫、粗體且特大，而較小的文本則使用等寬字體以避免與主標題競爭。針對各區塊的佈局，所有區塊都被賦予了全高並隱藏溢出內容。<strong>團隊區塊</strong>則採用了 <strong>Flex 佈局</strong>，使三位團隊成員並排顯示，每個成員佔據相同的空間，並帶有圓角和虛線邊框作為卡片的佔位符。為了控制動畫期間的圖層順序，作者利用 <strong>Z-index</strong> 進行堆疊。首字母被精確置中，尺寸巨大並使用亮橘色強調色，其大小將在動畫中改變。實際卡片同樣置中，並具有與容器相同的尺寸，包含內邊距、圓角和垂直佈局，營造出一個平滑覆蓋佔位符的圖層。圖片容器是一個完美的正方形，資訊區塊則垂直堆疊顯示角色和姓名，其中姓氏的特定部分被單獨設計以產生對比。最後，作者定義了<strong>初始動畫狀態</strong>，包括將佔位符推出螢幕下方、首字母縮小至隱藏、以及卡片向右偏移、輕微旋轉並縮小，以實現分層滑入的效果。同時也加入了<strong>響應式設計</strong>，確保在小螢幕上文字縮小、移除寬度限制，並將團隊區塊改為垂直佈局，且移除所有動畫轉換。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_649.jpg" /></p> <hr /> <h2>JavaScript 動畫的準備</h2> <p>在 <strong>JavaScript 階段</strong>，作者首先導入了三個關鍵工具：用於處理動畫的 <strong>GSAP</strong>、用於將動畫與用戶滾動同步的 <strong>ScrollTrigger</strong>、以及提供平滑滾動體驗的輕量級庫 <strong>Lenis</strong>。所有代碼都被包裹在一個 `DOM content loaded` 事件監聽器中，以確保頁面完全加載後才開始執行。隨後，作者註冊了 <strong>ScrollTrigger 插件</strong>，這是使用 ScrollTrigger 的必要步驟。接著，初始化 <strong>Lenis</strong> 實例，使其監聽滾動事件，並將其與 <strong>GSAP 的內部觸發器</strong>連接，確保平滑滾動與基於滾動的動畫完美同步。然後，作者選取了將用於動畫的 DOM 元素，包括主 `team` 區塊、所有單獨的 `team-member` 佔位符區塊，以及它們內部的所有 `team-member` 卡片，將它們轉換為陣列以便於後續迭代處理。最後，作者設定了兩個變數來儲存即將創建的 <strong>ScrollTrigger 實例</strong>的引用，一個用於佔位符的進入動畫，另一個用於卡片的滑入動畫，以便於在螢幕尺寸改變時進行清理或刷新。為了保持代碼的整潔和可重用性，所有的動畫邏輯都將被封裝在一個名為 `initTeamAnimations` 的新函數中，便於重置或重新運行。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">On October 2nd, GSAP spotlighted this. incredible website as their site of the. day on Twitter. It stood out to me right. away, packed with fresh, unique. animations that felt smooth and visually. striking. One interaction in particular. really caught my eye. The seamlessly. staged timeline animation on their about. page for the team section. As you. scroll, placeholders for the team card. slide in one by one, each showing just. the initial letter of a team member's. name, and the entire section pins in. place while this unfolds. Then as you. continue scrolling, the actual profile. cards animate in from the side, landing. right on top of their respective. placeholders before this action. eventually unpins and scrolls away. I. thought the entire sequence was clever. and well executed. So I decided to try. rebuilding it from scratch using just. HTML, CSS, and JavaScript powered by. GSAP and scroll trigger. After a few. hours of experimenting, I managed to. recreate the core animation timeline,. including most of the car. transformations. In today's video, I'll. walk you through exactly how I built it. step by step so you can understand how. to create similar scroll-driven. animations for your own projects. If you. find these kinds of rebuilds helpful,. make sure you leave a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_87.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=87" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm creating two simple sections. One at the top with the class hero and. another at the bottom with the class. outro. This give the page a bit of. vertical structure and they also help us. bookend the scroll animation with some. breathing room. Inside each one, I'm. just dropping a heading and H1 tag with. some placeholder text just so the page. doesn't feel empty when we are scrolling. through. Now, between these two sections, we are. going to build the team section itself. I'm adding a new section with the class. team. This is the main wrapper that will. hold all of our team member cards. Inside this section, we are defining the. structure for each individual card. To. do that, I'm creating a div with the. class team member. This is our parent. container. We'll style it later as a. placeholder that the actual card can. animate into. Inside every team member. area, there are two key elements. The. first is a div with the class team. member name initial and the second. element is another div with the class. team member card. This is the actual. card that we'll animate in later. Now,. team member name initial is where I'll. put a large single letter H1, the. initial of the team member's name. This. letter will appear first as a. placeholder before the full card slides. in. Inside the card, we are splitting it. into two parts. an image container with. the class team member image which just. holds an image tag for the profile. picture and a second container with the. class team member info where we'll place. a paragraph for the role and an H1 for. the full name with the last name wrapped. in a span for styling flexibility. That's the basic structure for one team. member. Once that's in place, we simply. copy and paste this whole team member. block two more times and update the. initials, the role, the name, and the. image source for the other two members. This gives us three team member cards in. total, each following the exact same. structure. And that's pretty much it for. the HTML. Next, we'll move on to the CSS. to style everything and prepare it for. the scroll trigger transitions. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_199.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=199" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I've imported two type faces from. Google Fonts. We are using Boondensed. for the bold oversized headings and DM. mono for the smaller details like ro. descriptions. Then, I'm setting up a few. custom colors using root variables. There is a dark background for the base,. a light off-white tone for the cards,. and a bright orange accent we'll use. throughout the animation. Now, let's set. the global styles. I'm removing all. default spacing and making sure elements. follow consistent box model just to keep. the layout predictable as we go. Next,. I'm setting the base styles for the. page. The body uses our main type face. with a dark background and light. foreground text. It's clean and minimal,. which works really well with the bold. animation we are going to build. images. are set to fully cover their containers. and crop neatly inside their frames. For. the main headings, I'm making them all. uppercase and really bold. They are. oversized, tight in line spacing and. meant to fill like strong design. elements on the page. For smaller text. like the team rolls, I am switching to. the monospaced font. It's also. uppercase, just more subtle in size and. weight, so it doesn't compete with the. main headlines. Now, let's style the layout for each. section. I'm giving all sections full. height and hiding any overflow. This. makes sure our animations stay. contained. There is also a bit of. padding to keep everything from hugging. the edges. The content inside hero and. outro sections are centered in both. directions. Inside them, the heading sits in the. middle of the screen and uses the accent. color to stand out clearly against the. dark background. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_295.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's move on to the team section. We are displaying it as a flex layout. So all three team members sit side by. side with some space between them. Each member takes up equal space, has. rounded corners and gets a subtle dashed. border. This acts as the placeholder. zone where the card will eventually. slide in. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">To control the layer order during. animation, I'm stacking them using the. Zindex. So the first card sits on top. the second one behind that and the third. one at the bottom. Now, inside each team. member block, we start with the initial. letter. This is placed exactly at the. center using transforms and it's huge. meant to represent the first letter of. the team member's name before the full. card arrives. The color here is our. orange accent and we'll animate the. scale of this letter later on. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then we have the actual card that slides. in. It's also centered within its parent. and it has the same width and height as. the container including the offset for. the borders. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_361.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">I have added some padding and rounded. corners. And we are using a vertical. layout to stack everything inside. This. will feel like a smooth layer that. animates over the placeholder. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The image container is a perfect square. with rounded edges and the image inside. will crop cleanly so it doesn't. overflow. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Below that the info section is also. centered and stragged vertically. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">We have got the role at the top in small. text and the name below in large bold. type. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The last name is wrapped in a span so we. can style it separately. In this case,. using the dark background color to. create contrast against the lighter. card. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_425.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's define the initial animation. states. Each team member placeholder. area starts off push down from the. screen. The initial letter is scaled all the way. down. So it's hidden. and the card themselves are offset to. the right, slightly rotated and scaled. down. H1 is pushed away a little more. than the last which pushes all the cards. way out of the screen and gives us that. layered sliding effect we are going to. animate later. Finally, I've added some. responsive styling for smaller screens. when the screen width drops below a. certain point which shrink down the. text. Remove the width limits on the. headings and switch the team section to. a vertical layout instead of horizontal. Each card is centered and stacked with. some spacing between them. And we remove. all the transforms so the layout sits. naturally without animation. The. initials are now fully scaled up by. default and the cards are reset to full. scale with no rotation. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">And that's it for the CSS. We have. styled the full layout, set the stage. for all our scroll-based animations, and. made sure everything responds properly. on smaller screens. Next, we'll move. into JavaScript and bring all of this to. life using GSAP and scroll trigger. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_500.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=500" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First of all, I'm importing the tools. we'll be using for this build. We are. bringing in GSAP to handle all the. animations, scroll trigger to sync them. with the user scroll, and Lenis, a. lightweight library that gives a smooth. buttery scrolling. Next, I'm wrapping. everything inside a DOM content loaded. event. This just makes sure the page has. finished loading before we start. selecting elements or triggering. animations. Inside that, the first thing. we do is register the scroll trigger. plug-in with GSAP. This step is always. required whenever we are using scroll. trigger, otherwise the animations won't. work. After that, I'm setting up Lennis. We create a new instance and tell it to. listen to scroll events. Then we connect. Lis Gap's internal trigger so GSAP knows. when to update during scroll. This keeps. everything perfectly synced between our. smooth scroll and the scroll-based. animations. Next, we are grabbing the. elements we'll be animating. We are. selecting the main team section, then. converting all the individual team. member area blocks into an array and. doing the same for all the team member. cards inside them. This just makes it. easier to loop through everything later. And finally, for this block, I'm setting. up two variables. These will hold. references to the scroll triggers we are. about to create. one for the placeholder. entrance and one for the card slide in. animation. This way, we can clean them. up or refresh them later if the screen. resizes. That's the setup. In the next. block, we'll start defining how the. animations actually work. Now, to. organize everything cleanly, I'm. creating a new function called init team. animations. This is where we'll define. all the animation logic from the. entrance of the placeholders to the full. card slide in sequence. I like keeping. it inside a dedicated function like this. so it's easy to reset or rerun when. needed, especially on resize. Right. after defining the function, I'm calling. it at the bottom of the script just once. to kick things off as soon as the page. loads. This way, I can walk you through. each animation one step at a time and we. can preview how it behaves in the. browser as we build it out. In the next. step, we'll start with a quick check for. screen size and add logic to reset or. disable the animation on smaller. devices. inside the function. The first. thing I'm doing is checking the screen. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">size. If the window width is below a,000. pixels, which basically means we are on. a tablet or a phone, then we don't want. to run any of the scroll triggered. animations. So, right away, I'm checking. if any animations already exist, and if. they do, I'm killing them. This just. makes sure we are not leaving any old. scroll triggers active in the. background. Then I'm looping through all. the team member elements and clearing. any inline styles that may have been. added by GSAP during previous. animations. I am doing the same thing. for the large initials inside each. member block and also for all the cards. themselves. This resets everything back. to a clean state with no transforms or. overrides. So the layout stacks properly. on smaller screens. After that I just. return early and skip the rest of the. function. There is no point running any. scroll-based logic if we are on a small. device. Right after that mobile block,. I'm also repeating the same kill check. again just to be safe. If this is a. larger screen and the function is being. reinitialized for any reason, we want to. make sure we are starting fresh without. any duplicate triggers. Next, we'll. start building the first scroll. animation, the placeholder entrance. All. right, now we are setting up our first. scroll trigger. This one handles the. placeholder entrance animation, but the. team member blocks rise up into view and. reveal their initial letters. We are. creating a new scroll trigger instance. and assigning it to a variable called. card placeholder entrance. First, I'm. telling it what to watch. In this case,. we are using the main team section as. the trigger. The animation begins when. the top of the team section hits the. bottom of the viewport. Basically, when. it starts coming into viewport and ends. when the top of that section reaches the. top of the screen. This gives us a nice. vertical range to work with. I've also. enabled scrub, which means the animation. is fully tied to the scroll. So as you. scroll forward or backward the movement. plays in sync. Now inside the on update. call back I'm tracking the scroll. progress. This value goes from 0 to one. based on how far we are between the. start and end. Then I'm looping through. all the team members one by one and I'm. calculating when each one should animate. in. I'm giving each member a slight. delay so they don't all animate at the. same time. The delay increases with each. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">index which creates a nice staggered. entrance. Then I'm checking where we are. in the scroll timeline. If this cl is. within the window for that member's. entrance, we calculate how far into the. animation they should be. Based on that,. I move the entire team member upward by. adjusting its vertical position,. starting fully pushed down and easing it. into place as we scroll. At the same. time, I'm targeting the initial letter. inside that block and scaling it up from. zero to full size. I'm also delaying. that scale a little so the block slides. in first and then the letter pops into. view shortly after. If you have already. scrolled past that member's entrance. completely, I'm snapping everything into. place. The team member sits at the top. and the letter is fully scaled. This. whole block gives us that first part of. the animation. The scroll triggered. entrance of the placeholders one by one. with their initials rising up and. scaling into view. Next, we'll move on. to the second animation where the full. cards slide in and settle on top of the. placeholders. So, we are creating. another scroll trigger and assigning it. to a variable called card slide in. animation. This time the animation. starts when the top of the team section. reaches the top of the screen and it. scrolls for the height of three full. screen lines. So we have enough space to. slowly animate all the cards in one by. one. I've also pinned the team section. during this phase so the rest of the. page freezes while the cards animate in. place. And just like before I've enabled. scrub so the entire sequence stays tied. to scroll position. Inside the on update call back, we are. tracking the scroll progress from 0 to. one and looping through each team member. card. First, I'm calculating how long. each card should take to slide in and. when it should begin. I'm staggering. them one after another. So, the first. card moves first, then the second, then. the third. For each card, I am figuring. out its current progress through that. entrance window. Then, I'm calculating. its horizontal movement, starting way. off to the right and easing into the. center as the scroll continues. At the. same time, I'm rotating the card. starting with a slight tilt and slowly. leveling it out to zero. This creates. that nice natural and stacking effect. If you scrolled past the point where the. card should have finished sliding in, I. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">am just snapping it into its final. position centered and upright. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_888.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">After that, we move on to the scaling. effect. Each card starts a little. smaller and gradually scales up to its. full size as the scroll moves forward. Again, I'm staggering this for each card. so the timing feels fluid and layered. I'm calculating the current scale. progress based on scroll position and. easing the size up from the smaller. value to the final scale. If we scrolled. past that point, we simply lock the. scale at full size and that's it. This. block brings in all three cards, slides. them into place with smooth motion,. eases out the rotation, and scales them. up as the scroll unfolds. By the end of. the sequence, we have transitioned from. simple letter placeholders to fully. animated profile cards sitting cleanly. on the screen. That completes the entire. animation timeline. Now, just to make. sure everything stays responsive, I'm. adding a resize listener at the very end. of the script. So, anytime the browser. window is resized, whether someone is. rotating their phone or changing device. orientation or dragging the window on. desktop, we want to recheck everything. and adjust the animation if needed. To. avoid running it too many times in a. row, I'm using a quick timeout to. debounce it. This just waits a short. moment after the resize stops and then. calls our init animations function again. that reruns all the scroll logic from. scratch and then I'm calling scroll. trigger refresh to recalculate all the. trigger positions and layouts. This. makes the entire animation timeline. fully responsive and ensures everything. behaves correctly whether we resize from. desktop to mobile or the other way. around. So that was it. Hope you found. the video helpful. See you in the next. one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=HWoKkkPVJ9A">https://www.youtube.com/watch?v=HWoKkkPVJ9A</a></p><p>Rebuilding an award-winning animated team section using HTML, CSS, and JavaScript — powered by GSAP and ScrollTrigger.</p><p></p><p>Unlock Source Code with PRO — Get 50% OFF CodegridPRO using the code CGPROSAVE50 at checkout, or grab it directly here: <a href="https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50">https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50</a></p><p></p><p>Inspiration: Working Stiff Films</p><p>Website: <a href="https://stiff.madebybuzzworthy.com/">https://stiff.madebybuzzworthy.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:27 HTML</p><p>3:19 CSS</p><p>8:20 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/HWoKkkPVJ9A/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=HWoKkkPVJ9A">https://www.youtube.com/watch?v=HWoKkkPVJ9A</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 創建複雜且流暢的滾動驅動動畫。</li> <li>深入了解一個專業級網站的「團隊」區塊動畫是如何從零開始重建，包括其 <strong>HTML</strong> 結構、<strong>CSS</strong> 樣式和 <strong>JavaScript</strong> 動畫邏輯。</li> <li>掌握將平滑滾動庫 <strong>Lenis</strong> 與 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 整合，以提供優雅的用戶體驗。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片介紹與靈感來源</h2> <p>在十月二日，<strong>GSAP</strong> 在其 Twitter 上將一個令人驚嘆的網站標記為當日之星。該網站獨特的動畫設計立刻引起了作者的注意，尤其是其「關於我們」頁面中，<strong>團隊成員介紹區塊</strong>那種無縫且分階段呈現的時程軸動畫。當使用者滾動頁面時，團隊卡片的<strong>佔位符</strong>會一個接一個地滑入，每個只顯示隊員名字的首字母。整個區塊會被<strong>釘住</strong>在原地，隨後，實際的個人資料卡片會從側邊動畫滑入，精確地落在各自的佔位符上方，最終該區塊才會解除釘住並滾動離開。作者認為這整個序列既巧妙又執行得很好，因此決定使用 <strong>HTML、CSS 和 JavaScript</strong>，並藉助 <strong>GSAP</strong> 和 <strong>ScrollTrigger</strong> 的力量，從頭開始重建它。本影片旨在逐步引導觀眾了解其建立過程，以便他們能為自己的專案創建類似的滾動驅動動畫。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_95.jpg" /></p> <hr /> <h2>HTML 骨架的搭建</h2> <p>作者首先創建了兩個簡單的區塊：頂部的 `hero` 區塊和底部的 `outro` 區塊，它們為頁面提供了垂直結構和視覺上的呼吸空間。在這兩個區塊之間，作者建立了一個核心的 `team` 區塊，作為所有團隊成員卡片的主容器。每個團隊成員的結構被定義在一個 `team-member` 的 `div` 中，作為實際卡片動畫滑入時的<strong>佔位符</strong>。每個 `team-member` 區域包含兩個關鍵元素：一個是顯示團隊成員名字<strong>首字母</strong>的 `team-member-name-initial` `div`，另一個則是將來會動畫滑入的<strong>實際卡片</strong> `team-member-card`。卡片內部進一步細分為一個用於個人資料圖片的 `image container` 和一個顯示角色與姓名的 `info container`，其中姓氏的最後一部分被包裹在 `span` 中以提供樣式彈性。完成一個團隊成員的結構後，作者複製並貼上兩次以創建共三個團隊成員卡片，並更新其內容。這便完成了所有的 <strong>HTML 結構</strong>。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_235.jpg" /></p> <hr /> <h2>CSS 樣式的設計</h2> <p>在 <strong>CSS 階段</strong>，作者首先從 Google Fonts 導入了兩種字體（Boondensed 用於粗體標題，DM mono 用於細節文字）並定義了自訂的根變數來管理顏色主題，包括深色背景、淺色卡片和亮橘色強調色。全球樣式設定移除了預設間距，確保了<strong>一致的盒模型</strong>，並為頁面設定了基礎樣式，如深色背景與淺色前景文字。圖片被設定為完美覆蓋其容器，主要標題設計為大寫、粗體且特大，而較小的文本則使用等寬字體以避免與主標題競爭。針對各區塊的佈局，所有區塊都被賦予了全高並隱藏溢出內容。<strong>團隊區塊</strong>則採用了 <strong>Flex 佈局</strong>，使三位團隊成員並排顯示，每個成員佔據相同的空間，並帶有圓角和虛線邊框作為卡片的佔位符。為了控制動畫期間的圖層順序，作者利用 <strong>Z-index</strong> 進行堆疊。首字母被精確置中，尺寸巨大並使用亮橘色強調色，其大小將在動畫中改變。實際卡片同樣置中，並具有與容器相同的尺寸，包含內邊距、圓角和垂直佈局，營造出一個平滑覆蓋佔位符的圖層。圖片容器是一個完美的正方形，資訊區塊則垂直堆疊顯示角色和姓名，其中姓氏的特定部分被單獨設計以產生對比。最後，作者定義了<strong>初始動畫狀態</strong>，包括將佔位符推出螢幕下方、首字母縮小至隱藏、以及卡片向右偏移、輕微旋轉並縮小，以實現分層滑入的效果。同時也加入了<strong>響應式設計</strong>，確保在小螢幕上文字縮小、移除寬度限制，並將團隊區塊改為垂直佈局，且移除所有動畫轉換。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_649.jpg" /></p> <hr /> <h2>JavaScript 動畫的準備</h2> <p>在 <strong>JavaScript 階段</strong>，作者首先導入了三個關鍵工具：用於處理動畫的 <strong>GSAP</strong>、用於將動畫與用戶滾動同步的 <strong>ScrollTrigger</strong>、以及提供平滑滾動體驗的輕量級庫 <strong>Lenis</strong>。所有代碼都被包裹在一個 `DOM content loaded` 事件監聽器中，以確保頁面完全加載後才開始執行。隨後，作者註冊了 <strong>ScrollTrigger 插件</strong>，這是使用 ScrollTrigger 的必要步驟。接著，初始化 <strong>Lenis</strong> 實例，使其監聽滾動事件，並將其與 <strong>GSAP 的內部觸發器</strong>連接，確保平滑滾動與基於滾動的動畫完美同步。然後，作者選取了將用於動畫的 DOM 元素，包括主 `team` 區塊、所有單獨的 `team-member` 佔位符區塊，以及它們內部的所有 `team-member` 卡片，將它們轉換為陣列以便於後續迭代處理。最後，作者設定了兩個變數來儲存即將創建的 <strong>ScrollTrigger 實例</strong>的引用，一個用於佔位符的進入動畫，另一個用於卡片的滑入動畫，以便於在螢幕尺寸改變時進行清理或刷新。為了保持代碼的整潔和可重用性，所有的動畫邏輯都將被封裝在一個名為 `initTeamAnimations` 的新函數中，便於重置或重新運行。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">On October 2nd, GSAP spotlighted this. incredible website as their site of the. day on Twitter. It stood out to me right. away, packed with fresh, unique. animations that felt smooth and visually. striking. One interaction in particular. really caught my eye. The seamlessly. staged timeline animation on their about. page for the team section. As you. scroll, placeholders for the team card. slide in one by one, each showing just. the initial letter of a team member's. name, and the entire section pins in. place while this unfolds. Then as you. continue scrolling, the actual profile. cards animate in from the side, landing. right on top of their respective. placeholders before this action. eventually unpins and scrolls away. I. thought the entire sequence was clever. and well executed. So I decided to try. rebuilding it from scratch using just. HTML, CSS, and JavaScript powered by. GSAP and scroll trigger. After a few. hours of experimenting, I managed to. recreate the core animation timeline,. including most of the car. transformations. In today's video, I'll. walk you through exactly how I built it. step by step so you can understand how. to create similar scroll-driven. animations for your own projects. If you. find these kinds of rebuilds helpful,. make sure you leave a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_87.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=87" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm creating two simple sections. One at the top with the class hero and. another at the bottom with the class. outro. This give the page a bit of. vertical structure and they also help us. bookend the scroll animation with some. breathing room. Inside each one, I'm. just dropping a heading and H1 tag with. some placeholder text just so the page. doesn't feel empty when we are scrolling. through. Now, between these two sections, we are. going to build the team section itself. I'm adding a new section with the class. team. This is the main wrapper that will. hold all of our team member cards. Inside this section, we are defining the. structure for each individual card. To. do that, I'm creating a div with the. class team member. This is our parent. container. We'll style it later as a. placeholder that the actual card can. animate into. Inside every team member. area, there are two key elements. The. first is a div with the class team. member name initial and the second. element is another div with the class. team member card. This is the actual. card that we'll animate in later. Now,. team member name initial is where I'll. put a large single letter H1, the. initial of the team member's name. This. letter will appear first as a. placeholder before the full card slides. in. Inside the card, we are splitting it. into two parts. an image container with. the class team member image which just. holds an image tag for the profile. picture and a second container with the. class team member info where we'll place. a paragraph for the role and an H1 for. the full name with the last name wrapped. in a span for styling flexibility. That's the basic structure for one team. member. Once that's in place, we simply. copy and paste this whole team member. block two more times and update the. initials, the role, the name, and the. image source for the other two members. This gives us three team member cards in. total, each following the exact same. structure. And that's pretty much it for. the HTML. Next, we'll move on to the CSS. to style everything and prepare it for. the scroll trigger transitions. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_199.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=199" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I've imported two type faces from. Google Fonts. We are using Boondensed. for the bold oversized headings and DM. mono for the smaller details like ro. descriptions. Then, I'm setting up a few. custom colors using root variables. There is a dark background for the base,. a light off-white tone for the cards,. and a bright orange accent we'll use. throughout the animation. Now, let's set. the global styles. I'm removing all. default spacing and making sure elements. follow consistent box model just to keep. the layout predictable as we go. Next,. I'm setting the base styles for the. page. The body uses our main type face. with a dark background and light. foreground text. It's clean and minimal,. which works really well with the bold. animation we are going to build. images. are set to fully cover their containers. and crop neatly inside their frames. For. the main headings, I'm making them all. uppercase and really bold. They are. oversized, tight in line spacing and. meant to fill like strong design. elements on the page. For smaller text. like the team rolls, I am switching to. the monospaced font. It's also. uppercase, just more subtle in size and. weight, so it doesn't compete with the. main headlines. Now, let's style the layout for each. section. I'm giving all sections full. height and hiding any overflow. This. makes sure our animations stay. contained. There is also a bit of. padding to keep everything from hugging. the edges. The content inside hero and. outro sections are centered in both. directions. Inside them, the heading sits in the. middle of the screen and uses the accent. color to stand out clearly against the. dark background. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_295.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's move on to the team section. We are displaying it as a flex layout. So all three team members sit side by. side with some space between them. Each member takes up equal space, has. rounded corners and gets a subtle dashed. border. This acts as the placeholder. zone where the card will eventually. slide in. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">To control the layer order during. animation, I'm stacking them using the. Zindex. So the first card sits on top. the second one behind that and the third. one at the bottom. Now, inside each team. member block, we start with the initial. letter. This is placed exactly at the. center using transforms and it's huge. meant to represent the first letter of. the team member's name before the full. card arrives. The color here is our. orange accent and we'll animate the. scale of this letter later on. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then we have the actual card that slides. in. It's also centered within its parent. and it has the same width and height as. the container including the offset for. the borders. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_361.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">I have added some padding and rounded. corners. And we are using a vertical. layout to stack everything inside. This. will feel like a smooth layer that. animates over the placeholder. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The image container is a perfect square. with rounded edges and the image inside. will crop cleanly so it doesn't. overflow. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Below that the info section is also. centered and stragged vertically. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">We have got the role at the top in small. text and the name below in large bold. type. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The last name is wrapped in a span so we. can style it separately. In this case,. using the dark background color to. create contrast against the lighter. card. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_425.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's define the initial animation. states. Each team member placeholder. area starts off push down from the. screen. The initial letter is scaled all the way. down. So it's hidden. and the card themselves are offset to. the right, slightly rotated and scaled. down. H1 is pushed away a little more. than the last which pushes all the cards. way out of the screen and gives us that. layered sliding effect we are going to. animate later. Finally, I've added some. responsive styling for smaller screens. when the screen width drops below a. certain point which shrink down the. text. Remove the width limits on the. headings and switch the team section to. a vertical layout instead of horizontal. Each card is centered and stacked with. some spacing between them. And we remove. all the transforms so the layout sits. naturally without animation. The. initials are now fully scaled up by. default and the cards are reset to full. scale with no rotation. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">And that's it for the CSS. We have. styled the full layout, set the stage. for all our scroll-based animations, and. made sure everything responds properly. on smaller screens. Next, we'll move. into JavaScript and bring all of this to. life using GSAP and scroll trigger. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_500.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/HWoKkkPVJ9A&t=500" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First of all, I'm importing the tools. we'll be using for this build. We are. bringing in GSAP to handle all the. animations, scroll trigger to sync them. with the user scroll, and Lenis, a. lightweight library that gives a smooth. buttery scrolling. Next, I'm wrapping. everything inside a DOM content loaded. event. This just makes sure the page has. finished loading before we start. selecting elements or triggering. animations. Inside that, the first thing. we do is register the scroll trigger. plug-in with GSAP. This step is always. required whenever we are using scroll. trigger, otherwise the animations won't. work. After that, I'm setting up Lennis. We create a new instance and tell it to. listen to scroll events. Then we connect. Lis Gap's internal trigger so GSAP knows. when to update during scroll. This keeps. everything perfectly synced between our. smooth scroll and the scroll-based. animations. Next, we are grabbing the. elements we'll be animating. We are. selecting the main team section, then. converting all the individual team. member area blocks into an array and. doing the same for all the team member. cards inside them. This just makes it. easier to loop through everything later. And finally, for this block, I'm setting. up two variables. These will hold. references to the scroll triggers we are. about to create. one for the placeholder. entrance and one for the card slide in. animation. This way, we can clean them. up or refresh them later if the screen. resizes. That's the setup. In the next. block, we'll start defining how the. animations actually work. Now, to. organize everything cleanly, I'm. creating a new function called init team. animations. This is where we'll define. all the animation logic from the. entrance of the placeholders to the full. card slide in sequence. I like keeping. it inside a dedicated function like this. so it's easy to reset or rerun when. needed, especially on resize. Right. after defining the function, I'm calling. it at the bottom of the script just once. to kick things off as soon as the page. loads. This way, I can walk you through. each animation one step at a time and we. can preview how it behaves in the. browser as we build it out. In the next. step, we'll start with a quick check for. screen size and add logic to reset or. disable the animation on smaller. devices. inside the function. The first. thing I'm doing is checking the screen. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">size. If the window width is below a,000. pixels, which basically means we are on. a tablet or a phone, then we don't want. to run any of the scroll triggered. animations. So, right away, I'm checking. if any animations already exist, and if. they do, I'm killing them. This just. makes sure we are not leaving any old. scroll triggers active in the. background. Then I'm looping through all. the team member elements and clearing. any inline styles that may have been. added by GSAP during previous. animations. I am doing the same thing. for the large initials inside each. member block and also for all the cards. themselves. This resets everything back. to a clean state with no transforms or. overrides. So the layout stacks properly. on smaller screens. After that I just. return early and skip the rest of the. function. There is no point running any. scroll-based logic if we are on a small. device. Right after that mobile block,. I'm also repeating the same kill check. again just to be safe. If this is a. larger screen and the function is being. reinitialized for any reason, we want to. make sure we are starting fresh without. any duplicate triggers. Next, we'll. start building the first scroll. animation, the placeholder entrance. All. right, now we are setting up our first. scroll trigger. This one handles the. placeholder entrance animation, but the. team member blocks rise up into view and. reveal their initial letters. We are. creating a new scroll trigger instance. and assigning it to a variable called. card placeholder entrance. First, I'm. telling it what to watch. In this case,. we are using the main team section as. the trigger. The animation begins when. the top of the team section hits the. bottom of the viewport. Basically, when. it starts coming into viewport and ends. when the top of that section reaches the. top of the screen. This gives us a nice. vertical range to work with. I've also. enabled scrub, which means the animation. is fully tied to the scroll. So as you. scroll forward or backward the movement. plays in sync. Now inside the on update. call back I'm tracking the scroll. progress. This value goes from 0 to one. based on how far we are between the. start and end. Then I'm looping through. all the team members one by one and I'm. calculating when each one should animate. in. I'm giving each member a slight. delay so they don't all animate at the. same time. The delay increases with each. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">index which creates a nice staggered. entrance. Then I'm checking where we are. in the scroll timeline. If this cl is. within the window for that member's. entrance, we calculate how far into the. animation they should be. Based on that,. I move the entire team member upward by. adjusting its vertical position,. starting fully pushed down and easing it. into place as we scroll. At the same. time, I'm targeting the initial letter. inside that block and scaling it up from. zero to full size. I'm also delaying. that scale a little so the block slides. in first and then the letter pops into. view shortly after. If you have already. scrolled past that member's entrance. completely, I'm snapping everything into. place. The team member sits at the top. and the letter is fully scaled. This. whole block gives us that first part of. the animation. The scroll triggered. entrance of the placeholders one by one. with their initials rising up and. scaling into view. Next, we'll move on. to the second animation where the full. cards slide in and settle on top of the. placeholders. So, we are creating. another scroll trigger and assigning it. to a variable called card slide in. animation. This time the animation. starts when the top of the team section. reaches the top of the screen and it. scrolls for the height of three full. screen lines. So we have enough space to. slowly animate all the cards in one by. one. I've also pinned the team section. during this phase so the rest of the. page freezes while the cards animate in. place. And just like before I've enabled. scrub so the entire sequence stays tied. to scroll position. Inside the on update call back, we are. tracking the scroll progress from 0 to. one and looping through each team member. card. First, I'm calculating how long. each card should take to slide in and. when it should begin. I'm staggering. them one after another. So, the first. card moves first, then the second, then. the third. For each card, I am figuring. out its current progress through that. entrance window. Then, I'm calculating. its horizontal movement, starting way. off to the right and easing into the. center as the scroll continues. At the. same time, I'm rotating the card. starting with a slight tilt and slowly. leveling it out to zero. This creates. that nice natural and stacking effect. If you scrolled past the point where the. card should have finished sliding in, I. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">am just snapping it into its final. position centered and upright. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/HWoKkkPVJ9A_888.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">After that, we move on to the scaling. effect. Each card starts a little. smaller and gradually scales up to its. full size as the scroll moves forward. Again, I'm staggering this for each card. so the timing feels fluid and layered. I'm calculating the current scale. progress based on scroll position and. easing the size up from the smaller. value to the final scale. If we scrolled. past that point, we simply lock the. scale at full size and that's it. This. block brings in all three cards, slides. them into place with smooth motion,. eases out the rotation, and scales them. up as the scroll unfolds. By the end of. the sequence, we have transitioned from. simple letter placeholders to fully. animated profile cards sitting cleanly. on the screen. That completes the entire. animation timeline. Now, just to make. sure everything stays responsive, I'm. adding a resize listener at the very end. of the script. So, anytime the browser. window is resized, whether someone is. rotating their phone or changing device. orientation or dragging the window on. desktop, we want to recheck everything. and adjust the animation if needed. To. avoid running it too many times in a. row, I'm using a quick timeout to. debounce it. This just waits a short. moment after the resize stops and then. calls our init animations function again. that reruns all the scroll logic from. scratch and then I'm calling scroll. trigger refresh to recalculate all the. trigger positions and layouts. This. makes the entire animation timeline. fully responsive and ensures everything. behaves correctly whether we resize from. desktop to mobile or the other way. around. So that was it. Hope you found. the video helpful. See you in the next. one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=HWoKkkPVJ9A">https://www.youtube.com/watch?v=HWoKkkPVJ9A</a></p><p>Rebuilding an award-winning animated team section using HTML, CSS, and JavaScript — powered by GSAP and ScrollTrigger.</p><p></p><p>Unlock Source Code with PRO — Get 50% OFF CodegridPRO using the code CGPROSAVE50 at checkout, or grab it directly here: <a href="https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50">https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50</a></p><p></p><p>Inspiration: Working Stiff Films</p><p>Website: <a href="https://stiff.madebybuzzworthy.com/">https://stiff.madebybuzzworthy.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:27 HTML</p><p>3:19 CSS</p><p>8:20 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/HWoKkkPVJ9A/hqdefault.jpg"/>
      <pubDate>2025-10-08T15:30:07.000Z</pubDate>
    </item><item>
      <title><![CDATA[ScrollTrigger Took My Text and Turned It Into Motion Art (Powered by SplitText)]]></title>
      <link>https://www.youtube.com/watch?v=fHm0I23cUzw</link>
      <itunes:title><![CDATA[ScrollTrigger Took My Text and Turned It Into Motion Art (Powered by SplitText)]]></itunes:title>
      <itunes:author><![CDATA[Codegrid]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/fHm0I23cUzw/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=fHm0I23cUzw">https://www.youtube.com/watch?v=fHm0I23cUzw</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用 <strong>GSAP</strong>、<strong>ScrollTrigger</strong> 和 <strong>SplitText</strong> 等強大工具，為網站添加引人入勝的滾動驅動文字動畫。</li> <li>掌握將文本拆分為單個字符並創建獨特「跑馬燈」風格動畫的技術，讓巨大文字從兩側滑入並逐個字母錯位顯示。</li> <li>了解如何建構高效能且響應式的網頁結構，包括 HTML 元素佈局、CSS 樣式設計以及 JavaScript 動畫邏輯，以實現流暢的用戶體驗。</li> </ul> <hr /> <h1>摘要</h1> <h2>專案介紹與技術概覽</h2> <p>這段影片展示了如何從頭開始重建一個在 awwwards 網站上被評為「每日最佳網站」的互動效果：一種大膽的「跑馬燈」風格文字動畫。這種動畫的特色是超大文字從頁面兩側滑入，以錯位的方式逐個字母顯示。作者過去曾重建該網站的其他動畫，例如滾動驅動的圖像顯示和聚光燈效果圖庫，而此次的重點則是這個獨特的文字效果。整個專案將利用 <strong>GSAP (GreenSock Animation Platform)</strong> 進行動畫核心控制，搭配 <strong>ScrollTrigger</strong> 實現滾動同步，並使用 <strong>SplitText</strong> 將文字拆分成獨立字符進行精細動畫。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_58.jpg" /></p> <hr /> <h2>HTML 結構設定</h2> <p>專案的 HTML 結構相對簡單而有條理。首先，作者創建了兩個基礎區塊：頂部的 <code>intro</code> 區塊和底部的 <code>outro</code> 區塊，它們各自包含一個 <code>H1</code> 標題作為佔位符，提供頁面垂直結構和滾動動畫的「呼吸空間」。核心動畫內容則包裹在一個名為 <code>animated-titles</code> 的區塊中。在這個主要區塊內部，有三個 <code>div</code> 元素，每個帶有 <code>title</code> 類別，代表動畫中的獨立「幻燈片」或短語。每個 <code>title</code> 區塊內又包含一個 <code>title-container</code> <code>div</code>，這個元素是水平滑動動畫的目標，將動畫動作與實際文本分離。最後，在每個 <code>title-container</code> 內部，有一個 <code>H1</code> 標題，這些正是將被 <strong>SplitText</strong> 拆分成獨立字符的大型文本元素。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_149.jpg" /></p> <hr /> <h2>CSS 樣式設計</h2> <p>在 CSS 部分，作者首先從 Google Fonts 導入了 <strong>Mandro</strong> 字體，這款現代無襯線字體非常適合大型文本處理。接著，定義了幾個根級別的顏色變數，用於確保設計在整個滾動體驗中的一致性。作者應用了全局重置，移除默認邊距和填充，並設定 <code>box-sizing: border-box</code> 以確保元素尺寸的可預測性。<code>body</code> 元素被設定為使用 Mandro 字體，搭配柔和的米白色背景和深色文本。所有 <code>H1</code> 標題都設定為特大、粗體，並具有緊湊的行高和微負的字距，以呈現強烈且緊湊的外觀。每個動畫區塊 (<code>section</code>) 都設為相對定位、全寬並隱藏溢出內容。<code>intro</code> 和 <code>outro</code> 區塊的高度被設定為全螢幕，並將文字水平垂直居中。動畫標題區塊 (<code>title</code>) 也佔據了大部分螢幕高度，並使用 Flexbox 將內容垂直居中。<code>title-container</code> 被設定為全寬，相對定位，並帶有 <code>will-change: transform</code> 屬性，以優化動畫性能。為了視覺上的節奏感，作者使用 <code>:nth-child</code> 選擇器交替設定了 <code>title</code> 區塊的背景顏色。最後，為 <strong>SplitText</strong> 自動應用的 <code>.character</code> 類別設定了 <code>display: inline-block</code> 和 <code>position: relative</code>，同樣加上 <code>will-change: transform</code> 以確保字符動畫的流暢性，並添加媒體查詢來實現響應式設計。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_343.jpg" /></p> <hr /> <h2>JavaScript 初始化與文本處理</h2> <p>JavaScript 部分首先導入了專案所需的四個關鍵庫：<strong>GSAP</strong> (核心動畫庫)、<strong>ScrollTrigger</strong> (滾動同步動畫)、<strong>SplitText</strong> (文本拆分工具) 和 <strong>Lenis</strong> (輕量級高性能平滑滾動庫)。所有 JavaScript 邏輯都在 <code>DOMContentLoaded</code> 事件監聽器中執行，以確保 HTML 完全加載後才操作元素。首先，作者註冊了 GSAP 的 <strong>ScrollTrigger</strong> 和 <strong>SplitText</strong> 插件。接著，使用 <strong>Lenis</strong> 設定了平滑滾動，並確保它與 <strong>ScrollTrigger</strong> 同步，即使在覆蓋原生滾動行為時也能保持動畫位置的準確性。在文本處理階段，作者選取了所有 <code>title</code> 區塊內的 <code>H1</code> 元素，並將它們轉換為可迭代的陣列。隨後，迭代每個 <code>H1</code> 元素，使用 <strong>SplitText</strong> 將其內容拆分為單個字符，並為每個字符應用 <code>character</code> 類別。這些拆分後的字符實例被儲存在一個 <code>splits</code> 陣列中，以便後續引用。在動畫準備階段，作者為每個字符設定了初始的 <code>Y</code> 軸位置，奇偶索引的字符交替地從上方和下方偏移，從而創造出微妙的波浪形錯位運動，為滾動時的字母入位動畫奠定基礎。最後，所有 <code>title</code> 區塊本身也被選取，它們將被用作 <strong>ScrollTrigger</strong> 的觸發器。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_522.jpg" /></p> <hr /> <h2>ScrollTrigger 動畫邏輯</h2> <p>在所有字符都準備就緒之後，作者開始構建滾動驅動的動畫，使一切栩栩如生。他遍歷每個 <code>title</code> 區塊，並為每個區塊創建一個 <strong>ScrollTrigger</strong> 實例。在每個實例中，他選取當前 <code>title</code> 區塊內的 <code>title-container</code> 元素，這將是隨著用戶滾動而進行水平動畫的目標元素。隨後，作者設定了 <code>title-container</code> 的初始 <code>X</code> 軸偏移量...</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Before we jump into today's build, just. a quick heads up. There is currently a. 50% discount running on CodeCrip Pro. You can use the coupon code in the. description or the direct link to get. half of your first billing period. That. brings the early plan down to just $15. So, if you have been thinking about. joining Pro, now is a pretty good time. All right, for today's video, we are. revisiting this incredible website that. was featured as site of the day on a. watch back in July. We have already. rebuilt a couple of animations from this. site like this scroll powered image. rebels using masks and the spotlight. style image gallery we have covered a. few weeks ago. But there was one more. interaction on the site that really. stood out. This bold marquee style text. animation where oversized words slide in. from the sides revealing each letter in. a staggered flow. It's clean and minimal. and it's one of the few effects we. haven't explored yet on the channel. So,. I spent some time recreating it from. scratch and managed to recreate a. similar text animation concept using. GSA. In today's video, I'll walk you. through exactly how to set it up, how to. structure the elements, split the text. into characters with split text, and. then bring it to life with scroll. powered animations driven by scroll. trigger. If you find these kinds of. ribbles helpful, make sure you leave a. like on the video and subscribe to the. channel if you haven't already. And if. you'd like to access the source code for. this project, plus hundreds of other. similar micro projects and a brand new. website template every month, you can. check out the pro membership via the. link in the description. All right,. let's get into the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_92.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=92" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Let's start with the HTML first. I'm. creating two simple sections. One at the. top with the class intro and another at. the bottom with the class outro. These. give the page a bit of vertical. structure and they also help us book end. the scroll animation with some breathing. room. Inside each one I'm just dropping. a heading in H1 tag with some. placeholder text just so the page. doesn't feel empty when we are scrolling. through. Next, I'm adding a section with. the class animated titles. This is the. main wrapper for all of our animated. text blocks. Inside this section, I am. adding three divs each with the class. title. These represent the individual. slides or phrases of our scroll. animation. Inside each one there is. another div called title container. This. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">is the element we'll animate. horizontally sliding it from the side as. we scroll. It also helps us isolate the. motion from the actual text so we can. have a clean transform target. And. finally inside each container I've added. an H1 with some placeholder phrases. These are the large text elements that. will break into individual characters. using split text and each letter will. animate into place as we scroll through. the section. That's it for the HTML. We. have got our scroll structure, a. container for animated titles, and three. full screen blocks, each holding a bold. headline. Let's move on to the CSS and. start styling everything. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_168.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=168" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I have already imported the. Mandro font from Google Fonts. It's a. modern sensor font that works really. well for large text treatments like this. one. Right after that, I have defined a. few root level color variables. We have. got a light background tone, a dark. foreground for the text, and a soft neon. accent. These will keep the design. consistent across the entire scroll. experience. Now, let's start with some. global resets. We'll remove default. margins and padding from all elements. and use border box sizing so widths and. heights are always predictable. This. gives us a nice clean slate to work. from. Next, I'm setting the base styles. for the body. We are using Mandrop as. the main font across the entire page. with a soft off-white background and. dark text color pulled from our. variables. For the headings, I making. them big and bold. They're extra large. in size, medium weight with tight line. height, and slightly negative letter. spacing. This gives them that strong. compact look we want for the scroll. animation. Now, let's set the base. layout for our sections. Every section. is positioned relative, spans the full. width of the viewport, and hides any. overflow. This makes sure that any. moving element don't spill outside their. bounds. For the intro and outro. sections, the ones that frame our. scroll, I'm giving them full screen. height and centering the text in the. middle vertically and horizontally. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now for the animated titles. Each title. block gets most of the screen height and. inside it we are centering the content. vertically with flexbox. This makes sure. the headline always sits comfortably in. the middle of the screen. Then inside each one we have the title. container. This is the part we'll. animate side to side later using GAP. It's set up with full width, relative. positioning and centered alignment both. ways. and we are marking it with will. change transform which helps the browser. optimize performance during heavy. animation. For the background colors, I. am alternating them using nth child. selectors. The first and third titles. get the accent color while the middle. one keeps the neutral background. This. creates a soft rhythm as they scroll. between phrases. Now let's define the character class. This one is not in the HTML directly but. it gets applied automatically by split. text when we split each heading into. individual characters. Each character is. absolutely critical to the animation. So. we are setting it as inline block with. relative positioning and again using. will change transform so it animates. smoothly when we move it in from above. or below. Finally we are adding a media. query to make the layout more responsive. below thousand pixels wide. The heading. size drops down and we reset the letter. spacing to zero. This keeps the title. readable on smaller screens without. losing the effect. Now it's time to. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">bring it all to life with JavaScript. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_332.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=332" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">At the very top, I have imported the. libraries we'll need for this build. First is GSAP, which powers all the. animations. Then I'm importing scroll. trigger, which allows us to sync those. animations to the user's scroll. position. After that, I'm bringing in. split text, a GSAP utility that breaks. text into characters, words or lines,. which is exactly what we need for this. animation. And finally, I'm importing. Lennis, a lightweight, high performance. smooth scrolling library that we have. used in a bunch of past projects too. Once the page loads, everything runs. inside a DOM content loaded listener. that just makes sure all the HTML is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">fully loaded before we start. manipulating elements. Inside it, the. first step is to register the Gap. plugins. So, we are telling Gap to. activate both scroll trigger and split. text. This step is required anytime. you're working with GSAP's extended. plug-in features. Next, I am setting up. smooth scrolling using Lennis. This part. is pretty much a copy paste from the. official Lenis documentation, which is. what I usually do in these videos. Basically, we are creating a new Lenis. instance, then telling it to notify. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_393.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">scroll trigger every time the user. scrolls. That way, even though we are. overriding native scroll behavior,. scroll trigger stays in sync with the. actual scroll position. At this point,. we have got the full foundation in. place. GSAP is active. Scroll trigger is. ready to sync animations to scroll. Split text is ready to split the. headings and Lennis is powering smooth. scroll behavior across the page. Next,. we'll move on to grabbing the text. elements, splitting them into. characters, and setting up their initial. animation state. First, I'm grabbing all. the H1 elements inside our title. sections. These are the large text. blocks we added earlier in the HTML. I'm. using Gab's two array utility to turn. that node list into a clean iterable. array that makes it easier to loop. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">through and process each one. individually. Right after that, I'm. creating an empty array called splits. This will hold all of our split text. instances so we can reference them later. during the animation phase. Then I'm. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">looping through each element in the. list. For every heading, I'm applying. split text to break the content into. individual characters. I am specifying. the type as characters. So each letter. becomes its own span. and I'm assigning. a class called character to every one of. them that will apply the styling. properties to each character we defined. earlier in CSS. Once the heading is. split, I'm storing the result into. splits array. This way, we can access. each character set later when we animate. them. Now, here is where the animation. prep begins. For each character inside. the split heading, I'm setting its. starting Y position using Gab's set. function to create a subtle wavelike. motion. I'm alternating the starting. offset. Every evenindexed character. starts a little bit above its default. position and every odd indexed character. starts below. That alternating pattern. is what gives the animation it staggered. floating feel as the letters settle into. view during scroll. So at this point we. have selected the headings, split them. into individual letters and set each one. slightly off position ready to animate. into place when triggered. The very last. step in this block is grabbing all of. the title sections themselves. We'll use. this as our scroll triggers. So as each. one enters the viewport, we'll animate. the corresponding characters in the. container. Next, we'll start building. the scroll trigger logic that drives the. animation based on scroll position. Now. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_518.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">that we have prepared all the. characters, let's create the scroll. powered animation that brings everything. to life. I'm looping through each title. section using for each and for each one,. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">we are building a scroll trigger. instance. First, I'm selecting the title. container inside the current title. This. is the element will animate horizontally. as the user scrolls. Then I'm setting an. initial X offset for the container. If. it's the middle title, meaning index. one, I'll shift it from the left by. 100%. Otherwise, I'll shift it in from. the right. This creates a nice. directional contrast. So, not all. headings animate in the same way. After. that, I'm grabbing the split for this. specific title, which gives us access to. all of its characters and storing the. total number of characters in a variable. called character count. Now, we are. ready to set up the scroll trigger. We'll tell it which element to track. In. this case, the current title block and. define the scroll range. The animation. starts when the top of the title enters. the bottom of the viewport and ends when. the top ridge is slightly above the top. of the screen. This gives us a nice long. scroll zone to work with. I've enabled. scrub so the animation is fully tied to. scroll. As you move, the animation. responds immediately to your position. Everything else happens inside the. onupate call back which runs. continuously as you scroll through this. section. Let's break it down. First, we. calculate how far the title container. should be shifted. We take its initial. offset, either plus 100 or minus 100,. and reduce that value as the scroll. progresses. At the start, it's fully off. to the side. At the end, it's perfectly. centered. This creates that smooth. marquee slide in effect where the whole. container drifts horizontally into view. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_615.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now for the fun part, animating each. individual letter. We loop through all. the characters in the heading and figure. out what order they should animate in. For most titles, we go from left to. right. But for the middle one, index. one, we reverse it right to left. This. gives us even more variation and a bit. of visual rhythm. Next, we calculate the. stagger delay for each character, we. start with a base delay, a little buffer. before anything animates. Then, we. spread out the remaining scroll progress. across all the characters. This way, the. animation doesn't happen all at once. Each letter enters at a slightly. different time as you scroll. To do. this, we use a few simple values. Character start delays they prefer at. the beginning. Character timeline span. is how much scroll is left after that. Stagger factor controls how spaced out. the animation is. Each character gets a. slightly different delay and duration. based on its position in the list. This. part of the math might look a bit dense. in the code, but all it's doing is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">calculating when each letter should. start and finish animating based on how. far into the scroll we are. Now we. calculate the actual progress for each. letter. If we haven't reached its delay. yet, the character stays as is. If we are past it, we compute how far. into its animation we are clamping that. value so it never goes beyond the full. reveal. Then we move each character. vertically starting from its initial Y. offset either above or below and easing. it back to zero as the scroll. progresses. This is what creates that. subtle wave of motion as each letter. settles into place at slightly different. times depending on the scroll and its. position in the word. So by the end of. this scroll trigger block, we have got a. synchronized scroll animation where the. full title container slides in. horizontally and the individual. characters animate vertically in a. smooth staggered sequence. That wraps up. the JavaScript. The text animation is. fully working. Hope you found the video. helpful. See you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=fHm0I23cUzw">https://www.youtube.com/watch?v=fHm0I23cUzw</a></p><p>Learn how to turn static headlines into animated micro-theatre with GSAP — powered by ScrollTrigger and SplitText.</p><p></p><p>Unlock Source Code with PRO — Get 50% OFF CodegridPRO using the code CGPROSAVE50 at checkout, or grab it directly here: <a href="https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50">https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50</a></p><p></p><p>Inspiration: Telescope</p><p>Website: <a href="https://telescope.fyi/">https://telescope.fyi/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:32 HTML</p><p>2:48 CSS</p><p>5:32 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/fHm0I23cUzw/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=fHm0I23cUzw">https://www.youtube.com/watch?v=fHm0I23cUzw</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用 <strong>GSAP</strong>、<strong>ScrollTrigger</strong> 和 <strong>SplitText</strong> 等強大工具，為網站添加引人入勝的滾動驅動文字動畫。</li> <li>掌握將文本拆分為單個字符並創建獨特「跑馬燈」風格動畫的技術，讓巨大文字從兩側滑入並逐個字母錯位顯示。</li> <li>了解如何建構高效能且響應式的網頁結構，包括 HTML 元素佈局、CSS 樣式設計以及 JavaScript 動畫邏輯，以實現流暢的用戶體驗。</li> </ul> <hr /> <h1>摘要</h1> <h2>專案介紹與技術概覽</h2> <p>這段影片展示了如何從頭開始重建一個在 awwwards 網站上被評為「每日最佳網站」的互動效果：一種大膽的「跑馬燈」風格文字動畫。這種動畫的特色是超大文字從頁面兩側滑入，以錯位的方式逐個字母顯示。作者過去曾重建該網站的其他動畫，例如滾動驅動的圖像顯示和聚光燈效果圖庫，而此次的重點則是這個獨特的文字效果。整個專案將利用 <strong>GSAP (GreenSock Animation Platform)</strong> 進行動畫核心控制，搭配 <strong>ScrollTrigger</strong> 實現滾動同步，並使用 <strong>SplitText</strong> 將文字拆分成獨立字符進行精細動畫。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_58.jpg" /></p> <hr /> <h2>HTML 結構設定</h2> <p>專案的 HTML 結構相對簡單而有條理。首先，作者創建了兩個基礎區塊：頂部的 <code>intro</code> 區塊和底部的 <code>outro</code> 區塊，它們各自包含一個 <code>H1</code> 標題作為佔位符，提供頁面垂直結構和滾動動畫的「呼吸空間」。核心動畫內容則包裹在一個名為 <code>animated-titles</code> 的區塊中。在這個主要區塊內部，有三個 <code>div</code> 元素，每個帶有 <code>title</code> 類別，代表動畫中的獨立「幻燈片」或短語。每個 <code>title</code> 區塊內又包含一個 <code>title-container</code> <code>div</code>，這個元素是水平滑動動畫的目標，將動畫動作與實際文本分離。最後，在每個 <code>title-container</code> 內部，有一個 <code>H1</code> 標題，這些正是將被 <strong>SplitText</strong> 拆分成獨立字符的大型文本元素。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_149.jpg" /></p> <hr /> <h2>CSS 樣式設計</h2> <p>在 CSS 部分，作者首先從 Google Fonts 導入了 <strong>Mandro</strong> 字體，這款現代無襯線字體非常適合大型文本處理。接著，定義了幾個根級別的顏色變數，用於確保設計在整個滾動體驗中的一致性。作者應用了全局重置，移除默認邊距和填充，並設定 <code>box-sizing: border-box</code> 以確保元素尺寸的可預測性。<code>body</code> 元素被設定為使用 Mandro 字體，搭配柔和的米白色背景和深色文本。所有 <code>H1</code> 標題都設定為特大、粗體，並具有緊湊的行高和微負的字距，以呈現強烈且緊湊的外觀。每個動畫區塊 (<code>section</code>) 都設為相對定位、全寬並隱藏溢出內容。<code>intro</code> 和 <code>outro</code> 區塊的高度被設定為全螢幕，並將文字水平垂直居中。動畫標題區塊 (<code>title</code>) 也佔據了大部分螢幕高度，並使用 Flexbox 將內容垂直居中。<code>title-container</code> 被設定為全寬，相對定位，並帶有 <code>will-change: transform</code> 屬性，以優化動畫性能。為了視覺上的節奏感，作者使用 <code>:nth-child</code> 選擇器交替設定了 <code>title</code> 區塊的背景顏色。最後，為 <strong>SplitText</strong> 自動應用的 <code>.character</code> 類別設定了 <code>display: inline-block</code> 和 <code>position: relative</code>，同樣加上 <code>will-change: transform</code> 以確保字符動畫的流暢性，並添加媒體查詢來實現響應式設計。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_343.jpg" /></p> <hr /> <h2>JavaScript 初始化與文本處理</h2> <p>JavaScript 部分首先導入了專案所需的四個關鍵庫：<strong>GSAP</strong> (核心動畫庫)、<strong>ScrollTrigger</strong> (滾動同步動畫)、<strong>SplitText</strong> (文本拆分工具) 和 <strong>Lenis</strong> (輕量級高性能平滑滾動庫)。所有 JavaScript 邏輯都在 <code>DOMContentLoaded</code> 事件監聽器中執行，以確保 HTML 完全加載後才操作元素。首先，作者註冊了 GSAP 的 <strong>ScrollTrigger</strong> 和 <strong>SplitText</strong> 插件。接著，使用 <strong>Lenis</strong> 設定了平滑滾動，並確保它與 <strong>ScrollTrigger</strong> 同步，即使在覆蓋原生滾動行為時也能保持動畫位置的準確性。在文本處理階段，作者選取了所有 <code>title</code> 區塊內的 <code>H1</code> 元素，並將它們轉換為可迭代的陣列。隨後，迭代每個 <code>H1</code> 元素，使用 <strong>SplitText</strong> 將其內容拆分為單個字符，並為每個字符應用 <code>character</code> 類別。這些拆分後的字符實例被儲存在一個 <code>splits</code> 陣列中，以便後續引用。在動畫準備階段，作者為每個字符設定了初始的 <code>Y</code> 軸位置，奇偶索引的字符交替地從上方和下方偏移，從而創造出微妙的波浪形錯位運動，為滾動時的字母入位動畫奠定基礎。最後，所有 <code>title</code> 區塊本身也被選取，它們將被用作 <strong>ScrollTrigger</strong> 的觸發器。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_522.jpg" /></p> <hr /> <h2>ScrollTrigger 動畫邏輯</h2> <p>在所有字符都準備就緒之後，作者開始構建滾動驅動的動畫，使一切栩栩如生。他遍歷每個 <code>title</code> 區塊，並為每個區塊創建一個 <strong>ScrollTrigger</strong> 實例。在每個實例中，他選取當前 <code>title</code> 區塊內的 <code>title-container</code> 元素，這將是隨著用戶滾動而進行水平動畫的目標元素。隨後，作者設定了 <code>title-container</code> 的初始 <code>X</code> 軸偏移量...</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Before we jump into today's build, just. a quick heads up. There is currently a. 50% discount running on CodeCrip Pro. You can use the coupon code in the. description or the direct link to get. half of your first billing period. That. brings the early plan down to just $15. So, if you have been thinking about. joining Pro, now is a pretty good time. All right, for today's video, we are. revisiting this incredible website that. was featured as site of the day on a. watch back in July. We have already. rebuilt a couple of animations from this. site like this scroll powered image. rebels using masks and the spotlight. style image gallery we have covered a. few weeks ago. But there was one more. interaction on the site that really. stood out. This bold marquee style text. animation where oversized words slide in. from the sides revealing each letter in. a staggered flow. It's clean and minimal. and it's one of the few effects we. haven't explored yet on the channel. So,. I spent some time recreating it from. scratch and managed to recreate a. similar text animation concept using. GSA. In today's video, I'll walk you. through exactly how to set it up, how to. structure the elements, split the text. into characters with split text, and. then bring it to life with scroll. powered animations driven by scroll. trigger. If you find these kinds of. ribbles helpful, make sure you leave a. like on the video and subscribe to the. channel if you haven't already. And if. you'd like to access the source code for. this project, plus hundreds of other. similar micro projects and a brand new. website template every month, you can. check out the pro membership via the. link in the description. All right,. let's get into the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_92.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=92" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Let's start with the HTML first. I'm. creating two simple sections. One at the. top with the class intro and another at. the bottom with the class outro. These. give the page a bit of vertical. structure and they also help us book end. the scroll animation with some breathing. room. Inside each one I'm just dropping. a heading in H1 tag with some. placeholder text just so the page. doesn't feel empty when we are scrolling. through. Next, I'm adding a section with. the class animated titles. This is the. main wrapper for all of our animated. text blocks. Inside this section, I am. adding three divs each with the class. title. These represent the individual. slides or phrases of our scroll. animation. Inside each one there is. another div called title container. This. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">is the element we'll animate. horizontally sliding it from the side as. we scroll. It also helps us isolate the. motion from the actual text so we can. have a clean transform target. And. finally inside each container I've added. an H1 with some placeholder phrases. These are the large text elements that. will break into individual characters. using split text and each letter will. animate into place as we scroll through. the section. That's it for the HTML. We. have got our scroll structure, a. container for animated titles, and three. full screen blocks, each holding a bold. headline. Let's move on to the CSS and. start styling everything. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_168.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=168" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I have already imported the. Mandro font from Google Fonts. It's a. modern sensor font that works really. well for large text treatments like this. one. Right after that, I have defined a. few root level color variables. We have. got a light background tone, a dark. foreground for the text, and a soft neon. accent. These will keep the design. consistent across the entire scroll. experience. Now, let's start with some. global resets. We'll remove default. margins and padding from all elements. and use border box sizing so widths and. heights are always predictable. This. gives us a nice clean slate to work. from. Next, I'm setting the base styles. for the body. We are using Mandrop as. the main font across the entire page. with a soft off-white background and. dark text color pulled from our. variables. For the headings, I making. them big and bold. They're extra large. in size, medium weight with tight line. height, and slightly negative letter. spacing. This gives them that strong. compact look we want for the scroll. animation. Now, let's set the base. layout for our sections. Every section. is positioned relative, spans the full. width of the viewport, and hides any. overflow. This makes sure that any. moving element don't spill outside their. bounds. For the intro and outro. sections, the ones that frame our. scroll, I'm giving them full screen. height and centering the text in the. middle vertically and horizontally. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now for the animated titles. Each title. block gets most of the screen height and. inside it we are centering the content. vertically with flexbox. This makes sure. the headline always sits comfortably in. the middle of the screen. Then inside each one we have the title. container. This is the part we'll. animate side to side later using GAP. It's set up with full width, relative. positioning and centered alignment both. ways. and we are marking it with will. change transform which helps the browser. optimize performance during heavy. animation. For the background colors, I. am alternating them using nth child. selectors. The first and third titles. get the accent color while the middle. one keeps the neutral background. This. creates a soft rhythm as they scroll. between phrases. Now let's define the character class. This one is not in the HTML directly but. it gets applied automatically by split. text when we split each heading into. individual characters. Each character is. absolutely critical to the animation. So. we are setting it as inline block with. relative positioning and again using. will change transform so it animates. smoothly when we move it in from above. or below. Finally we are adding a media. query to make the layout more responsive. below thousand pixels wide. The heading. size drops down and we reset the letter. spacing to zero. This keeps the title. readable on smaller screens without. losing the effect. Now it's time to. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">bring it all to life with JavaScript. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_332.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=332" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">At the very top, I have imported the. libraries we'll need for this build. First is GSAP, which powers all the. animations. Then I'm importing scroll. trigger, which allows us to sync those. animations to the user's scroll. position. After that, I'm bringing in. split text, a GSAP utility that breaks. text into characters, words or lines,. which is exactly what we need for this. animation. And finally, I'm importing. Lennis, a lightweight, high performance. smooth scrolling library that we have. used in a bunch of past projects too. Once the page loads, everything runs. inside a DOM content loaded listener. that just makes sure all the HTML is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">fully loaded before we start. manipulating elements. Inside it, the. first step is to register the Gap. plugins. So, we are telling Gap to. activate both scroll trigger and split. text. This step is required anytime. you're working with GSAP's extended. plug-in features. Next, I am setting up. smooth scrolling using Lennis. This part. is pretty much a copy paste from the. official Lenis documentation, which is. what I usually do in these videos. Basically, we are creating a new Lenis. instance, then telling it to notify. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_393.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">scroll trigger every time the user. scrolls. That way, even though we are. overriding native scroll behavior,. scroll trigger stays in sync with the. actual scroll position. At this point,. we have got the full foundation in. place. GSAP is active. Scroll trigger is. ready to sync animations to scroll. Split text is ready to split the. headings and Lennis is powering smooth. scroll behavior across the page. Next,. we'll move on to grabbing the text. elements, splitting them into. characters, and setting up their initial. animation state. First, I'm grabbing all. the H1 elements inside our title. sections. These are the large text. blocks we added earlier in the HTML. I'm. using Gab's two array utility to turn. that node list into a clean iterable. array that makes it easier to loop. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">through and process each one. individually. Right after that, I'm. creating an empty array called splits. This will hold all of our split text. instances so we can reference them later. during the animation phase. Then I'm. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">looping through each element in the. list. For every heading, I'm applying. split text to break the content into. individual characters. I am specifying. the type as characters. So each letter. becomes its own span. and I'm assigning. a class called character to every one of. them that will apply the styling. properties to each character we defined. earlier in CSS. Once the heading is. split, I'm storing the result into. splits array. This way, we can access. each character set later when we animate. them. Now, here is where the animation. prep begins. For each character inside. the split heading, I'm setting its. starting Y position using Gab's set. function to create a subtle wavelike. motion. I'm alternating the starting. offset. Every evenindexed character. starts a little bit above its default. position and every odd indexed character. starts below. That alternating pattern. is what gives the animation it staggered. floating feel as the letters settle into. view during scroll. So at this point we. have selected the headings, split them. into individual letters and set each one. slightly off position ready to animate. into place when triggered. The very last. step in this block is grabbing all of. the title sections themselves. We'll use. this as our scroll triggers. So as each. one enters the viewport, we'll animate. the corresponding characters in the. container. Next, we'll start building. the scroll trigger logic that drives the. animation based on scroll position. Now. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_518.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">that we have prepared all the. characters, let's create the scroll. powered animation that brings everything. to life. I'm looping through each title. section using for each and for each one,. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">we are building a scroll trigger. instance. First, I'm selecting the title. container inside the current title. This. is the element will animate horizontally. as the user scrolls. Then I'm setting an. initial X offset for the container. If. it's the middle title, meaning index. one, I'll shift it from the left by. 100%. Otherwise, I'll shift it in from. the right. This creates a nice. directional contrast. So, not all. headings animate in the same way. After. that, I'm grabbing the split for this. specific title, which gives us access to. all of its characters and storing the. total number of characters in a variable. called character count. Now, we are. ready to set up the scroll trigger. We'll tell it which element to track. In. this case, the current title block and. define the scroll range. The animation. starts when the top of the title enters. the bottom of the viewport and ends when. the top ridge is slightly above the top. of the screen. This gives us a nice long. scroll zone to work with. I've enabled. scrub so the animation is fully tied to. scroll. As you move, the animation. responds immediately to your position. Everything else happens inside the. onupate call back which runs. continuously as you scroll through this. section. Let's break it down. First, we. calculate how far the title container. should be shifted. We take its initial. offset, either plus 100 or minus 100,. and reduce that value as the scroll. progresses. At the start, it's fully off. to the side. At the end, it's perfectly. centered. This creates that smooth. marquee slide in effect where the whole. container drifts horizontally into view. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_615.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now for the fun part, animating each. individual letter. We loop through all. the characters in the heading and figure. out what order they should animate in. For most titles, we go from left to. right. But for the middle one, index. one, we reverse it right to left. This. gives us even more variation and a bit. of visual rhythm. Next, we calculate the. stagger delay for each character, we. start with a base delay, a little buffer. before anything animates. Then, we. spread out the remaining scroll progress. across all the characters. This way, the. animation doesn't happen all at once. Each letter enters at a slightly. different time as you scroll. To do. this, we use a few simple values. Character start delays they prefer at. the beginning. Character timeline span. is how much scroll is left after that. Stagger factor controls how spaced out. the animation is. Each character gets a. slightly different delay and duration. based on its position in the list. This. part of the math might look a bit dense. in the code, but all it's doing is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">calculating when each letter should. start and finish animating based on how. far into the scroll we are. Now we. calculate the actual progress for each. letter. If we haven't reached its delay. yet, the character stays as is. If we are past it, we compute how far. into its animation we are clamping that. value so it never goes beyond the full. reveal. Then we move each character. vertically starting from its initial Y. offset either above or below and easing. it back to zero as the scroll. progresses. This is what creates that. subtle wave of motion as each letter. settles into place at slightly different. times depending on the scroll and its. position in the word. So by the end of. this scroll trigger block, we have got a. synchronized scroll animation where the. full title container slides in. horizontally and the individual. characters animate vertically in a. smooth staggered sequence. That wraps up. the JavaScript. The text animation is. fully working. Hope you found the video. helpful. See you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=fHm0I23cUzw">https://www.youtube.com/watch?v=fHm0I23cUzw</a></p><p>Learn how to turn static headlines into animated micro-theatre with GSAP — powered by ScrollTrigger and SplitText.</p><p></p><p>Unlock Source Code with PRO — Get 50% OFF CodegridPRO using the code CGPROSAVE50 at checkout, or grab it directly here: <a href="https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50">https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50</a></p><p></p><p>Inspiration: Telescope</p><p>Website: <a href="https://telescope.fyi/">https://telescope.fyi/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:32 HTML</p><p>2:48 CSS</p><p>5:32 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/fHm0I23cUzw/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=fHm0I23cUzw">https://www.youtube.com/watch?v=fHm0I23cUzw</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用 <strong>GSAP</strong>、<strong>ScrollTrigger</strong> 和 <strong>SplitText</strong> 等強大工具，為網站添加引人入勝的滾動驅動文字動畫。</li> <li>掌握將文本拆分為單個字符並創建獨特「跑馬燈」風格動畫的技術，讓巨大文字從兩側滑入並逐個字母錯位顯示。</li> <li>了解如何建構高效能且響應式的網頁結構，包括 HTML 元素佈局、CSS 樣式設計以及 JavaScript 動畫邏輯，以實現流暢的用戶體驗。</li> </ul> <hr /> <h1>摘要</h1> <h2>專案介紹與技術概覽</h2> <p>這段影片展示了如何從頭開始重建一個在 awwwards 網站上被評為「每日最佳網站」的互動效果：一種大膽的「跑馬燈」風格文字動畫。這種動畫的特色是超大文字從頁面兩側滑入，以錯位的方式逐個字母顯示。作者過去曾重建該網站的其他動畫，例如滾動驅動的圖像顯示和聚光燈效果圖庫，而此次的重點則是這個獨特的文字效果。整個專案將利用 <strong>GSAP (GreenSock Animation Platform)</strong> 進行動畫核心控制，搭配 <strong>ScrollTrigger</strong> 實現滾動同步，並使用 <strong>SplitText</strong> 將文字拆分成獨立字符進行精細動畫。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_58.jpg" /></p> <hr /> <h2>HTML 結構設定</h2> <p>專案的 HTML 結構相對簡單而有條理。首先，作者創建了兩個基礎區塊：頂部的 <code>intro</code> 區塊和底部的 <code>outro</code> 區塊，它們各自包含一個 <code>H1</code> 標題作為佔位符，提供頁面垂直結構和滾動動畫的「呼吸空間」。核心動畫內容則包裹在一個名為 <code>animated-titles</code> 的區塊中。在這個主要區塊內部，有三個 <code>div</code> 元素，每個帶有 <code>title</code> 類別，代表動畫中的獨立「幻燈片」或短語。每個 <code>title</code> 區塊內又包含一個 <code>title-container</code> <code>div</code>，這個元素是水平滑動動畫的目標，將動畫動作與實際文本分離。最後，在每個 <code>title-container</code> 內部，有一個 <code>H1</code> 標題，這些正是將被 <strong>SplitText</strong> 拆分成獨立字符的大型文本元素。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_149.jpg" /></p> <hr /> <h2>CSS 樣式設計</h2> <p>在 CSS 部分，作者首先從 Google Fonts 導入了 <strong>Mandro</strong> 字體，這款現代無襯線字體非常適合大型文本處理。接著，定義了幾個根級別的顏色變數，用於確保設計在整個滾動體驗中的一致性。作者應用了全局重置，移除默認邊距和填充，並設定 <code>box-sizing: border-box</code> 以確保元素尺寸的可預測性。<code>body</code> 元素被設定為使用 Mandro 字體，搭配柔和的米白色背景和深色文本。所有 <code>H1</code> 標題都設定為特大、粗體，並具有緊湊的行高和微負的字距，以呈現強烈且緊湊的外觀。每個動畫區塊 (<code>section</code>) 都設為相對定位、全寬並隱藏溢出內容。<code>intro</code> 和 <code>outro</code> 區塊的高度被設定為全螢幕，並將文字水平垂直居中。動畫標題區塊 (<code>title</code>) 也佔據了大部分螢幕高度，並使用 Flexbox 將內容垂直居中。<code>title-container</code> 被設定為全寬，相對定位，並帶有 <code>will-change: transform</code> 屬性，以優化動畫性能。為了視覺上的節奏感，作者使用 <code>:nth-child</code> 選擇器交替設定了 <code>title</code> 區塊的背景顏色。最後，為 <strong>SplitText</strong> 自動應用的 <code>.character</code> 類別設定了 <code>display: inline-block</code> 和 <code>position: relative</code>，同樣加上 <code>will-change: transform</code> 以確保字符動畫的流暢性，並添加媒體查詢來實現響應式設計。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_343.jpg" /></p> <hr /> <h2>JavaScript 初始化與文本處理</h2> <p>JavaScript 部分首先導入了專案所需的四個關鍵庫：<strong>GSAP</strong> (核心動畫庫)、<strong>ScrollTrigger</strong> (滾動同步動畫)、<strong>SplitText</strong> (文本拆分工具) 和 <strong>Lenis</strong> (輕量級高性能平滑滾動庫)。所有 JavaScript 邏輯都在 <code>DOMContentLoaded</code> 事件監聽器中執行，以確保 HTML 完全加載後才操作元素。首先，作者註冊了 GSAP 的 <strong>ScrollTrigger</strong> 和 <strong>SplitText</strong> 插件。接著，使用 <strong>Lenis</strong> 設定了平滑滾動，並確保它與 <strong>ScrollTrigger</strong> 同步，即使在覆蓋原生滾動行為時也能保持動畫位置的準確性。在文本處理階段，作者選取了所有 <code>title</code> 區塊內的 <code>H1</code> 元素，並將它們轉換為可迭代的陣列。隨後，迭代每個 <code>H1</code> 元素，使用 <strong>SplitText</strong> 將其內容拆分為單個字符，並為每個字符應用 <code>character</code> 類別。這些拆分後的字符實例被儲存在一個 <code>splits</code> 陣列中，以便後續引用。在動畫準備階段，作者為每個字符設定了初始的 <code>Y</code> 軸位置，奇偶索引的字符交替地從上方和下方偏移，從而創造出微妙的波浪形錯位運動，為滾動時的字母入位動畫奠定基礎。最後，所有 <code>title</code> 區塊本身也被選取，它們將被用作 <strong>ScrollTrigger</strong> 的觸發器。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_522.jpg" /></p> <hr /> <h2>ScrollTrigger 動畫邏輯</h2> <p>在所有字符都準備就緒之後，作者開始構建滾動驅動的動畫，使一切栩栩如生。他遍歷每個 <code>title</code> 區塊，並為每個區塊創建一個 <strong>ScrollTrigger</strong> 實例。在每個實例中，他選取當前 <code>title</code> 區塊內的 <code>title-container</code> 元素，這將是隨著用戶滾動而進行水平動畫的目標元素。隨後，作者設定了 <code>title-container</code> 的初始 <code>X</code> 軸偏移量...</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Before we jump into today's build, just. a quick heads up. There is currently a. 50% discount running on CodeCrip Pro. You can use the coupon code in the. description or the direct link to get. half of your first billing period. That. brings the early plan down to just $15. So, if you have been thinking about. joining Pro, now is a pretty good time. All right, for today's video, we are. revisiting this incredible website that. was featured as site of the day on a. watch back in July. We have already. rebuilt a couple of animations from this. site like this scroll powered image. rebels using masks and the spotlight. style image gallery we have covered a. few weeks ago. But there was one more. interaction on the site that really. stood out. This bold marquee style text. animation where oversized words slide in. from the sides revealing each letter in. a staggered flow. It's clean and minimal. and it's one of the few effects we. haven't explored yet on the channel. So,. I spent some time recreating it from. scratch and managed to recreate a. similar text animation concept using. GSA. In today's video, I'll walk you. through exactly how to set it up, how to. structure the elements, split the text. into characters with split text, and. then bring it to life with scroll. powered animations driven by scroll. trigger. If you find these kinds of. ribbles helpful, make sure you leave a. like on the video and subscribe to the. channel if you haven't already. And if. you'd like to access the source code for. this project, plus hundreds of other. similar micro projects and a brand new. website template every month, you can. check out the pro membership via the. link in the description. All right,. let's get into the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_92.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=92" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Let's start with the HTML first. I'm. creating two simple sections. One at the. top with the class intro and another at. the bottom with the class outro. These. give the page a bit of vertical. structure and they also help us book end. the scroll animation with some breathing. room. Inside each one I'm just dropping. a heading in H1 tag with some. placeholder text just so the page. doesn't feel empty when we are scrolling. through. Next, I'm adding a section with. the class animated titles. This is the. main wrapper for all of our animated. text blocks. Inside this section, I am. adding three divs each with the class. title. These represent the individual. slides or phrases of our scroll. animation. Inside each one there is. another div called title container. This. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">is the element we'll animate. horizontally sliding it from the side as. we scroll. It also helps us isolate the. motion from the actual text so we can. have a clean transform target. And. finally inside each container I've added. an H1 with some placeholder phrases. These are the large text elements that. will break into individual characters. using split text and each letter will. animate into place as we scroll through. the section. That's it for the HTML. We. have got our scroll structure, a. container for animated titles, and three. full screen blocks, each holding a bold. headline. Let's move on to the CSS and. start styling everything. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_168.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=168" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I have already imported the. Mandro font from Google Fonts. It's a. modern sensor font that works really. well for large text treatments like this. one. Right after that, I have defined a. few root level color variables. We have. got a light background tone, a dark. foreground for the text, and a soft neon. accent. These will keep the design. consistent across the entire scroll. experience. Now, let's start with some. global resets. We'll remove default. margins and padding from all elements. and use border box sizing so widths and. heights are always predictable. This. gives us a nice clean slate to work. from. Next, I'm setting the base styles. for the body. We are using Mandrop as. the main font across the entire page. with a soft off-white background and. dark text color pulled from our. variables. For the headings, I making. them big and bold. They're extra large. in size, medium weight with tight line. height, and slightly negative letter. spacing. This gives them that strong. compact look we want for the scroll. animation. Now, let's set the base. layout for our sections. Every section. is positioned relative, spans the full. width of the viewport, and hides any. overflow. This makes sure that any. moving element don't spill outside their. bounds. For the intro and outro. sections, the ones that frame our. scroll, I'm giving them full screen. height and centering the text in the. middle vertically and horizontally. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now for the animated titles. Each title. block gets most of the screen height and. inside it we are centering the content. vertically with flexbox. This makes sure. the headline always sits comfortably in. the middle of the screen. Then inside each one we have the title. container. This is the part we'll. animate side to side later using GAP. It's set up with full width, relative. positioning and centered alignment both. ways. and we are marking it with will. change transform which helps the browser. optimize performance during heavy. animation. For the background colors, I. am alternating them using nth child. selectors. The first and third titles. get the accent color while the middle. one keeps the neutral background. This. creates a soft rhythm as they scroll. between phrases. Now let's define the character class. This one is not in the HTML directly but. it gets applied automatically by split. text when we split each heading into. individual characters. Each character is. absolutely critical to the animation. So. we are setting it as inline block with. relative positioning and again using. will change transform so it animates. smoothly when we move it in from above. or below. Finally we are adding a media. query to make the layout more responsive. below thousand pixels wide. The heading. size drops down and we reset the letter. spacing to zero. This keeps the title. readable on smaller screens without. losing the effect. Now it's time to. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">bring it all to life with JavaScript. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_332.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/fHm0I23cUzw&t=332" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">At the very top, I have imported the. libraries we'll need for this build. First is GSAP, which powers all the. animations. Then I'm importing scroll. trigger, which allows us to sync those. animations to the user's scroll. position. After that, I'm bringing in. split text, a GSAP utility that breaks. text into characters, words or lines,. which is exactly what we need for this. animation. And finally, I'm importing. Lennis, a lightweight, high performance. smooth scrolling library that we have. used in a bunch of past projects too. Once the page loads, everything runs. inside a DOM content loaded listener. that just makes sure all the HTML is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">fully loaded before we start. manipulating elements. Inside it, the. first step is to register the Gap. plugins. So, we are telling Gap to. activate both scroll trigger and split. text. This step is required anytime. you're working with GSAP's extended. plug-in features. Next, I am setting up. smooth scrolling using Lennis. This part. is pretty much a copy paste from the. official Lenis documentation, which is. what I usually do in these videos. Basically, we are creating a new Lenis. instance, then telling it to notify. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_393.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">scroll trigger every time the user. scrolls. That way, even though we are. overriding native scroll behavior,. scroll trigger stays in sync with the. actual scroll position. At this point,. we have got the full foundation in. place. GSAP is active. Scroll trigger is. ready to sync animations to scroll. Split text is ready to split the. headings and Lennis is powering smooth. scroll behavior across the page. Next,. we'll move on to grabbing the text. elements, splitting them into. characters, and setting up their initial. animation state. First, I'm grabbing all. the H1 elements inside our title. sections. These are the large text. blocks we added earlier in the HTML. I'm. using Gab's two array utility to turn. that node list into a clean iterable. array that makes it easier to loop. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">through and process each one. individually. Right after that, I'm. creating an empty array called splits. This will hold all of our split text. instances so we can reference them later. during the animation phase. Then I'm. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">looping through each element in the. list. For every heading, I'm applying. split text to break the content into. individual characters. I am specifying. the type as characters. So each letter. becomes its own span. and I'm assigning. a class called character to every one of. them that will apply the styling. properties to each character we defined. earlier in CSS. Once the heading is. split, I'm storing the result into. splits array. This way, we can access. each character set later when we animate. them. Now, here is where the animation. prep begins. For each character inside. the split heading, I'm setting its. starting Y position using Gab's set. function to create a subtle wavelike. motion. I'm alternating the starting. offset. Every evenindexed character. starts a little bit above its default. position and every odd indexed character. starts below. That alternating pattern. is what gives the animation it staggered. floating feel as the letters settle into. view during scroll. So at this point we. have selected the headings, split them. into individual letters and set each one. slightly off position ready to animate. into place when triggered. The very last. step in this block is grabbing all of. the title sections themselves. We'll use. this as our scroll triggers. So as each. one enters the viewport, we'll animate. the corresponding characters in the. container. Next, we'll start building. the scroll trigger logic that drives the. animation based on scroll position. Now. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_518.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">that we have prepared all the. characters, let's create the scroll. powered animation that brings everything. to life. I'm looping through each title. section using for each and for each one,. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">we are building a scroll trigger. instance. First, I'm selecting the title. container inside the current title. This. is the element will animate horizontally. as the user scrolls. Then I'm setting an. initial X offset for the container. If. it's the middle title, meaning index. one, I'll shift it from the left by. 100%. Otherwise, I'll shift it in from. the right. This creates a nice. directional contrast. So, not all. headings animate in the same way. After. that, I'm grabbing the split for this. specific title, which gives us access to. all of its characters and storing the. total number of characters in a variable. called character count. Now, we are. ready to set up the scroll trigger. We'll tell it which element to track. In. this case, the current title block and. define the scroll range. The animation. starts when the top of the title enters. the bottom of the viewport and ends when. the top ridge is slightly above the top. of the screen. This gives us a nice long. scroll zone to work with. I've enabled. scrub so the animation is fully tied to. scroll. As you move, the animation. responds immediately to your position. Everything else happens inside the. onupate call back which runs. continuously as you scroll through this. section. Let's break it down. First, we. calculate how far the title container. should be shifted. We take its initial. offset, either plus 100 or minus 100,. and reduce that value as the scroll. progresses. At the start, it's fully off. to the side. At the end, it's perfectly. centered. This creates that smooth. marquee slide in effect where the whole. container drifts horizontally into view. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/fHm0I23cUzw_615.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now for the fun part, animating each. individual letter. We loop through all. the characters in the heading and figure. out what order they should animate in. For most titles, we go from left to. right. But for the middle one, index. one, we reverse it right to left. This. gives us even more variation and a bit. of visual rhythm. Next, we calculate the. stagger delay for each character, we. start with a base delay, a little buffer. before anything animates. Then, we. spread out the remaining scroll progress. across all the characters. This way, the. animation doesn't happen all at once. Each letter enters at a slightly. different time as you scroll. To do. this, we use a few simple values. Character start delays they prefer at. the beginning. Character timeline span. is how much scroll is left after that. Stagger factor controls how spaced out. the animation is. Each character gets a. slightly different delay and duration. based on its position in the list. This. part of the math might look a bit dense. in the code, but all it's doing is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">calculating when each letter should. start and finish animating based on how. far into the scroll we are. Now we. calculate the actual progress for each. letter. If we haven't reached its delay. yet, the character stays as is. If we are past it, we compute how far. into its animation we are clamping that. value so it never goes beyond the full. reveal. Then we move each character. vertically starting from its initial Y. offset either above or below and easing. it back to zero as the scroll. progresses. This is what creates that. subtle wave of motion as each letter. settles into place at slightly different. times depending on the scroll and its. position in the word. So by the end of. this scroll trigger block, we have got a. synchronized scroll animation where the. full title container slides in. horizontally and the individual. characters animate vertically in a. smooth staggered sequence. That wraps up. the JavaScript. The text animation is. fully working. Hope you found the video. helpful. See you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=fHm0I23cUzw">https://www.youtube.com/watch?v=fHm0I23cUzw</a></p><p>Learn how to turn static headlines into animated micro-theatre with GSAP — powered by ScrollTrigger and SplitText.</p><p></p><p>Unlock Source Code with PRO — Get 50% OFF CodegridPRO using the code CGPROSAVE50 at checkout, or grab it directly here: <a href="https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50">https://codegrid.gumroad.com/l/codegridpro/CGPROSAVE50</a></p><p></p><p>Inspiration: Telescope</p><p>Website: <a href="https://telescope.fyi/">https://telescope.fyi/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:32 HTML</p><p>2:48 CSS</p><p>5:32 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/fHm0I23cUzw/hqdefault.jpg"/>
      <pubDate>2025-10-05T15:30:20.000Z</pubDate>
    </item><item>
      <title><![CDATA[This Aesthetic Infinite Product Slider Feels Like a Game Controller (And Unlocks a Modal)]]></title>
      <link>https://www.youtube.com/watch?v=X7cIlzO3Htw</link>
      <itunes:title><![CDATA[This Aesthetic Infinite Product Slider Feels Like a Game Controller (And Unlocks a Modal)]]></itunes:title>
      <itunes:author><![CDATA[Codegrid]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/X7cIlzO3Htw/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=X7cIlzO3Htw">https://www.youtube.com/watch?v=X7cIlzO3Htw</a></p><h1>值得閱讀的理由</h1> <ul> <li>深入了解一個榮獲Awwwards「每日最佳網站」專案的<strong>設計理念</strong>與<strong>技術重現過程</strong>。</li> <li>學習如何從零開始，利用 <strong>Vanilla JavaScript</strong> 和 <strong>GSAP</strong> 打造<strong>流暢無限產品滑塊</strong>與<strong>互動式預覽模型</strong>。</li> <li>掌握從 <strong>HTML 結構</strong>到 <strong>CSS 樣式</strong>的詳細建構步驟，特別是針對<strong>複雜動畫準備</strong>的關鍵技巧。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片開場與專案介紹</h2> <p>這段影片探討了一個於9月27日在Awwwards上被評為「每日最佳網站」的專案。該專案以其<strong>極簡的無限產品滑塊</strong>和<strong>圓形搖桿式控制器</strong>設計，立即吸引了作者的目光。這個設計不僅美觀，更展現了作者個人偏愛的<strong>簡潔且互動性強</strong>的風格。用戶可以透過方向控制切換不同產品，而當點擊中心控制器時，兩側產品會滑出並淡化，一個模型會隨之升起，展示產品詳情、縮圖預覽以及強化視覺識別的全出血背景。作者表示他許久未曾建立類似專案，因此決定嘗試重現。經過約8小時的動畫探索與從頭建構，作者最終成功打造出一個完全由<strong>Vanilla JavaScript</strong>和 <strong>GSAP</strong> 驅動的版本。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_0.jpg" /></p></p> <p>這個重現版擁有相同的<strong>無限滑塊行為</strong>，各項目之間過渡平滑，並具備一個<strong>玻璃質感的產品預覽模型</strong>，可透過單擊開啟和關閉。當模型啟用時，中心的控制器會變形為一個關閉按鈕，並在退出動畫時重置一切。在接下來的影片中，作者將帶領觀眾逐步了解程式碼，涵蓋從無限滑塊邏輯到預覽模型以及其間所有動畫的完整建構過程。</p> <hr /> <h2>HTML 結構詳解</h2> <p>影片首先從 <strong>HTML 結構</strong>開始。作者在最頂層加入一個名為 <code>container</code> 的包裝 <code>div</code>，它將容納整個頁面的所有元素，包括導航欄、圖庫、控制器、橫幅和模型。導航欄包含兩個元素：左側用於<strong>標誌</strong>，右側用於<strong>當前產品名稱</strong>，後者將使用 JavaScript 動態更新。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_117.jpg" /></p></p> <p>接著是主區塊 <code>gallery</code>，內部包含一個空的無序列表 <code>products</code>，用於透過 JavaScript 循環物件陣列，<strong>動態注入產品項目</strong>。圖庫中還包含 <strong>控制器</strong>，一個位於螢幕底部中央的圓形 UI 元素。控制器分為兩個主要部分：<strong>內部圓圈</strong>和<strong>外部圓環</strong>。內部圓圈包含一個由兩個空 <code>span</code> 標籤組成的<strong>關閉圖標</strong>，這些標籤在模型開啟時將動畫形成 \'X\' 形。外部圓環則包含「Menu」標籤和兩個<strong>導航按鈕</strong>（上一頁和下一頁），用於循環瀏覽產品滑塊。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_160.jpg" /></p></p> <p>在圖庫之後是 <strong><code>product-banner</code> 區塊</strong>，它包含一個全螢幕圖片元素，將作為產品預覽開啟時的<strong>背景層</strong>。最後，作者加入了<strong>產品預覽模型 (`product-preview`)</strong>。這個加載面板分為三部分：<strong>資訊區塊</strong>（產品名稱和標籤，將動態更新）、<strong>圖像區塊</strong>（產品縮圖）和<strong>按鈕區塊</strong>（一個導向產品頁面的「查看詳情」CTA 按鈕）。至此，所有結構元素已準備就緒，接下來將進行 CSS 樣式設定。</p> <hr /> <h2>CSS 樣式與動畫準備</h2> <p>作者開始為專案進行 CSS 樣式設定。首先，他導入了 <strong>DM Sans 和 DM Mono 兩種 Google 字體</strong>，以保持設計的簡潔和極簡風格。隨後，定義了一組<strong>根級顏色標記</strong>，從純白到純黑的簡單灰階，確保整個設計的色調一致性。在全域重置中，移除了預設的邊距和填充，並使用 <code>border-box</code> 以使寬高更具預測性。對於 <code>body</code>，設定了 DM Sans 為預設字體、白色背景，並<strong>隱藏溢出 (`overflow: hidden`)</strong>，以確保元素進出框架時邊緣的整潔。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_259.jpg" /></p></p> <p>整體 <strong><code>container</code> 容器</strong>採用相對定位，填滿整個視口高度並隱藏溢出，為所有絕對定位的層和動畫提供穩定的舞台。<strong>導航欄</strong>絕對定位於頂部，填滿全寬，使用 Flexbox 將標誌推向左側，產品名稱推向右側，並具有較高的堆疊順序。導航欄中的文本大寫，並切換到 DM Mono 字體。<strong>圖庫區塊</strong>同樣採用絕對定位，填滿全螢幕高度，並隱藏溢出以保持滑塊整潔。圖庫內的<strong>產品列表</strong>居中顯示，目前是一個固定 300x300 像素的方形，作為<strong>活動幻燈片的舞台</strong>。每個列表項目都絕對定位，內容使用 Flexbox 完美居中，並標記了 <strong>`will-change: transform`</strong>，提示瀏覽器這些項目將頻繁動畫。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_330.jpg" /></p></p> <p>接下來是底部的<strong>控制器</strong>，它水平居中，略高於底部邊緣，具有固定尺寸。禁用用戶選擇並將光標設置為指針，使其感覺可點擊，並具有高 Z-index 以始終位於其他層之上。<strong>內部控制器</strong>是一個較小的深色圓圈，位於內部中央，使用<strong>圓形剪切路徑 (`clip-path`)</strong>，並標記 <strong>`will-change: clip-path`</strong>，以便後續平滑動畫。<strong>關閉圖標</strong>由兩個居中定位的 <code>span</code> 標籤組成，它們從零寬度開始，透過動畫擴展寬度並旋轉形成 \'X\' 形。<strong>外部控制器</strong>是一個較深的圓環，同樣使用圓形剪切路徑，並位於內部元素下方，形成清晰的兩層控制。外部控制器頂部有一個簡單的「Menu」標籤，並標記了 <strong>`will-change: opacity`</strong> 以便淡出。<strong>導航按鈕</strong>垂直居中於外部圓環的左右兩側，並標記了 <strong>`will-change: opacity`</strong> 以實現平滑的禁用狀態過渡。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_410.jpg" /></p></p> <p><strong>產品橫幅</strong>是模型後面的全螢幕圖片，它位於主要內容下方，初始完全透明，並將通過動畫改變其不透明度以在預覽狀態時顯示。圖片本身設定為覆蓋螢幕並略微放大。最後是<strong>產品預覽模型</strong>，它絕對定位，通過左右組合實現水平居中，並垂直錨定於中心上方一點，然後向下平移以從螢幕外開始。它設定了寬高、內部填充和柔和的圓角。背景是一個<strong>半透明的白色層</strong>，並帶有強烈的 <strong>`backdrop-filter: blur`</strong>，賦予其<strong>玻璃磨砂質感</strong>。模型內容垂直堆疊，並具有高 Z-index 以浮動在滑塊上方。頂部的資訊區塊居中對齊，產品名稱使用稍大的段落樣式，而標籤則是一個小藥丸形狀，具有深色背景和白色文本。圖像區塊佔滿全寬，並使用完美的方形長寬比，帶有小圓角和白色背景，並隱藏溢出，確保縮圖清晰剪裁。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Just a couple days ago on September. 27th, this project was featured as site. of the day on awards. And the moment you. land on it, you are greeted with the. stunningly minimal infinite product. slider built around the circular. joystick- like controller. It right away. caught my eye, not just for the. aesthetic, but because it resonated with. the kind of design I personally. gravitated toward, clean and. interactive. You can cycle through. different products using the directional. controls. But the real magic happens. when you click on the center pad. The. side products slide outward and fade. away. And a model rises into focus. showing product details, a thumbnail. preview, and a full bleed background. that reinforces the visual identity of. the item. It's simple, but so well. executed, and I hadn't built anything. like this in a while, so I figured it. was time to give it a shot. After about. 8 hours of exploring the animation and. rebuilding it from scratch, I ended up. with this version. Fully powered by. vanilla JavaScript and GSA. It has that. same infinite slider behavior with. smooth transitions between items and a. glassy product preview that opens and. closes with a single click. You can see. the center controller morphs into a. close button when the model is active. and resets everything with a clean exit. animation. In today's video, I'll walk. you through the code how the entire. experience is built from the infinite. slider logic to the preview model and. all the animations in between. If you. find these kinds of ribbles helpful,. make sure you leave a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_96.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=96" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Let's start with the HTML. At the very. top, I'm adding a wpper div with the. class container. This will hold. everything. The navbar, the gallery, the. controller, the banner, and the model. all stacked within the single container. Inside that, the first element is the. navigation bar. We have got two elements. here. One on the left for the logo and. one on the right for the current product. name. Right now I have hardcoded it but. we'll update this dynamically later. using JavaScript whenever the active. product changes. Next comes the main. section I do with the class gallery. Inside the gallery I am adding an empty. unordered list with the class products. This is where we'll inject the product. items dynamically using JavaScript. looping through an array of objects that. contains the product name, tag, image,. and URL for each item. Still inside the. gallery, we add the controller. This is. the circular UI element that sits near. the bottom center of the screen. The. controller is split into two main parts,. an inner circle and the outer ring. Let's start with the inner part. Here we. have added a close icon which is made up. of two empty span tags. These will. animate into an X shape when the model. is open. So the center of the controller. doubles as a toggle. Then inside the. outer section, we have got a few. controls. At the top, there is a label. that says menu. And below that, we have. added two navigation buttons, one for. previous and one for next, each with a. unique class and an ion icon inside to. represent the direction. These will be. the clickable controls for cycling. through the product slider. Right after. the gallery, we have got a product. banner section. This holds a full screen. image element and we'll use it as the. background layer that fades in whenever. a product preview is open. And finally,. we add the model itself called product. preview. This loading panel is split. into three parts. The info section, the. image and the button. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_204.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">In the info block, we have got two. elements, the product name and the tag. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Both of these will be updated. dynamically based on whichever product. is selected. Below that, there is an. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">image wrapper with the product. thumbnail. And finally, we have got a. call to action button that links out to. the product page. The button is wrapped. inside a div with the class button and. includes the standard anchor tag that. says view details. And that's it for the. HTML. We have got all the structural. elements in place. The nav bar, the. dynamic slider container, the controller. with the interactive elements, the. preview model, and the background. banner. Next, we'll move on to the CSS. and start styling everything. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_241.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=241" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">I'm starting by importing two Google. fonts, DM Sense and DM Mono. Together,. they keep the design clean and minimal. Next, I'm defining a set of root level. color tokens. There is a simple. grayscale scale from pure white to solid. black labeled from B 100 through base. 500. We'll use this consistently across. the background, text, overlays, and. interactive elements so the palette. stays cohesive. After that, I am doing a. quick global reset. Default margin and. paddings are removed and everything uses. border box sizing so width and heights. are predictable. For the body, I'm. setting DMs as the default font, a white. background, and I'm hiding overflow. That last part helps us keep the edges. clean when elements animate in and out. of frame. Paragraphs get a small dense. style, a slightly reduced font size,. medium weight, and tight line height. This keeps labels compact and crisp. Now. for the overall container, its position. relative fills the full view port height. and hides overflow. This creates a. stable stage for all our absolutely. positioned layers and animations. The. navigation bar sits absolutely at the. top and spends the full width. It uses. flexbox to push the logo to the left and. the product name to the right with some. padding around the edges and a higher. stacking order so it always stays on. top. Inside the nav, the text is. uppercased and switched to DM mono for. that UI label feel and the product name. is softened with a mid-g gray so it. reads as secondary. The gallery section. is also absolutely positioned and fills. the full screen height using the save. view port unit so mobile browser Chrome. doesn't clip anything. Overflow is. hidden here as well to keep the slider. tidy. Inside the gallery, the products. list is centered on the screen. For now,. it's a fixed 300 by300 square that we'll. use as the stage for the active slide. Each list item is also absolutely. positioned at that size with content. perfectly centered using flexbox. I have. marked all the list items with will. change transform. That's a hint to the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_346.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">browser that these will animate. frequently. The images inside each item. are sized slightly smaller 250x 250 so. they sit with a comfortable margin. inside the square. Now for the. controller, the circular pad at the. bottom. It's centered horizontally,. lifted slightly above the bottom edge. and given fixed dimensions. User. selection is disabled and the cursor is. set to pointer so it feels clickable. It. sits on a high Zindex so it's always. accessible above other layers. The inner. controller is a smaller dark circle. centered inside. It uses a circular clip. path and will change on clip path so we. can animate that shape smoothly later. This inner area is where the close icon. lives. That icon is just two spans. positioned at center. They start at zero. width. They are two pixels thick and. they share same white color as the inner. circle's foreground. One span is rotated. 45° and the other is negative 45. So. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">when we expand their width and. animation, they form a clean X shape. Transform origins are centered for a. precise rotation. Behind that, the outer. controller fits the full circle. It's a. darker ring rounded and also uses a. circular clip path that will animate. during the toggle. It sits just beneath. the inner element on this tracking order. creating a clear two-layer control. On. top of the outer controller, there is a. simple label position near the top that. says menu. It's centered horizontally,. uppercase, uses DM mono font, and is. styled in white. Opacity changes on this. label are also optimized with change. since we'll fade it out when the model. opens. The navigation buttons sit. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_430.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">vertically centered on the left and. right edges of the outer ring. They. share the same white color, slightly. larger icon size, and a pointer cursor. These also mark opacity as a will change. so that disabled state can fade. smoothly. The previous button is nudged. in from the left. The next button is. nudged in from the right. When either is. disabled, opacity drops to a quarter and. pointer events are turned off. So they. are inactive. Next comes the product. banner. The full screen image behind the. model. It sits underneath the main. content on the stacking order and starts. completely transparent. We'll animate. its opacity to bring it in during the. preview state. The image inside it is. set to cover the screen and is scaled up. slightly so it feels cinematic and. avoids any edge gaps during movement. Now for the model the product preview. it's absolutely centered horizontally. via left and right combo and vertically. anchored a bit above center then. translated down so it starts off screen. Width is set to 30% of the viewport and. height is 75% with internal padding and. a soft radius. The background is. transculent white layer and a heavy. backdrop blur so it gives it that glassy. frosted look. Content inside stacks in a. vertical column with consistent gaps. The model sits above most layers so it. can float over the slider. The info at. the top aligns item center with a small. horizontal gap. The product name gets a. slightly larger paragraph style while. the tag becomes a small pill padded. rounded dark background white text. The. tag text is uppercased switches to DM. mono and is reduced in size. So it reads. like a compact category badge. The image. section takes up the full width and uses. a perfect square aspect ratio. It gets a. small radius, a white backdrop and hides. overflow so the thumbnail clips cleanly. The image inside fills the box and uses. object fit cover to maintain its. proportions while filling the square. Finally, the call to action area style. three button container. It's dark. rectangle with rounded corners, centered. content, and the anchor spans the full. height for an easy hit target. The link. uses white text and removes the. underline for a cleaner look. For. responsiveness, there is a break point. at 1,000 pixels. Below that, the preview. model stretches to use the full. available width minus a small margin on. each side. This keeps the layout. balanced and readable on smaller screens. while preserving the same structure and. interactions. And that's the full CSS. pass. We are ready for the JavaScript to. drive the interactions. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_567.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=567" target="_blank"><strong># Products Data</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now before we dive into JavaScript, let. me quickly explain how we are going to. handle the product content. I have. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">created a separate file called. products.js. Inside this file, we have. set up an array of objects and each. object represents a single product in. our catalog. Every product has a few key. properties. A name, which is the title. that will show up in the narrow bar in. the model. An image, which points to the. products image file, a price, which we. can use if we want to display the cost. information. A tag, which works like a. category label, and finally, a URL which. links directly to the product detail. page. By structuring the data in this. way, we can dynamically inject products. into the slider instead of hard-coding. them into the HTML. This means the list. inside our gallery can stay empty at. first and JavaScript will loop through. the array to create and update the items. on the fly. And with that data layer in. place, we are ready to move into the. JavaScript where we'll connect the. slider mechanics, the controller, and. the preview model. All powered by Gap. animations. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_623.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=623" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, at the very top, I'm. importing GSA. This is the animation. library we'll be using to handle all of. the motion throughout the slider. Right. after that, I'm also importing the. products array from the file we created. earlier. That's the file that holds all. of our product data, the name, image,. tag, and link. We'll be using it to. dynamically populate the slider and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">keeps everything synced between the. navbar, the model, and the background. banner. Next, I'm grabbing all of the. key elements from the DOM using query. selector, the products container,. product name, the wrapper itself, the. product name, the thumbnail image, the. category tag, and the URL button. I'm. also grabbing the product banner and its. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">image. This is the full screen. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">background that fades in behind the. model. And finally, I'm selecting the. controller elements, the inner and outer. circles, the two spans that make up the. close icon, and the previous and next. buttons on either side. By storing all. of these as variables up front, we can. reuse them later when we set states,. update content, or trigger animations. After that, I'm setting up a few state. variables. Current product index keeps. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">track of which product is currently. active in the slider. Slide item starts. as an empty array. We'll use it to store. references to every slide element we. generate. Then we have got two booleans. is preview animating and is preview. open. These help us block interactions. while an animation is running and also. track whether the model is open or. closed. Now we are defining some. constants for the slider mechanics. Buffer size is set to five. This is how. many extra slides we'll keep on each. side of the active product. So the. slider fills infinite as we scroll left. and right. Spacing is set to 375. That's. the relative distance we'll use to space. out the slides. And finally, slider. width is calculated by multiplying that. spacing by 1,000. This gives us a. consistent unit in pixels that we'll. apply to the exposition of each slide. during layout and animation. Next, we. are defining the add slide item. function. This handles creating a new. slide and inserting it into the DOM. First, we calculate the correct product. index. We take the current product. index, add the relative offset, and then. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_738.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">wrap it around the length of the. products array using modulo. This way,. even if we go beyond the start or end of. the list, it loops back around, giving. us the infinite behavior. Then we grab. the product at that index and create a. new list element. Inside it, we inject. an image tag with the products image and. all text. We also assign a datab. relative index attribute. So, we always. know how far this item is offset from. the current center. Before adding it to. the DOM, we use GAP's set method to. define its initial state. Its exposition. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">is based on the relative index. multiplied by our slide width. If it's. the active item meaning relative index. equals zero, we scale it up to 1.25 and. set its index r so it pops forward. Otherwise, it's scaled down to 75 and. placed behind. Finally, we append the. element to the products container and. push a reference into the slide items. array along with its relative index. That way, we can keep track of it for. updates and removal later. Speaking of. removal, right after that we have the. remove slide item function. This does. the opposite of what we just built. It. looks through the slide items array to. find any element with a matching. relative index if it exists. We remove. that element from the DOM and also. splice it out of the array. This keeps. our memory clean and ensures we are only. ever rendering the slides we actually. need. And that's the setup. We have just. imported GAP and our products, selected. all the core DOM elements, defined our. state, and return the first two utility. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_820.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">functions for adding and removing. slides. Next, we'll move on to updating. positions and syncing content so the. slider always knows which product is. active. Now that we have got the ability. to add and remove slides, let's set up. the functions that keep the slider in. sync as we move through the products. First is update slider position. This. loops through every item we currently. have in our slide items array. For each. one, we check if it's the active slide,. meaning its relative index is zero. If. it's active, we scale it up to 1.25,. give it a higher index, and place it. front and center. If it's not active, we. shrink it down to 0.75 and push it back. visually. All of these adjustments,. including its exposition, are animated. smoothly with GSAP using a 3/4 second. duration and a soft power three easing. This is what gives the slider that. polished motion as items glide into. their new positions. Next, we have got. update product name. This one takes the. current product index, wraps it safely. around the length of the array and then. updates the product name inside the nav. bar. So, as soon as we navigate left or. right, the nav text always reflects. whichever item is active in the center. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_882.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then we move on to the update preview. content function. This is very similar,. but instead of just updating the nav, it. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">updates everything inside the preview. model and the background banner. We grab. the current product from the array and. then set the model's name. Swap in the. current thumbnail image and all text. Update the tag so the category label. matches. Change the link on the button. And finally, update the banner image. that fades in behind the model. This. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">ensures that whether you are just. sliding through or opening the preview,. every part of the interface is tried to. the same product. Now, let's talk about. navigation. Starting with move next. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">This function is triggered whenever we. click the next button. The first thing. it does is check two flags. If the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">preview is animating or if it's. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">currently open, we don't allow. navigation. This keeps things stable so. we don't break the flow with animation. If we are good to move, we increment the. product index to the next item. Then we. remove the far left buffer slide since. it's now out of view. For all the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">remaining slides, we shift their. relative index down by one, effectively. sliding them left. After that, we add a. new buffer slide to the far right to. replace what we lost. Finally, we update. the sliders position, the product name. in the nav and the preview content so. everything stays consistent. Move. previous works the exact same way, but. in reverse. We decrement the current. index, remove the far right buffer,. shift every slides relative index up by. one, and then add a new buffer item to. the far left. And again, we update the. positions, the nav, and the preview. content. This back and forth logic. combined with the buffer system is what. gives the slider its infinite feel. Next. up, we have got update button states. This one is simple. It checks if the. previous either animating or open. If it. is, both of the previous and next. buttons are disabled by lowering the. opacity and removing pointer events. We. are animating clip path anyways to hide. the entire outer wrapper. But in case if. you want to keep the outer layer as is,. this function might be useful. If not,. this one is simple. It checks if the. previous either animating or open. If it. is, both the previous and next buttons. are disabled by lowering their opacity. and removing pointer events. If not,. they are reenabled. This way you avoid. any accidental clicks while the model is. active. And finally, there is active get. slide function. This just looks through. the array of slide items and returns. whichever one has a relative index of. zero. In either words, it's a quick way. for us to always grab the current center. slide whenever we need it for the. animations. So, at this point, we have. got a fully functional loop for updating. positions, syncing product content, and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_1020.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">handling the navigation with proper. button states. Next, we'll move into the. animations that happen when we toggle. the preview model, fading out the side. items, transforming the controller, and. sliding the model in and out. We'll. start with animate side items. This. function is all about deeming or. revealing the slides that sit around the. active one. First, we grab the currently. active slide using the helper we wrote. earlier. Then, we loop through all the. slide items. For any slide that's just. one or two steps away from the center,. we animate its position and opacity. If. we are hiding them, meaning the model is. opening, they slide further out, fade to. zero, and make room for the preview. If. we are showing them again, they slide. back into their normal positions and. fade back in. We also treat the active. slide differently. If we are hiding, we. shrink it down slightly and fade it. away. If we are showing, we scale it up. larger and make it fully visible again. Altogether, this creates that clean. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">transition where the surrounding. products disappear and the focus shifts. fully to the model. Now, let's talk. about the controller itself. that's. handled in animate controller. transition. Here we are animating three. different parts. The label and nav. buttons, the outer ring, the inner pad. with the close icon. When the preview. opens, the label and the nav arrows fade. out quickly since we don't need. navigation while the model is active. The outer ring shrinks down using a clip. path animation while the inner circle. expands slightly creating that morphing. effect between the joystick and the. close button. Finally, the close icon. spans animate in their width grows to 20. pixels one after the other with a slight. stagger. So they form the X shape that. closes the model. When we reverse the. interaction, all of these animations. play back in reverse. The X collapses,. the pad shrinks, the ring expands, and. the arrows fade back in. This whole. sequence makes the controller feel like. a living toggle rather than just a. static button. With those two helpers in. place, we can now move on to the main. toggle logic itself, the toggle preview. function. The first thing we do is check. if an animation is already running. If. it is, we skip it to avoid conflicts. Otherwise, we set a flag that tells the. system an animation is in progress and. disable the navigation buttons. If the. preview is about to open, we also update. the content inside the model and banner. so the visuals match the current. product. Then we animate the model Y. position. If we are opening, it slides. upward into view. If we are closing, it. slides down and out of frame. At the. same time, the product banner fades in. or out behind it with a slight delay so. it feels layered. And after that, we. call our two helpers. Animate side items. to fade the surrounding slides in or out. and animate controller transition to. morph the joystick into the close. button. Finally, we use a short timeout. to reset the flags, marking the. animations as complete and flipping the. open state. This ensures everything is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_1174.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">synced and ready for the next. interaction. And now to bring it all. together, we have initialize slider. function. This function sets up the. slider when the page first loads. We. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">loop through a range from negative. buffer size to positive buffer size. adding extra slides on both sides of the. active product. This creates the. illusion. Then we call all the update. functions once so the slider positions,. product name, model content and button. states are perfectly synced with the. first product. The very last step is. attaching event listeners. We listen for. clicks on the previous and next buttons. to trigger navigation and we listen for. clicks on the controller inner pad to. toggle the model open and closed. Finally, we call initialize slider. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">function to render everything into. place. And that's the full JavaScript. With these functions working together,. we have built a complete infinite. product slider powered by GSAP. animations with a controller that. doubles as both a navigator and a. preview toggle and a model that syncs. seamlessly with the product data. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Hope you found the video helpful. See. you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=X7cIlzO3Htw">https://www.youtube.com/watch?v=X7cIlzO3Htw</a></p><p>A minimal infinite product slider page built with HTML, CSS, and JavaScript, powered by GSAP animations. The slider works like a game controller and smoothly morphs into a full product modal with preview and background transitions.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Damso</p><p>Website: <a href="https://damso.com/">https://damso.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:36 HTML</p><p>4:01 CSS</p><p>9:27 Products Data</p><p>10:23 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/X7cIlzO3Htw/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=X7cIlzO3Htw">https://www.youtube.com/watch?v=X7cIlzO3Htw</a></p><h1>值得閱讀的理由</h1> <ul> <li>深入了解一個榮獲Awwwards「每日最佳網站」專案的<strong>設計理念</strong>與<strong>技術重現過程</strong>。</li> <li>學習如何從零開始，利用 <strong>Vanilla JavaScript</strong> 和 <strong>GSAP</strong> 打造<strong>流暢無限產品滑塊</strong>與<strong>互動式預覽模型</strong>。</li> <li>掌握從 <strong>HTML 結構</strong>到 <strong>CSS 樣式</strong>的詳細建構步驟，特別是針對<strong>複雜動畫準備</strong>的關鍵技巧。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片開場與專案介紹</h2> <p>這段影片探討了一個於9月27日在Awwwards上被評為「每日最佳網站」的專案。該專案以其<strong>極簡的無限產品滑塊</strong>和<strong>圓形搖桿式控制器</strong>設計，立即吸引了作者的目光。這個設計不僅美觀，更展現了作者個人偏愛的<strong>簡潔且互動性強</strong>的風格。用戶可以透過方向控制切換不同產品，而當點擊中心控制器時，兩側產品會滑出並淡化，一個模型會隨之升起，展示產品詳情、縮圖預覽以及強化視覺識別的全出血背景。作者表示他許久未曾建立類似專案，因此決定嘗試重現。經過約8小時的動畫探索與從頭建構，作者最終成功打造出一個完全由<strong>Vanilla JavaScript</strong>和 <strong>GSAP</strong> 驅動的版本。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_0.jpg" /></p></p> <p>這個重現版擁有相同的<strong>無限滑塊行為</strong>，各項目之間過渡平滑，並具備一個<strong>玻璃質感的產品預覽模型</strong>，可透過單擊開啟和關閉。當模型啟用時，中心的控制器會變形為一個關閉按鈕，並在退出動畫時重置一切。在接下來的影片中，作者將帶領觀眾逐步了解程式碼，涵蓋從無限滑塊邏輯到預覽模型以及其間所有動畫的完整建構過程。</p> <hr /> <h2>HTML 結構詳解</h2> <p>影片首先從 <strong>HTML 結構</strong>開始。作者在最頂層加入一個名為 <code>container</code> 的包裝 <code>div</code>，它將容納整個頁面的所有元素，包括導航欄、圖庫、控制器、橫幅和模型。導航欄包含兩個元素：左側用於<strong>標誌</strong>，右側用於<strong>當前產品名稱</strong>，後者將使用 JavaScript 動態更新。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_117.jpg" /></p></p> <p>接著是主區塊 <code>gallery</code>，內部包含一個空的無序列表 <code>products</code>，用於透過 JavaScript 循環物件陣列，<strong>動態注入產品項目</strong>。圖庫中還包含 <strong>控制器</strong>，一個位於螢幕底部中央的圓形 UI 元素。控制器分為兩個主要部分：<strong>內部圓圈</strong>和<strong>外部圓環</strong>。內部圓圈包含一個由兩個空 <code>span</code> 標籤組成的<strong>關閉圖標</strong>，這些標籤在模型開啟時將動畫形成 \'X\' 形。外部圓環則包含「Menu」標籤和兩個<strong>導航按鈕</strong>（上一頁和下一頁），用於循環瀏覽產品滑塊。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_160.jpg" /></p></p> <p>在圖庫之後是 <strong><code>product-banner</code> 區塊</strong>，它包含一個全螢幕圖片元素，將作為產品預覽開啟時的<strong>背景層</strong>。最後，作者加入了<strong>產品預覽模型 (`product-preview`)</strong>。這個加載面板分為三部分：<strong>資訊區塊</strong>（產品名稱和標籤，將動態更新）、<strong>圖像區塊</strong>（產品縮圖）和<strong>按鈕區塊</strong>（一個導向產品頁面的「查看詳情」CTA 按鈕）。至此，所有結構元素已準備就緒，接下來將進行 CSS 樣式設定。</p> <hr /> <h2>CSS 樣式與動畫準備</h2> <p>作者開始為專案進行 CSS 樣式設定。首先，他導入了 <strong>DM Sans 和 DM Mono 兩種 Google 字體</strong>，以保持設計的簡潔和極簡風格。隨後，定義了一組<strong>根級顏色標記</strong>，從純白到純黑的簡單灰階，確保整個設計的色調一致性。在全域重置中，移除了預設的邊距和填充，並使用 <code>border-box</code> 以使寬高更具預測性。對於 <code>body</code>，設定了 DM Sans 為預設字體、白色背景，並<strong>隱藏溢出 (`overflow: hidden`)</strong>，以確保元素進出框架時邊緣的整潔。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_259.jpg" /></p></p> <p>整體 <strong><code>container</code> 容器</strong>採用相對定位，填滿整個視口高度並隱藏溢出，為所有絕對定位的層和動畫提供穩定的舞台。<strong>導航欄</strong>絕對定位於頂部，填滿全寬，使用 Flexbox 將標誌推向左側，產品名稱推向右側，並具有較高的堆疊順序。導航欄中的文本大寫，並切換到 DM Mono 字體。<strong>圖庫區塊</strong>同樣採用絕對定位，填滿全螢幕高度，並隱藏溢出以保持滑塊整潔。圖庫內的<strong>產品列表</strong>居中顯示，目前是一個固定 300x300 像素的方形，作為<strong>活動幻燈片的舞台</strong>。每個列表項目都絕對定位，內容使用 Flexbox 完美居中，並標記了 <strong>`will-change: transform`</strong>，提示瀏覽器這些項目將頻繁動畫。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_330.jpg" /></p></p> <p>接下來是底部的<strong>控制器</strong>，它水平居中，略高於底部邊緣，具有固定尺寸。禁用用戶選擇並將光標設置為指針，使其感覺可點擊，並具有高 Z-index 以始終位於其他層之上。<strong>內部控制器</strong>是一個較小的深色圓圈，位於內部中央，使用<strong>圓形剪切路徑 (`clip-path`)</strong>，並標記 <strong>`will-change: clip-path`</strong>，以便後續平滑動畫。<strong>關閉圖標</strong>由兩個居中定位的 <code>span</code> 標籤組成，它們從零寬度開始，透過動畫擴展寬度並旋轉形成 \'X\' 形。<strong>外部控制器</strong>是一個較深的圓環，同樣使用圓形剪切路徑，並位於內部元素下方，形成清晰的兩層控制。外部控制器頂部有一個簡單的「Menu」標籤，並標記了 <strong>`will-change: opacity`</strong> 以便淡出。<strong>導航按鈕</strong>垂直居中於外部圓環的左右兩側，並標記了 <strong>`will-change: opacity`</strong> 以實現平滑的禁用狀態過渡。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_410.jpg" /></p></p> <p><strong>產品橫幅</strong>是模型後面的全螢幕圖片，它位於主要內容下方，初始完全透明，並將通過動畫改變其不透明度以在預覽狀態時顯示。圖片本身設定為覆蓋螢幕並略微放大。最後是<strong>產品預覽模型</strong>，它絕對定位，通過左右組合實現水平居中，並垂直錨定於中心上方一點，然後向下平移以從螢幕外開始。它設定了寬高、內部填充和柔和的圓角。背景是一個<strong>半透明的白色層</strong>，並帶有強烈的 <strong>`backdrop-filter: blur`</strong>，賦予其<strong>玻璃磨砂質感</strong>。模型內容垂直堆疊，並具有高 Z-index 以浮動在滑塊上方。頂部的資訊區塊居中對齊，產品名稱使用稍大的段落樣式，而標籤則是一個小藥丸形狀，具有深色背景和白色文本。圖像區塊佔滿全寬，並使用完美的方形長寬比，帶有小圓角和白色背景，並隱藏溢出，確保縮圖清晰剪裁。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Just a couple days ago on September. 27th, this project was featured as site. of the day on awards. And the moment you. land on it, you are greeted with the. stunningly minimal infinite product. slider built around the circular. joystick- like controller. It right away. caught my eye, not just for the. aesthetic, but because it resonated with. the kind of design I personally. gravitated toward, clean and. interactive. You can cycle through. different products using the directional. controls. But the real magic happens. when you click on the center pad. The. side products slide outward and fade. away. And a model rises into focus. showing product details, a thumbnail. preview, and a full bleed background. that reinforces the visual identity of. the item. It's simple, but so well. executed, and I hadn't built anything. like this in a while, so I figured it. was time to give it a shot. After about. 8 hours of exploring the animation and. rebuilding it from scratch, I ended up. with this version. Fully powered by. vanilla JavaScript and GSA. It has that. same infinite slider behavior with. smooth transitions between items and a. glassy product preview that opens and. closes with a single click. You can see. the center controller morphs into a. close button when the model is active. and resets everything with a clean exit. animation. In today's video, I'll walk. you through the code how the entire. experience is built from the infinite. slider logic to the preview model and. all the animations in between. If you. find these kinds of ribbles helpful,. make sure you leave a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_96.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=96" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Let's start with the HTML. At the very. top, I'm adding a wpper div with the. class container. This will hold. everything. The navbar, the gallery, the. controller, the banner, and the model. all stacked within the single container. Inside that, the first element is the. navigation bar. We have got two elements. here. One on the left for the logo and. one on the right for the current product. name. Right now I have hardcoded it but. we'll update this dynamically later. using JavaScript whenever the active. product changes. Next comes the main. section I do with the class gallery. Inside the gallery I am adding an empty. unordered list with the class products. This is where we'll inject the product. items dynamically using JavaScript. looping through an array of objects that. contains the product name, tag, image,. and URL for each item. Still inside the. gallery, we add the controller. This is. the circular UI element that sits near. the bottom center of the screen. The. controller is split into two main parts,. an inner circle and the outer ring. Let's start with the inner part. Here we. have added a close icon which is made up. of two empty span tags. These will. animate into an X shape when the model. is open. So the center of the controller. doubles as a toggle. Then inside the. outer section, we have got a few. controls. At the top, there is a label. that says menu. And below that, we have. added two navigation buttons, one for. previous and one for next, each with a. unique class and an ion icon inside to. represent the direction. These will be. the clickable controls for cycling. through the product slider. Right after. the gallery, we have got a product. banner section. This holds a full screen. image element and we'll use it as the. background layer that fades in whenever. a product preview is open. And finally,. we add the model itself called product. preview. This loading panel is split. into three parts. The info section, the. image and the button. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_204.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">In the info block, we have got two. elements, the product name and the tag. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Both of these will be updated. dynamically based on whichever product. is selected. Below that, there is an. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">image wrapper with the product. thumbnail. And finally, we have got a. call to action button that links out to. the product page. The button is wrapped. inside a div with the class button and. includes the standard anchor tag that. says view details. And that's it for the. HTML. We have got all the structural. elements in place. The nav bar, the. dynamic slider container, the controller. with the interactive elements, the. preview model, and the background. banner. Next, we'll move on to the CSS. and start styling everything. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_241.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=241" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">I'm starting by importing two Google. fonts, DM Sense and DM Mono. Together,. they keep the design clean and minimal. Next, I'm defining a set of root level. color tokens. There is a simple. grayscale scale from pure white to solid. black labeled from B 100 through base. 500. We'll use this consistently across. the background, text, overlays, and. interactive elements so the palette. stays cohesive. After that, I am doing a. quick global reset. Default margin and. paddings are removed and everything uses. border box sizing so width and heights. are predictable. For the body, I'm. setting DMs as the default font, a white. background, and I'm hiding overflow. That last part helps us keep the edges. clean when elements animate in and out. of frame. Paragraphs get a small dense. style, a slightly reduced font size,. medium weight, and tight line height. This keeps labels compact and crisp. Now. for the overall container, its position. relative fills the full view port height. and hides overflow. This creates a. stable stage for all our absolutely. positioned layers and animations. The. navigation bar sits absolutely at the. top and spends the full width. It uses. flexbox to push the logo to the left and. the product name to the right with some. padding around the edges and a higher. stacking order so it always stays on. top. Inside the nav, the text is. uppercased and switched to DM mono for. that UI label feel and the product name. is softened with a mid-g gray so it. reads as secondary. The gallery section. is also absolutely positioned and fills. the full screen height using the save. view port unit so mobile browser Chrome. doesn't clip anything. Overflow is. hidden here as well to keep the slider. tidy. Inside the gallery, the products. list is centered on the screen. For now,. it's a fixed 300 by300 square that we'll. use as the stage for the active slide. Each list item is also absolutely. positioned at that size with content. perfectly centered using flexbox. I have. marked all the list items with will. change transform. That's a hint to the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_346.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">browser that these will animate. frequently. The images inside each item. are sized slightly smaller 250x 250 so. they sit with a comfortable margin. inside the square. Now for the. controller, the circular pad at the. bottom. It's centered horizontally,. lifted slightly above the bottom edge. and given fixed dimensions. User. selection is disabled and the cursor is. set to pointer so it feels clickable. It. sits on a high Zindex so it's always. accessible above other layers. The inner. controller is a smaller dark circle. centered inside. It uses a circular clip. path and will change on clip path so we. can animate that shape smoothly later. This inner area is where the close icon. lives. That icon is just two spans. positioned at center. They start at zero. width. They are two pixels thick and. they share same white color as the inner. circle's foreground. One span is rotated. 45° and the other is negative 45. So. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">when we expand their width and. animation, they form a clean X shape. Transform origins are centered for a. precise rotation. Behind that, the outer. controller fits the full circle. It's a. darker ring rounded and also uses a. circular clip path that will animate. during the toggle. It sits just beneath. the inner element on this tracking order. creating a clear two-layer control. On. top of the outer controller, there is a. simple label position near the top that. says menu. It's centered horizontally,. uppercase, uses DM mono font, and is. styled in white. Opacity changes on this. label are also optimized with change. since we'll fade it out when the model. opens. The navigation buttons sit. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_430.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">vertically centered on the left and. right edges of the outer ring. They. share the same white color, slightly. larger icon size, and a pointer cursor. These also mark opacity as a will change. so that disabled state can fade. smoothly. The previous button is nudged. in from the left. The next button is. nudged in from the right. When either is. disabled, opacity drops to a quarter and. pointer events are turned off. So they. are inactive. Next comes the product. banner. The full screen image behind the. model. It sits underneath the main. content on the stacking order and starts. completely transparent. We'll animate. its opacity to bring it in during the. preview state. The image inside it is. set to cover the screen and is scaled up. slightly so it feels cinematic and. avoids any edge gaps during movement. Now for the model the product preview. it's absolutely centered horizontally. via left and right combo and vertically. anchored a bit above center then. translated down so it starts off screen. Width is set to 30% of the viewport and. height is 75% with internal padding and. a soft radius. The background is. transculent white layer and a heavy. backdrop blur so it gives it that glassy. frosted look. Content inside stacks in a. vertical column with consistent gaps. The model sits above most layers so it. can float over the slider. The info at. the top aligns item center with a small. horizontal gap. The product name gets a. slightly larger paragraph style while. the tag becomes a small pill padded. rounded dark background white text. The. tag text is uppercased switches to DM. mono and is reduced in size. So it reads. like a compact category badge. The image. section takes up the full width and uses. a perfect square aspect ratio. It gets a. small radius, a white backdrop and hides. overflow so the thumbnail clips cleanly. The image inside fills the box and uses. object fit cover to maintain its. proportions while filling the square. Finally, the call to action area style. three button container. It's dark. rectangle with rounded corners, centered. content, and the anchor spans the full. height for an easy hit target. The link. uses white text and removes the. underline for a cleaner look. For. responsiveness, there is a break point. at 1,000 pixels. Below that, the preview. model stretches to use the full. available width minus a small margin on. each side. This keeps the layout. balanced and readable on smaller screens. while preserving the same structure and. interactions. And that's the full CSS. pass. We are ready for the JavaScript to. drive the interactions. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_567.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=567" target="_blank"><strong># Products Data</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now before we dive into JavaScript, let. me quickly explain how we are going to. handle the product content. I have. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">created a separate file called. products.js. Inside this file, we have. set up an array of objects and each. object represents a single product in. our catalog. Every product has a few key. properties. A name, which is the title. that will show up in the narrow bar in. the model. An image, which points to the. products image file, a price, which we. can use if we want to display the cost. information. A tag, which works like a. category label, and finally, a URL which. links directly to the product detail. page. By structuring the data in this. way, we can dynamically inject products. into the slider instead of hard-coding. them into the HTML. This means the list. inside our gallery can stay empty at. first and JavaScript will loop through. the array to create and update the items. on the fly. And with that data layer in. place, we are ready to move into the. JavaScript where we'll connect the. slider mechanics, the controller, and. the preview model. All powered by Gap. animations. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_623.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=623" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, at the very top, I'm. importing GSA. This is the animation. library we'll be using to handle all of. the motion throughout the slider. Right. after that, I'm also importing the. products array from the file we created. earlier. That's the file that holds all. of our product data, the name, image,. tag, and link. We'll be using it to. dynamically populate the slider and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">keeps everything synced between the. navbar, the model, and the background. banner. Next, I'm grabbing all of the. key elements from the DOM using query. selector, the products container,. product name, the wrapper itself, the. product name, the thumbnail image, the. category tag, and the URL button. I'm. also grabbing the product banner and its. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">image. This is the full screen. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">background that fades in behind the. model. And finally, I'm selecting the. controller elements, the inner and outer. circles, the two spans that make up the. close icon, and the previous and next. buttons on either side. By storing all. of these as variables up front, we can. reuse them later when we set states,. update content, or trigger animations. After that, I'm setting up a few state. variables. Current product index keeps. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">track of which product is currently. active in the slider. Slide item starts. as an empty array. We'll use it to store. references to every slide element we. generate. Then we have got two booleans. is preview animating and is preview. open. These help us block interactions. while an animation is running and also. track whether the model is open or. closed. Now we are defining some. constants for the slider mechanics. Buffer size is set to five. This is how. many extra slides we'll keep on each. side of the active product. So the. slider fills infinite as we scroll left. and right. Spacing is set to 375. That's. the relative distance we'll use to space. out the slides. And finally, slider. width is calculated by multiplying that. spacing by 1,000. This gives us a. consistent unit in pixels that we'll. apply to the exposition of each slide. during layout and animation. Next, we. are defining the add slide item. function. This handles creating a new. slide and inserting it into the DOM. First, we calculate the correct product. index. We take the current product. index, add the relative offset, and then. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_738.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">wrap it around the length of the. products array using modulo. This way,. even if we go beyond the start or end of. the list, it loops back around, giving. us the infinite behavior. Then we grab. the product at that index and create a. new list element. Inside it, we inject. an image tag with the products image and. all text. We also assign a datab. relative index attribute. So, we always. know how far this item is offset from. the current center. Before adding it to. the DOM, we use GAP's set method to. define its initial state. Its exposition. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">is based on the relative index. multiplied by our slide width. If it's. the active item meaning relative index. equals zero, we scale it up to 1.25 and. set its index r so it pops forward. Otherwise, it's scaled down to 75 and. placed behind. Finally, we append the. element to the products container and. push a reference into the slide items. array along with its relative index. That way, we can keep track of it for. updates and removal later. Speaking of. removal, right after that we have the. remove slide item function. This does. the opposite of what we just built. It. looks through the slide items array to. find any element with a matching. relative index if it exists. We remove. that element from the DOM and also. splice it out of the array. This keeps. our memory clean and ensures we are only. ever rendering the slides we actually. need. And that's the setup. We have just. imported GAP and our products, selected. all the core DOM elements, defined our. state, and return the first two utility. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_820.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">functions for adding and removing. slides. Next, we'll move on to updating. positions and syncing content so the. slider always knows which product is. active. Now that we have got the ability. to add and remove slides, let's set up. the functions that keep the slider in. sync as we move through the products. First is update slider position. This. loops through every item we currently. have in our slide items array. For each. one, we check if it's the active slide,. meaning its relative index is zero. If. it's active, we scale it up to 1.25,. give it a higher index, and place it. front and center. If it's not active, we. shrink it down to 0.75 and push it back. visually. All of these adjustments,. including its exposition, are animated. smoothly with GSAP using a 3/4 second. duration and a soft power three easing. This is what gives the slider that. polished motion as items glide into. their new positions. Next, we have got. update product name. This one takes the. current product index, wraps it safely. around the length of the array and then. updates the product name inside the nav. bar. So, as soon as we navigate left or. right, the nav text always reflects. whichever item is active in the center. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_882.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then we move on to the update preview. content function. This is very similar,. but instead of just updating the nav, it. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">updates everything inside the preview. model and the background banner. We grab. the current product from the array and. then set the model's name. Swap in the. current thumbnail image and all text. Update the tag so the category label. matches. Change the link on the button. And finally, update the banner image. that fades in behind the model. This. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">ensures that whether you are just. sliding through or opening the preview,. every part of the interface is tried to. the same product. Now, let's talk about. navigation. Starting with move next. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">This function is triggered whenever we. click the next button. The first thing. it does is check two flags. If the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">preview is animating or if it's. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">currently open, we don't allow. navigation. This keeps things stable so. we don't break the flow with animation. If we are good to move, we increment the. product index to the next item. Then we. remove the far left buffer slide since. it's now out of view. For all the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">remaining slides, we shift their. relative index down by one, effectively. sliding them left. After that, we add a. new buffer slide to the far right to. replace what we lost. Finally, we update. the sliders position, the product name. in the nav and the preview content so. everything stays consistent. Move. previous works the exact same way, but. in reverse. We decrement the current. index, remove the far right buffer,. shift every slides relative index up by. one, and then add a new buffer item to. the far left. And again, we update the. positions, the nav, and the preview. content. This back and forth logic. combined with the buffer system is what. gives the slider its infinite feel. Next. up, we have got update button states. This one is simple. It checks if the. previous either animating or open. If it. is, both of the previous and next. buttons are disabled by lowering the. opacity and removing pointer events. We. are animating clip path anyways to hide. the entire outer wrapper. But in case if. you want to keep the outer layer as is,. this function might be useful. If not,. this one is simple. It checks if the. previous either animating or open. If it. is, both the previous and next buttons. are disabled by lowering their opacity. and removing pointer events. If not,. they are reenabled. This way you avoid. any accidental clicks while the model is. active. And finally, there is active get. slide function. This just looks through. the array of slide items and returns. whichever one has a relative index of. zero. In either words, it's a quick way. for us to always grab the current center. slide whenever we need it for the. animations. So, at this point, we have. got a fully functional loop for updating. positions, syncing product content, and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_1020.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">handling the navigation with proper. button states. Next, we'll move into the. animations that happen when we toggle. the preview model, fading out the side. items, transforming the controller, and. sliding the model in and out. We'll. start with animate side items. This. function is all about deeming or. revealing the slides that sit around the. active one. First, we grab the currently. active slide using the helper we wrote. earlier. Then, we loop through all the. slide items. For any slide that's just. one or two steps away from the center,. we animate its position and opacity. If. we are hiding them, meaning the model is. opening, they slide further out, fade to. zero, and make room for the preview. If. we are showing them again, they slide. back into their normal positions and. fade back in. We also treat the active. slide differently. If we are hiding, we. shrink it down slightly and fade it. away. If we are showing, we scale it up. larger and make it fully visible again. Altogether, this creates that clean. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">transition where the surrounding. products disappear and the focus shifts. fully to the model. Now, let's talk. about the controller itself. that's. handled in animate controller. transition. Here we are animating three. different parts. The label and nav. buttons, the outer ring, the inner pad. with the close icon. When the preview. opens, the label and the nav arrows fade. out quickly since we don't need. navigation while the model is active. The outer ring shrinks down using a clip. path animation while the inner circle. expands slightly creating that morphing. effect between the joystick and the. close button. Finally, the close icon. spans animate in their width grows to 20. pixels one after the other with a slight. stagger. So they form the X shape that. closes the model. When we reverse the. interaction, all of these animations. play back in reverse. The X collapses,. the pad shrinks, the ring expands, and. the arrows fade back in. This whole. sequence makes the controller feel like. a living toggle rather than just a. static button. With those two helpers in. place, we can now move on to the main. toggle logic itself, the toggle preview. function. The first thing we do is check. if an animation is already running. If. it is, we skip it to avoid conflicts. Otherwise, we set a flag that tells the. system an animation is in progress and. disable the navigation buttons. If the. preview is about to open, we also update. the content inside the model and banner. so the visuals match the current. product. Then we animate the model Y. position. If we are opening, it slides. upward into view. If we are closing, it. slides down and out of frame. At the. same time, the product banner fades in. or out behind it with a slight delay so. it feels layered. And after that, we. call our two helpers. Animate side items. to fade the surrounding slides in or out. and animate controller transition to. morph the joystick into the close. button. Finally, we use a short timeout. to reset the flags, marking the. animations as complete and flipping the. open state. This ensures everything is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_1174.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">synced and ready for the next. interaction. And now to bring it all. together, we have initialize slider. function. This function sets up the. slider when the page first loads. We. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">loop through a range from negative. buffer size to positive buffer size. adding extra slides on both sides of the. active product. This creates the. illusion. Then we call all the update. functions once so the slider positions,. product name, model content and button. states are perfectly synced with the. first product. The very last step is. attaching event listeners. We listen for. clicks on the previous and next buttons. to trigger navigation and we listen for. clicks on the controller inner pad to. toggle the model open and closed. Finally, we call initialize slider. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">function to render everything into. place. And that's the full JavaScript. With these functions working together,. we have built a complete infinite. product slider powered by GSAP. animations with a controller that. doubles as both a navigator and a. preview toggle and a model that syncs. seamlessly with the product data. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Hope you found the video helpful. See. you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=X7cIlzO3Htw">https://www.youtube.com/watch?v=X7cIlzO3Htw</a></p><p>A minimal infinite product slider page built with HTML, CSS, and JavaScript, powered by GSAP animations. The slider works like a game controller and smoothly morphs into a full product modal with preview and background transitions.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Damso</p><p>Website: <a href="https://damso.com/">https://damso.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:36 HTML</p><p>4:01 CSS</p><p>9:27 Products Data</p><p>10:23 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/X7cIlzO3Htw/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=X7cIlzO3Htw">https://www.youtube.com/watch?v=X7cIlzO3Htw</a></p><h1>值得閱讀的理由</h1> <ul> <li>深入了解一個榮獲Awwwards「每日最佳網站」專案的<strong>設計理念</strong>與<strong>技術重現過程</strong>。</li> <li>學習如何從零開始，利用 <strong>Vanilla JavaScript</strong> 和 <strong>GSAP</strong> 打造<strong>流暢無限產品滑塊</strong>與<strong>互動式預覽模型</strong>。</li> <li>掌握從 <strong>HTML 結構</strong>到 <strong>CSS 樣式</strong>的詳細建構步驟，特別是針對<strong>複雜動畫準備</strong>的關鍵技巧。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片開場與專案介紹</h2> <p>這段影片探討了一個於9月27日在Awwwards上被評為「每日最佳網站」的專案。該專案以其<strong>極簡的無限產品滑塊</strong>和<strong>圓形搖桿式控制器</strong>設計，立即吸引了作者的目光。這個設計不僅美觀，更展現了作者個人偏愛的<strong>簡潔且互動性強</strong>的風格。用戶可以透過方向控制切換不同產品，而當點擊中心控制器時，兩側產品會滑出並淡化，一個模型會隨之升起，展示產品詳情、縮圖預覽以及強化視覺識別的全出血背景。作者表示他許久未曾建立類似專案，因此決定嘗試重現。經過約8小時的動畫探索與從頭建構，作者最終成功打造出一個完全由<strong>Vanilla JavaScript</strong>和 <strong>GSAP</strong> 驅動的版本。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_0.jpg" /></p></p> <p>這個重現版擁有相同的<strong>無限滑塊行為</strong>，各項目之間過渡平滑，並具備一個<strong>玻璃質感的產品預覽模型</strong>，可透過單擊開啟和關閉。當模型啟用時，中心的控制器會變形為一個關閉按鈕，並在退出動畫時重置一切。在接下來的影片中，作者將帶領觀眾逐步了解程式碼，涵蓋從無限滑塊邏輯到預覽模型以及其間所有動畫的完整建構過程。</p> <hr /> <h2>HTML 結構詳解</h2> <p>影片首先從 <strong>HTML 結構</strong>開始。作者在最頂層加入一個名為 <code>container</code> 的包裝 <code>div</code>，它將容納整個頁面的所有元素，包括導航欄、圖庫、控制器、橫幅和模型。導航欄包含兩個元素：左側用於<strong>標誌</strong>，右側用於<strong>當前產品名稱</strong>，後者將使用 JavaScript 動態更新。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_117.jpg" /></p></p> <p>接著是主區塊 <code>gallery</code>，內部包含一個空的無序列表 <code>products</code>，用於透過 JavaScript 循環物件陣列，<strong>動態注入產品項目</strong>。圖庫中還包含 <strong>控制器</strong>，一個位於螢幕底部中央的圓形 UI 元素。控制器分為兩個主要部分：<strong>內部圓圈</strong>和<strong>外部圓環</strong>。內部圓圈包含一個由兩個空 <code>span</code> 標籤組成的<strong>關閉圖標</strong>，這些標籤在模型開啟時將動畫形成 \'X\' 形。外部圓環則包含「Menu」標籤和兩個<strong>導航按鈕</strong>（上一頁和下一頁），用於循環瀏覽產品滑塊。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_160.jpg" /></p></p> <p>在圖庫之後是 <strong><code>product-banner</code> 區塊</strong>，它包含一個全螢幕圖片元素，將作為產品預覽開啟時的<strong>背景層</strong>。最後，作者加入了<strong>產品預覽模型 (`product-preview`)</strong>。這個加載面板分為三部分：<strong>資訊區塊</strong>（產品名稱和標籤，將動態更新）、<strong>圖像區塊</strong>（產品縮圖）和<strong>按鈕區塊</strong>（一個導向產品頁面的「查看詳情」CTA 按鈕）。至此，所有結構元素已準備就緒，接下來將進行 CSS 樣式設定。</p> <hr /> <h2>CSS 樣式與動畫準備</h2> <p>作者開始為專案進行 CSS 樣式設定。首先，他導入了 <strong>DM Sans 和 DM Mono 兩種 Google 字體</strong>，以保持設計的簡潔和極簡風格。隨後，定義了一組<strong>根級顏色標記</strong>，從純白到純黑的簡單灰階，確保整個設計的色調一致性。在全域重置中，移除了預設的邊距和填充，並使用 <code>border-box</code> 以使寬高更具預測性。對於 <code>body</code>，設定了 DM Sans 為預設字體、白色背景，並<strong>隱藏溢出 (`overflow: hidden`)</strong>，以確保元素進出框架時邊緣的整潔。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_259.jpg" /></p></p> <p>整體 <strong><code>container</code> 容器</strong>採用相對定位，填滿整個視口高度並隱藏溢出，為所有絕對定位的層和動畫提供穩定的舞台。<strong>導航欄</strong>絕對定位於頂部，填滿全寬，使用 Flexbox 將標誌推向左側，產品名稱推向右側，並具有較高的堆疊順序。導航欄中的文本大寫，並切換到 DM Mono 字體。<strong>圖庫區塊</strong>同樣採用絕對定位，填滿全螢幕高度，並隱藏溢出以保持滑塊整潔。圖庫內的<strong>產品列表</strong>居中顯示，目前是一個固定 300x300 像素的方形，作為<strong>活動幻燈片的舞台</strong>。每個列表項目都絕對定位，內容使用 Flexbox 完美居中，並標記了 <strong>`will-change: transform`</strong>，提示瀏覽器這些項目將頻繁動畫。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_330.jpg" /></p></p> <p>接下來是底部的<strong>控制器</strong>，它水平居中，略高於底部邊緣，具有固定尺寸。禁用用戶選擇並將光標設置為指針，使其感覺可點擊，並具有高 Z-index 以始終位於其他層之上。<strong>內部控制器</strong>是一個較小的深色圓圈，位於內部中央，使用<strong>圓形剪切路徑 (`clip-path`)</strong>，並標記 <strong>`will-change: clip-path`</strong>，以便後續平滑動畫。<strong>關閉圖標</strong>由兩個居中定位的 <code>span</code> 標籤組成，它們從零寬度開始，透過動畫擴展寬度並旋轉形成 \'X\' 形。<strong>外部控制器</strong>是一個較深的圓環，同樣使用圓形剪切路徑，並位於內部元素下方，形成清晰的兩層控制。外部控制器頂部有一個簡單的「Menu」標籤，並標記了 <strong>`will-change: opacity`</strong> 以便淡出。<strong>導航按鈕</strong>垂直居中於外部圓環的左右兩側，並標記了 <strong>`will-change: opacity`</strong> 以實現平滑的禁用狀態過渡。</p> <p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_410.jpg" /></p></p> <p><strong>產品橫幅</strong>是模型後面的全螢幕圖片，它位於主要內容下方，初始完全透明，並將通過動畫改變其不透明度以在預覽狀態時顯示。圖片本身設定為覆蓋螢幕並略微放大。最後是<strong>產品預覽模型</strong>，它絕對定位，通過左右組合實現水平居中，並垂直錨定於中心上方一點，然後向下平移以從螢幕外開始。它設定了寬高、內部填充和柔和的圓角。背景是一個<strong>半透明的白色層</strong>，並帶有強烈的 <strong>`backdrop-filter: blur`</strong>，賦予其<strong>玻璃磨砂質感</strong>。模型內容垂直堆疊，並具有高 Z-index 以浮動在滑塊上方。頂部的資訊區塊居中對齊，產品名稱使用稍大的段落樣式，而標籤則是一個小藥丸形狀，具有深色背景和白色文本。圖像區塊佔滿全寬，並使用完美的方形長寬比，帶有小圓角和白色背景，並隱藏溢出，確保縮圖清晰剪裁。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Just a couple days ago on September. 27th, this project was featured as site. of the day on awards. And the moment you. land on it, you are greeted with the. stunningly minimal infinite product. slider built around the circular. joystick- like controller. It right away. caught my eye, not just for the. aesthetic, but because it resonated with. the kind of design I personally. gravitated toward, clean and. interactive. You can cycle through. different products using the directional. controls. But the real magic happens. when you click on the center pad. The. side products slide outward and fade. away. And a model rises into focus. showing product details, a thumbnail. preview, and a full bleed background. that reinforces the visual identity of. the item. It's simple, but so well. executed, and I hadn't built anything. like this in a while, so I figured it. was time to give it a shot. After about. 8 hours of exploring the animation and. rebuilding it from scratch, I ended up. with this version. Fully powered by. vanilla JavaScript and GSA. It has that. same infinite slider behavior with. smooth transitions between items and a. glassy product preview that opens and. closes with a single click. You can see. the center controller morphs into a. close button when the model is active. and resets everything with a clean exit. animation. In today's video, I'll walk. you through the code how the entire. experience is built from the infinite. slider logic to the preview model and. all the animations in between. If you. find these kinds of ribbles helpful,. make sure you leave a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_96.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=96" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Let's start with the HTML. At the very. top, I'm adding a wpper div with the. class container. This will hold. everything. The navbar, the gallery, the. controller, the banner, and the model. all stacked within the single container. Inside that, the first element is the. navigation bar. We have got two elements. here. One on the left for the logo and. one on the right for the current product. name. Right now I have hardcoded it but. we'll update this dynamically later. using JavaScript whenever the active. product changes. Next comes the main. section I do with the class gallery. Inside the gallery I am adding an empty. unordered list with the class products. This is where we'll inject the product. items dynamically using JavaScript. looping through an array of objects that. contains the product name, tag, image,. and URL for each item. Still inside the. gallery, we add the controller. This is. the circular UI element that sits near. the bottom center of the screen. The. controller is split into two main parts,. an inner circle and the outer ring. Let's start with the inner part. Here we. have added a close icon which is made up. of two empty span tags. These will. animate into an X shape when the model. is open. So the center of the controller. doubles as a toggle. Then inside the. outer section, we have got a few. controls. At the top, there is a label. that says menu. And below that, we have. added two navigation buttons, one for. previous and one for next, each with a. unique class and an ion icon inside to. represent the direction. These will be. the clickable controls for cycling. through the product slider. Right after. the gallery, we have got a product. banner section. This holds a full screen. image element and we'll use it as the. background layer that fades in whenever. a product preview is open. And finally,. we add the model itself called product. preview. This loading panel is split. into three parts. The info section, the. image and the button. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_204.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">In the info block, we have got two. elements, the product name and the tag. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Both of these will be updated. dynamically based on whichever product. is selected. Below that, there is an. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">image wrapper with the product. thumbnail. And finally, we have got a. call to action button that links out to. the product page. The button is wrapped. inside a div with the class button and. includes the standard anchor tag that. says view details. And that's it for the. HTML. We have got all the structural. elements in place. The nav bar, the. dynamic slider container, the controller. with the interactive elements, the. preview model, and the background. banner. Next, we'll move on to the CSS. and start styling everything. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_241.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=241" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">I'm starting by importing two Google. fonts, DM Sense and DM Mono. Together,. they keep the design clean and minimal. Next, I'm defining a set of root level. color tokens. There is a simple. grayscale scale from pure white to solid. black labeled from B 100 through base. 500. We'll use this consistently across. the background, text, overlays, and. interactive elements so the palette. stays cohesive. After that, I am doing a. quick global reset. Default margin and. paddings are removed and everything uses. border box sizing so width and heights. are predictable. For the body, I'm. setting DMs as the default font, a white. background, and I'm hiding overflow. That last part helps us keep the edges. clean when elements animate in and out. of frame. Paragraphs get a small dense. style, a slightly reduced font size,. medium weight, and tight line height. This keeps labels compact and crisp. Now. for the overall container, its position. relative fills the full view port height. and hides overflow. This creates a. stable stage for all our absolutely. positioned layers and animations. The. navigation bar sits absolutely at the. top and spends the full width. It uses. flexbox to push the logo to the left and. the product name to the right with some. padding around the edges and a higher. stacking order so it always stays on. top. Inside the nav, the text is. uppercased and switched to DM mono for. that UI label feel and the product name. is softened with a mid-g gray so it. reads as secondary. The gallery section. is also absolutely positioned and fills. the full screen height using the save. view port unit so mobile browser Chrome. doesn't clip anything. Overflow is. hidden here as well to keep the slider. tidy. Inside the gallery, the products. list is centered on the screen. For now,. it's a fixed 300 by300 square that we'll. use as the stage for the active slide. Each list item is also absolutely. positioned at that size with content. perfectly centered using flexbox. I have. marked all the list items with will. change transform. That's a hint to the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_346.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">browser that these will animate. frequently. The images inside each item. are sized slightly smaller 250x 250 so. they sit with a comfortable margin. inside the square. Now for the. controller, the circular pad at the. bottom. It's centered horizontally,. lifted slightly above the bottom edge. and given fixed dimensions. User. selection is disabled and the cursor is. set to pointer so it feels clickable. It. sits on a high Zindex so it's always. accessible above other layers. The inner. controller is a smaller dark circle. centered inside. It uses a circular clip. path and will change on clip path so we. can animate that shape smoothly later. This inner area is where the close icon. lives. That icon is just two spans. positioned at center. They start at zero. width. They are two pixels thick and. they share same white color as the inner. circle's foreground. One span is rotated. 45° and the other is negative 45. So. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">when we expand their width and. animation, they form a clean X shape. Transform origins are centered for a. precise rotation. Behind that, the outer. controller fits the full circle. It's a. darker ring rounded and also uses a. circular clip path that will animate. during the toggle. It sits just beneath. the inner element on this tracking order. creating a clear two-layer control. On. top of the outer controller, there is a. simple label position near the top that. says menu. It's centered horizontally,. uppercase, uses DM mono font, and is. styled in white. Opacity changes on this. label are also optimized with change. since we'll fade it out when the model. opens. The navigation buttons sit. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_430.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">vertically centered on the left and. right edges of the outer ring. They. share the same white color, slightly. larger icon size, and a pointer cursor. These also mark opacity as a will change. so that disabled state can fade. smoothly. The previous button is nudged. in from the left. The next button is. nudged in from the right. When either is. disabled, opacity drops to a quarter and. pointer events are turned off. So they. are inactive. Next comes the product. banner. The full screen image behind the. model. It sits underneath the main. content on the stacking order and starts. completely transparent. We'll animate. its opacity to bring it in during the. preview state. The image inside it is. set to cover the screen and is scaled up. slightly so it feels cinematic and. avoids any edge gaps during movement. Now for the model the product preview. it's absolutely centered horizontally. via left and right combo and vertically. anchored a bit above center then. translated down so it starts off screen. Width is set to 30% of the viewport and. height is 75% with internal padding and. a soft radius. The background is. transculent white layer and a heavy. backdrop blur so it gives it that glassy. frosted look. Content inside stacks in a. vertical column with consistent gaps. The model sits above most layers so it. can float over the slider. The info at. the top aligns item center with a small. horizontal gap. The product name gets a. slightly larger paragraph style while. the tag becomes a small pill padded. rounded dark background white text. The. tag text is uppercased switches to DM. mono and is reduced in size. So it reads. like a compact category badge. The image. section takes up the full width and uses. a perfect square aspect ratio. It gets a. small radius, a white backdrop and hides. overflow so the thumbnail clips cleanly. The image inside fills the box and uses. object fit cover to maintain its. proportions while filling the square. Finally, the call to action area style. three button container. It's dark. rectangle with rounded corners, centered. content, and the anchor spans the full. height for an easy hit target. The link. uses white text and removes the. underline for a cleaner look. For. responsiveness, there is a break point. at 1,000 pixels. Below that, the preview. model stretches to use the full. available width minus a small margin on. each side. This keeps the layout. balanced and readable on smaller screens. while preserving the same structure and. interactions. And that's the full CSS. pass. We are ready for the JavaScript to. drive the interactions. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_567.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=567" target="_blank"><strong># Products Data</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now before we dive into JavaScript, let. me quickly explain how we are going to. handle the product content. I have. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">created a separate file called. products.js. Inside this file, we have. set up an array of objects and each. object represents a single product in. our catalog. Every product has a few key. properties. A name, which is the title. that will show up in the narrow bar in. the model. An image, which points to the. products image file, a price, which we. can use if we want to display the cost. information. A tag, which works like a. category label, and finally, a URL which. links directly to the product detail. page. By structuring the data in this. way, we can dynamically inject products. into the slider instead of hard-coding. them into the HTML. This means the list. inside our gallery can stay empty at. first and JavaScript will loop through. the array to create and update the items. on the fly. And with that data layer in. place, we are ready to move into the. JavaScript where we'll connect the. slider mechanics, the controller, and. the preview model. All powered by Gap. animations. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_623.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/X7cIlzO3Htw&t=623" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, at the very top, I'm. importing GSA. This is the animation. library we'll be using to handle all of. the motion throughout the slider. Right. after that, I'm also importing the. products array from the file we created. earlier. That's the file that holds all. of our product data, the name, image,. tag, and link. We'll be using it to. dynamically populate the slider and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">keeps everything synced between the. navbar, the model, and the background. banner. Next, I'm grabbing all of the. key elements from the DOM using query. selector, the products container,. product name, the wrapper itself, the. product name, the thumbnail image, the. category tag, and the URL button. I'm. also grabbing the product banner and its. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">image. This is the full screen. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">background that fades in behind the. model. And finally, I'm selecting the. controller elements, the inner and outer. circles, the two spans that make up the. close icon, and the previous and next. buttons on either side. By storing all. of these as variables up front, we can. reuse them later when we set states,. update content, or trigger animations. After that, I'm setting up a few state. variables. Current product index keeps. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">track of which product is currently. active in the slider. Slide item starts. as an empty array. We'll use it to store. references to every slide element we. generate. Then we have got two booleans. is preview animating and is preview. open. These help us block interactions. while an animation is running and also. track whether the model is open or. closed. Now we are defining some. constants for the slider mechanics. Buffer size is set to five. This is how. many extra slides we'll keep on each. side of the active product. So the. slider fills infinite as we scroll left. and right. Spacing is set to 375. That's. the relative distance we'll use to space. out the slides. And finally, slider. width is calculated by multiplying that. spacing by 1,000. This gives us a. consistent unit in pixels that we'll. apply to the exposition of each slide. during layout and animation. Next, we. are defining the add slide item. function. This handles creating a new. slide and inserting it into the DOM. First, we calculate the correct product. index. We take the current product. index, add the relative offset, and then. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_738.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">wrap it around the length of the. products array using modulo. This way,. even if we go beyond the start or end of. the list, it loops back around, giving. us the infinite behavior. Then we grab. the product at that index and create a. new list element. Inside it, we inject. an image tag with the products image and. all text. We also assign a datab. relative index attribute. So, we always. know how far this item is offset from. the current center. Before adding it to. the DOM, we use GAP's set method to. define its initial state. Its exposition. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">is based on the relative index. multiplied by our slide width. If it's. the active item meaning relative index. equals zero, we scale it up to 1.25 and. set its index r so it pops forward. Otherwise, it's scaled down to 75 and. placed behind. Finally, we append the. element to the products container and. push a reference into the slide items. array along with its relative index. That way, we can keep track of it for. updates and removal later. Speaking of. removal, right after that we have the. remove slide item function. This does. the opposite of what we just built. It. looks through the slide items array to. find any element with a matching. relative index if it exists. We remove. that element from the DOM and also. splice it out of the array. This keeps. our memory clean and ensures we are only. ever rendering the slides we actually. need. And that's the setup. We have just. imported GAP and our products, selected. all the core DOM elements, defined our. state, and return the first two utility. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_820.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">functions for adding and removing. slides. Next, we'll move on to updating. positions and syncing content so the. slider always knows which product is. active. Now that we have got the ability. to add and remove slides, let's set up. the functions that keep the slider in. sync as we move through the products. First is update slider position. This. loops through every item we currently. have in our slide items array. For each. one, we check if it's the active slide,. meaning its relative index is zero. If. it's active, we scale it up to 1.25,. give it a higher index, and place it. front and center. If it's not active, we. shrink it down to 0.75 and push it back. visually. All of these adjustments,. including its exposition, are animated. smoothly with GSAP using a 3/4 second. duration and a soft power three easing. This is what gives the slider that. polished motion as items glide into. their new positions. Next, we have got. update product name. This one takes the. current product index, wraps it safely. around the length of the array and then. updates the product name inside the nav. bar. So, as soon as we navigate left or. right, the nav text always reflects. whichever item is active in the center. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_882.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then we move on to the update preview. content function. This is very similar,. but instead of just updating the nav, it. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">updates everything inside the preview. model and the background banner. We grab. the current product from the array and. then set the model's name. Swap in the. current thumbnail image and all text. Update the tag so the category label. matches. Change the link on the button. And finally, update the banner image. that fades in behind the model. This. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">ensures that whether you are just. sliding through or opening the preview,. every part of the interface is tried to. the same product. Now, let's talk about. navigation. Starting with move next. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">This function is triggered whenever we. click the next button. The first thing. it does is check two flags. If the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">preview is animating or if it's. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">currently open, we don't allow. navigation. This keeps things stable so. we don't break the flow with animation. If we are good to move, we increment the. product index to the next item. Then we. remove the far left buffer slide since. it's now out of view. For all the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">remaining slides, we shift their. relative index down by one, effectively. sliding them left. After that, we add a. new buffer slide to the far right to. replace what we lost. Finally, we update. the sliders position, the product name. in the nav and the preview content so. everything stays consistent. Move. previous works the exact same way, but. in reverse. We decrement the current. index, remove the far right buffer,. shift every slides relative index up by. one, and then add a new buffer item to. the far left. And again, we update the. positions, the nav, and the preview. content. This back and forth logic. combined with the buffer system is what. gives the slider its infinite feel. Next. up, we have got update button states. This one is simple. It checks if the. previous either animating or open. If it. is, both of the previous and next. buttons are disabled by lowering the. opacity and removing pointer events. We. are animating clip path anyways to hide. the entire outer wrapper. But in case if. you want to keep the outer layer as is,. this function might be useful. If not,. this one is simple. It checks if the. previous either animating or open. If it. is, both the previous and next buttons. are disabled by lowering their opacity. and removing pointer events. If not,. they are reenabled. This way you avoid. any accidental clicks while the model is. active. And finally, there is active get. slide function. This just looks through. the array of slide items and returns. whichever one has a relative index of. zero. In either words, it's a quick way. for us to always grab the current center. slide whenever we need it for the. animations. So, at this point, we have. got a fully functional loop for updating. positions, syncing product content, and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_1020.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">handling the navigation with proper. button states. Next, we'll move into the. animations that happen when we toggle. the preview model, fading out the side. items, transforming the controller, and. sliding the model in and out. We'll. start with animate side items. This. function is all about deeming or. revealing the slides that sit around the. active one. First, we grab the currently. active slide using the helper we wrote. earlier. Then, we loop through all the. slide items. For any slide that's just. one or two steps away from the center,. we animate its position and opacity. If. we are hiding them, meaning the model is. opening, they slide further out, fade to. zero, and make room for the preview. If. we are showing them again, they slide. back into their normal positions and. fade back in. We also treat the active. slide differently. If we are hiding, we. shrink it down slightly and fade it. away. If we are showing, we scale it up. larger and make it fully visible again. Altogether, this creates that clean. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">transition where the surrounding. products disappear and the focus shifts. fully to the model. Now, let's talk. about the controller itself. that's. handled in animate controller. transition. Here we are animating three. different parts. The label and nav. buttons, the outer ring, the inner pad. with the close icon. When the preview. opens, the label and the nav arrows fade. out quickly since we don't need. navigation while the model is active. The outer ring shrinks down using a clip. path animation while the inner circle. expands slightly creating that morphing. effect between the joystick and the. close button. Finally, the close icon. spans animate in their width grows to 20. pixels one after the other with a slight. stagger. So they form the X shape that. closes the model. When we reverse the. interaction, all of these animations. play back in reverse. The X collapses,. the pad shrinks, the ring expands, and. the arrows fade back in. This whole. sequence makes the controller feel like. a living toggle rather than just a. static button. With those two helpers in. place, we can now move on to the main. toggle logic itself, the toggle preview. function. The first thing we do is check. if an animation is already running. If. it is, we skip it to avoid conflicts. Otherwise, we set a flag that tells the. system an animation is in progress and. disable the navigation buttons. If the. preview is about to open, we also update. the content inside the model and banner. so the visuals match the current. product. Then we animate the model Y. position. If we are opening, it slides. upward into view. If we are closing, it. slides down and out of frame. At the. same time, the product banner fades in. or out behind it with a slight delay so. it feels layered. And after that, we. call our two helpers. Animate side items. to fade the surrounding slides in or out. and animate controller transition to. morph the joystick into the close. button. Finally, we use a short timeout. to reset the flags, marking the. animations as complete and flipping the. open state. This ensures everything is. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/X7cIlzO3Htw_1174.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">synced and ready for the next. interaction. And now to bring it all. together, we have initialize slider. function. This function sets up the. slider when the page first loads. We. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">loop through a range from negative. buffer size to positive buffer size. adding extra slides on both sides of the. active product. This creates the. illusion. Then we call all the update. functions once so the slider positions,. product name, model content and button. states are perfectly synced with the. first product. The very last step is. attaching event listeners. We listen for. clicks on the previous and next buttons. to trigger navigation and we listen for. clicks on the controller inner pad to. toggle the model open and closed. Finally, we call initialize slider. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">function to render everything into. place. And that's the full JavaScript. With these functions working together,. we have built a complete infinite. product slider powered by GSAP. animations with a controller that. doubles as both a navigator and a. preview toggle and a model that syncs. seamlessly with the product data. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Hope you found the video helpful. See. you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=X7cIlzO3Htw">https://www.youtube.com/watch?v=X7cIlzO3Htw</a></p><p>A minimal infinite product slider page built with HTML, CSS, and JavaScript, powered by GSAP animations. The slider works like a game controller and smoothly morphs into a full product modal with preview and background transitions.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Damso</p><p>Website: <a href="https://damso.com/">https://damso.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:36 HTML</p><p>4:01 CSS</p><p>9:27 Products Data</p><p>10:23 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/X7cIlzO3Htw/hqdefault.jpg"/>
      <pubDate>2025-10-01T15:30:19.000Z</pubDate>
    </item><item>
      <title><![CDATA[The GSAP Hover Animation That Wasn’t Supposed To Hit This Hard]]></title>
      <link>https://www.youtube.com/watch?v=Gy9IS0Y6dy0</link>
      <itunes:title><![CDATA[The GSAP Hover Animation That Wasn’t Supposed To Hit This Hard]]></itunes:title>
      <itunes:author><![CDATA[Codegrid]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/Gy9IS0Y6dy0/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=Gy9IS0Y6dy0">https://www.youtube.com/watch?v=Gy9IS0Y6dy0</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何從零開始重建令人印象深刻的網頁互動效果，提升網站的視覺吸引力與使用者體驗。</li> <li>掌握使用純 HTML、CSS 和 JavaScript（搭配 GSAP 動畫庫）創建複雜動畫的實用技巧，加強前端開發能力。</li> <li>了解響應式設計的實用策略，使網頁在不同裝置上（包括行動裝置）都能良好呈現，確保設計的全面性。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片簡介與互動概念</h2> <p> Just last week on September 12th, an incredible portfolio was featured as「每日之選」在 Awwwards 網站上。作者在瀏覽該網站時，特別被其「作品」頁面所吸引。該頁面以<strong>創新的方塊式設計</strong>展示專案類別，這些方塊類似於文件夾介面。當使用者將滑鼠懸停在任一個方塊上時，其他文件夾會輕微淡出，而選中的文件夾則會突顯出來。同時，三個預覽圖片會從該文件夾內部向上動畫顯示，提供專案視覺效果的快速一瞥。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_25.jpg" /></p> <p> 作者對這種<strong>乾淨且流暢的互動</strong>印象深刻，並認為這個概念太好而不能不嘗試自己重建。因此，他僅使用 HTML、CSS、JavaScript 和 <strong>GSAP 動畫庫</strong>，成功地搭建了一個類似的互動區塊。這種動畫效果僅由兩個簡單的 JavaScript 事件（`mouseenter` 和 `mouseleave`）和 GSAP 處理所有動作所驅動。在本影片中，作者將逐步引導觀眾如何從頭開始使用純 JavaScript 和 GSAP 重現這種互動效果。 </p> <hr /> <h2>HTML 結構建置</h2> <p> 作者首先從 <strong>HTML 結構</strong>開始。頁面頂部添加了一個簡單的導覽列以提供頁面結構，這是可選的。接著創建了一個名為 `folders` 的包裝 `div`，它將作為主要容器，容納所有文件夾式區塊並佔據全螢幕，所有內容都將堆疊在底部。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_100.jpg" /></p> <p> 依據原始範例，總共有六個文件夾，因此作者將其分成三列，每列包含兩個文件夾。他首先添加一個名為 `row` 的 `div`，其中包含一個代表文件夾卡片的 `folder` 區塊。每個文件夾都分為兩個主要部分：`folder-preview` 用於放置圖片，以及 `folder-wrapper` 用於放置所有文字內容。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_130.jpg" /></p> <p> 在 `folder-preview` 內部，作者添加了三張圖片，每張都包裹在各自的 `folder-preview-image` 中。在 `folder-wrapper` 內部，包含兩個元素：一個是顯示文件夾編號的段落 `folder-index`，另一個是使用 `h1` 標籤顯示文件夾標題的 `folder-name`。這就是一個文件夾的完整結構。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_160.jpg" /></p> <p> 接著，作者只需複製並貼上該文件夾一次以完成該列，然後再重複整個列結構兩次以創建第二和第三列。每個文件夾都獲得不同的內容和圖片。為了實現視覺上的多樣性，作者還為每個文件夾添加了如 `variant-1`、`variant-2` 和 `variant-3` 的額外類別，用於為每張卡片分配不同的背景顏色，這與原始網站為每個文件夾提供不同視覺處理的方式相似。這些類別將在後續的 CSS 中用於應用不同的顏色。至此，基礎的 HTML 結構已經完成。 </p> <hr /> <h2>CSS 樣式與佈局</h2> <p> 在 CSS 部分，作者首先從 Google Fonts 導入了兩種字體：DM Sans 用於標題，DM Mono 用於較小的標籤文字，這為佈局帶來了簡潔現代的美感。接著，他設定了一些根級的 <strong>CSS 變數</strong>，包括背景色、前景文字色，以及三種不同文件夾變體（黃色、淺灰色、深灰色）的顏色，還額外定義了文件夾<strong>停用狀態</strong>下的柔和背景色和靜音文字色。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_235.jpg" /></p> <p> 隨後，作者進行了快速的全域重設，移除了預設的邊距和內邊距，並將 `border-box` 應用於所有元素以保持尺寸一致。接著，他樣式化了 `body`，賦予其柔和的背景色，並全域應用了前景文字色。對於圖片，作者確保它們始終填充容器並裁剪為正確的長寬比，以保持視覺平衡。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_270.jpg" /></p> <p> 在排版方面，標題使用 DM Sans 字體，具備粗體、超大樣式和更緊湊的行高。段落則設定為 DM Mono 字體，大寫且略小，使其更像 UI 標籤。文字和段落都應用了平滑的顏色轉換，以便日後在懸停時可以進行狀態動畫。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_305.jpg" /></p> <p> 接下來，作者樣式化了頂部導覽列，將其定位在頁面頂部並全寬顯示，並在邊緣留有間距。他使用 Flexbox 來間隔兩行文字。對於主要部分，即 `folders` 容器，它被設定為佔據全螢幕高度，並將內容對齊到頁面底部。它使用 Flexbox 的欄（column）佈局垂直堆疊其子元素，並隱藏任何溢出以保持佈局整潔。該容器內的每一列都被樣式化為水平排列，再次使用 Flexbox 使文件夾並排對齊。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_360.jpg" /></p> <p> 針對文件夾本身，每個文件夾都採用相對定位，在行內佔據相等空間，並設定固定高度。作者在這裡設定固定高度是為了更輕鬆地處理內部佈局，尤其是在不同螢幕尺寸下進行縮放時。在第二列中，他稍微調整了大小，使一個文件夾佔用兩倍空間，另一個佔用三倍，以打破均勻性並增加視覺節奏。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_390.jpg" /></p> <p> 對於圖片預覽部分，每個 `folder-preview` 都採用絕對定位並覆蓋文件夾的整個高度。其中，每個圖片包裝器都垂直堆疊在中心並均勻分佈。作者將每張圖片沿水平軸定位，一張靠左、一張居中、一張靠右，以在懸停時創建<strong>分層顯示效果</strong>。同時，他為每張圖片設定了 `transform-origin`，以便稍後在使用 GSAP 進行動畫時獲得更平滑、更受控的旋轉。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_425.jpg" /></p> <p> 接著，作者樣式化了容納文字的 `folder-wrapper`。它採用相對定位並填充整個文件夾空間，並添加了 `will-change: transform` 以優化後續懸停動畫的性能。隨後，他定義了 `folder-index`，這是顯示在標籤內部的數字標籤，設定了寬度和內邊距。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_455.jpg" /></p> <p> 然後，作者使用偽元素在索引的右側添加了一個<strong>自定義形狀</strong>，創造出文件夾標籤般的側切口。這個形狀被設置為緊鄰索引，並使用 `clip-path` 進行塑形。他特別調整了其高度和位置，以確保它始終與索引齊平，避免任何不需要的視覺間隙。之後，他樣式化了 `folder-name`，這是標題區域，將文字對齊頂部並帶有內邊距。索引、切口和名稱都應用了平滑的背景過渡，確保在懸停狀態下改變顏色變體時，所有內容都能乾淨地淡入淡出。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_495.jpg" /></p> <p> 接下來，作者應用了顏色變體。每個文件夾都根據其 `variant-1`、`variant-2` 和 `variant-3` 等類別，為索引、切口和文件夾名稱部分應用不同的背景顏色。他也定義了<strong>停用狀態</strong>：當文件夾變為非活動狀態時，其背景色會變柔和，文字顏色會使用先前定義的自定義變數淡出。這使得懸停的文件夾能夠突顯，而其他文件夾則在視覺上退後。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_525.jpg" /></p> <p> 最後，在 CSS 部分，作者討論了行的定位，這非常重要。每一行都使用不同的底部偏移量略微向下推移。第一行推移最遠，第二行少一些，第三行推移最少。這種堆疊創造了優美的<strong>文件夾重疊效果</strong>，這不僅使佈局感覺更自然，而且也為每個文件夾在懸停時稍微向上滑動創造了足夠的呼吸空間。 </p> <hr /> <h2>響應式設計</h2> <p> 在針對小型螢幕的媒體查詢中，作者實施了多項<strong>響應式調整</strong>。他縮小了字體大小以保持可讀性，所有文件夾列都垂直堆疊而不是水平排列，使佈局更適合行動裝置。此外，由於空間有限時預覽圖片效果不佳，作者在小型螢幕上完全隱藏了文件夾預覽。文件夾名稱在行動裝置上獲得更多內邊距以保持平衡。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_580.jpg" /></p> <p> 一個小細節是，在小型螢幕上，作者還交換了第二列中 `variant-2` 和 `variant-3` 的背景顏色，這只是一個視覺調整，旨在使顏色在垂直佈局中流暢呈現。至此，CSS 設置完成，包含乾淨且響應式的佈局以及所有必要的狀態和結構。 </p> <hr /> <h2>JavaScript 動畫準備</h2> <p> 影片的最後，作者開始準備 JavaScript 部分，以連接動畫功能。他首先導入了 <strong>GSAP 動畫庫</strong>，這將提供對轉換的精確控制，無論是文件夾懸停時的動畫還是重置回原始狀態。接著，他從 DOM 中獲取了兩組元素：一是所有文件夾元素列表，這些是頁面上主要互動的區塊。 </p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Just last week on September 12th, this. incredible portfolio was featured as. site of the day on awards. While. browsing through it, this page in. particular really stood out to me, the. work page. It showcased project. categories in a really fresh way using. these blocks that mimic sort of. folder-like interface. And here's the. cool part. When you hover over any one. of them, the rest of the folders gently. fade back, almost like they are. inactive, while the hovered folder pops. into focus. At the same time, three. preview images animate upward from. inside it, giving you a quick glimpse of. the project visuals. It's a super clean. interaction, and honestly, the concept. felt too good not to try rebuilding. myself. So, just a couple days ago, I. put together a similar interactive. section using nothing but HTML, CSS,. JavaScript, and Gab. It's always. surprising how much cool stuff you can. build without relying on any heavy. frameworks or over complicating things. In fact, the entire animation is driven. by just two simple JavaScript events,. mouse enter and mouse leave with Gap. handling all the motion. In today's. video, I'll walk you through how to. recreate this kind of interaction from. scratch step by step using plain. JavaScript and a bit of GSAP. If you. find these kinds of ribbles helpful,. make sure to drop a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_88.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=88" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, let's start with the HTML. At. the very top, I'm adding a simple nav. just to give the page a bit of. structure. This part is totally. optional, but I've added two placeholder. lines of text for now. Next, I'm. creating a wrapper div with the class. name folders. This will act as the main. container that holds all our folder-l. like blocks and it will span the full. screen. All of our content will sit. within this section stacked toward the. bottom. Now, if you look back at the. original demo, we need a total of six. folders. So, to lay that out cleanly, we. are splitting it into three rows with. two folders per row. To start, I'm. adding a div with the class name row. Inside that, I'm creating a single. folder block which will represent one of. the folder cards. Each folder is divided. into two main parts. The first part is. called folder preview. This is where. we'll hold our images. The second part. is called folder wrapper. And this is. where all the text goes. Inside the. folder preview, I'll add three images. Each one sits inside its own wrapper. with the class folder preview image. Inside folder wrapper, we have got two. elements. One is folder index, which is. just a paragraph tag that shows the. folder number. And the other is the. folder name, which uses an H1 tag to. display the folder title. That's the. full structure for one folder. From. there, I just copy and paste the folder. once more inside the same row and then. repeat that whole row structure two more. times to create the second and third. rows. Each folder gets different content. and images. Now, if you look closely, I. also added an extra class to each. folder, something like variant 1, 2, and. three. This is just a way for us to. assign different background colors to. each card, similar to how the original. site had different visual treatments for. each folder. So folder 1 and five use. variant one. Folder 2, 3, and six use. variant 2. And folder four uses variant. 3. We'll use those class names later in. CSS to apply different colors to each. folder. And that's pretty much it for. the HTML. The base structure is now in. place. Next, we'll move on to the. styling and start shipping everything. visually with CSS. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_208.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=208" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">You can see I've already imported two. fonts from Google Fonts. DM Sense for. the headings and DM mono for the smaller. label text. These give the layout a. clean modern aesthetic that fits well. with the overall minimal feel. Next, I. also set up some root level CSS. variables. We have got one for the. background, one for the foreground text. color, and then three for the different. folder variants, yellow, light gray, and. a darker gray. I've also added two extra. ones for when a folder is disabled, just. a softer background and muted text. color. After that, I'm doing a quick. global reset, removing default margin. and padding, and applying border box to. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">all elements to keep the sizing. consistent. Then I'm styling the body,. giving it a soft background color, and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">applying our foreground text color. globally. For the images, I making sure they. always fill their containers and stay. cropped to the right aspect ratio, so. everything looks balanced regardless of. the screen size. Now, for the. typography, headings use DMs with a bold. oversized style and a tighter line. height. Paragraphs are set in DM mono. uppercased and slightly smaller just to. feel more like UI labels. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_275.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Both have a smooth color transition. applied so we can animate those states. later on hover. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Next, let's style the top. Now it's. positioned at the top of the page and. stretched full width with some spacing. around the edges. We are using flexbox. to space out the two lines of text. one. on the left and one on the right. Now. for the main section, the folders. container. This is set to take up the. full screen height and it aligns the. content toward the bottom of the page. We are stacking its children vertically. using column flex layout and we are. hiding any overflow just to keep the. layout clean. Each row inside this. container is styled to sit horizontally. We are using flexbox again to line up. the folder side by side. Now for the. folder itself, this is where the real. interaction lives. Each folder is. relatively positioned, takes up equal. space inside the row, and is given a. fixed height. I'm setting the height to. a specific value here because it makes. handling the inner layout way easier,. especially when scaling across different. screen sizes. Inside the second row,. I've adjusted the sizing a bit, giving. one folder twice the space and the other. three times just to break the uniformity. and add some visual rhythm to the. layout. Now, for the image previews,. each folder preview is absolutely. positioned and covers the full height of. the folder. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_353.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Inside that each image wrapper is. stacked vertically at the center and. sized evenly. We have also positioned each image along. the horizontal axis. One toward the. left, one in the center, and one on the. right to create that layered reveal. effect when hovering. I'm also setting. the transform origin for each one. That. way, we get smoother, more controlled. rotations later when animating with Gap. Next, we are styling the folder wrapper,. which holds the text. It's relatively. positioned and fills the full folder. space. And I've added will change. transform here to optimize performance. for the hover animation coming later. Now we define the folder index. This is. the number label that appears inside the. tab. It's given a width and some. internal padding. Then we add a custom shape on the right. side of that index using a pseudo. element. This is what creates that side. notch giving it that folder tab-like. feel. We are setting it to sit just next. to the index and shaping it with a clip. path. Now technically you could use full. height here with left 100% but I found. that on some screen sizes it leaves a. small visual cap underneath and on the. side. So I'm intentionally giving it. just a bit of extra height and pulling. it to a bit more left to make sure it. always sits flush with no unwanted white. space. After that we style the folder. name. This is the heading area. It. aligns the text at the top with subside. padding. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_437.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All three the index the notch and the. name are given smooth background. transitions. That way when we change. variants on hover states later. everything fades cleanly. Now we apply color variants. Each folder. uses a class like variant 1 2 and three. Based on the class we apply different. background colors to the index the notch. and the folder name section. We also. define the disabled state. When a folder. becomes inactive, its background color. softens and its text color fades using. the custom variables we defined earlier. This is what lets the hover folder pop. while the others fall back visually. Now. we move on to positioning the rows. This. part's important. Each row is slightly. pushed downward using a different bottom. offset. The first row is pushed the. furthest down, the second a bit less,. and the third one just a slight. This. tagging creates a nice folder-like. overlap which not only helps the layout. feel more organic but also creates just. enough breathing room for each folder to. slide upward slightly during hover. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Finally, let's talk about. responsiveness. Inside of media query. for smaller screens, I'm scaling down. the font size to keep things readable. All rows tag vertically instead of. horizontally, making the layout mobile. friendly. I'm also adding the folder previews. entirely on smaller screens since they. don't really add much when there is. limited space. The folder name gets a little more. padding on mobile just to keep things. balanced. One small detail here on. smaller screens. I'm also swapping the. background colors on variant two and. three inside the second row. That's just. a visual adjustment to keep the colors. flowing nicely in the vertical layout. And that's it for the CSS. We have got a. clean responsive layout with all the. necessary states and structure in place. And now we are ready to wire up the. animation using JavaScript. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_538.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=538" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm importing gap, which is the. animation library we'll be using to. handle all the motion. This is what. gives us precise control over the. transitions, both when a folder is over. and when it resets back. Then I'm. grabbing two sets of elements from the. DOM. One is a list of all the folder. elements. These are the main interactive. blocks on the page. And the other is a. list of all the folder wrapper elements. These are the inner containers that hold. the index and the folder title. We'll be. animating these wrappers directly to. create that upward nudge on hover. Next,. I'm setting a flag called is mobile. We. are checking if the current screen width. is below a certain break point. In this. case, 1,000 pixels. This will help us. disable hover interactions on smaller. screens for the touch devices where. those animations aren't really. necessary. After that, I'm creating a. utility function called set initial. positions. Inside this, I'm using Gap's. set method to define the starting by. position for every folder wrapper. So on. mobile we set it to zero meaning no. offset but on larger screens we push it. down slightly just a small vertical. shift so that on hover we can animate it. back up and make it feel like it rises. into focus. This offset is part of that. polished folder interaction where the. hover folder lifts slightly from the. stack while the others fade back. We'll. be calling this function both on load. and later on resize to make sure the. layout always stays synced with the. current screen size. Next let's set up. the hover interaction. We are looping. through all the folders using for each. and for each one we grab all the folder. preview image elements inside it. These. are three image thumbnails that will. animate upward when the folder is over. Now we attach a mouse enter event to. each folder. This means when you hover. over a folder, this entire block of code. will run. But before we do anything, we. check if we are on a mobile screen. If. we are, we return early and skip the. hover effect completely just to keep. things clean and avoid unnecessary. animations on touch devices. Then we. move on to the interaction itself. Inside the event, we loop through all. the folders again. And for each one that. isn't the folder currently being. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">hovered, we apply a disabled class. This. is what fades the color out on the other. folders, making them fall into. background visually and lets the. hoverward one pop into focus just like. in the original concept. Once that's. done, we animate the folder wrapper of. the hoverward folder. We are using gaps. 2 method to move the wrapper upward to. zero which brings it to its natural. position essentially undoing the. downward offset we applied earlier using. set initial positions. The animation is. short and springy thanks to the easing. function back out. This gives it a soft. lift and a nice responsive feel. Next,. we animate the preview images inside the. hoverboard folder. We loop through each. image and assign a random rotation to it. based on its index. The first image gets. a random angle between minus 20 and. minus 10. The second one is somewhere. between minus 10 and 10. And the third. one gets a positive tilt between 10 and. 20. This creates a natural fan-like. spread where each image tilts in a. slightly different direction. We also. animate the Y position moving them. upward of their base by a set amount so. they look like they are sliding out of. the folder in real time. Each image is. also delayed slightly based on its index. so they don't all move at once. This. staggered timing makes the animation. feel more dynamic and less robotic. Altogether, this gives us that polished. horror experience where the folder rises. into view and the others fade out and a. set of preview images smoothly lift and. rotate into place. Now, let's handle. what happens when you move your mouse. away from a folder. Just like before, we. are still inside the loop. And now, we. are attaching a mouse event to each. folder. As always, we start by checking. if we are on mobile. If we are, we skip. everything here since the hover effect. isn't used on smaller screens. Now, when. the cursor leaves the folder, the first. thing we do is reset the state of all. the folders. We loop through them and. remove the disabled class, which brings. their original colors and styles back. into view. This way, once you stop. hovering, the layout returns to normal. and nothing stays dimmed. Next, we. animate the folder wrapper back down to. its original position. The same slight. offset we used earlier and set initial. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">positions. This gives that gentle deep. effect almost like the folder is. settling back into place. And finally,. we reset the preview images. Each one. animates back to its starting position,. sliding back to zero on the Y-axis and. resetting its rotation to a clean flat. angle. We also add a small delay for. each one, just like before, but this. time the delay is slightly longer, so. the animation feels a bit smoother as it. resets altogether. This gives us a clean. exit animation. The folder drops down,. the images fold back into place, and the. full layout fades back into its original. state, ready for the next interaction. All right, now let's wrap things up by. handling screen resizing and setting the. initial state. First, I'm adding an. event listener on resize. This means. whenever the browser window is resized,. we'll run a small block of logic to. update the layout based on the new. screen size. Inside that listener, we. check the current screen width again,. just like we did earlier, we compare it. to our mobile break point, and if the. value has changed, we update the flag. This is important because we only want. to rerun the layout logic when we are. actually crossed over that threshold. For example, going from desktop to. mobile view or vice versa. If that. change is detected, we call our set. initial positions function again just to. reapply the correct offset for each. folder wrapper based on the new screen. mode. Then as a safety measure, we reset. all the folders removing any disabled. class that may have been left over from. a previous over interaction. And. finally, we select all the preview. images and reset their animation state. as well, bringing them back to their. original position and zero rotation. This ensures that everything stays. perfectly in sync no matter how the. window is resized. And at the very end. of the script, the call set initial. positions once when the page first. loads. This applies that small vertical. offset to all the folder wrappers right. from the start. So that the hover effect. works exactly as intended the moment. user interacts with it. And that's the. full build. A simple but really polished. interaction using just HTML, CSS,. JavaScript, and a bit of GAP. Hope you. found the video helpful. See you in the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=Gy9IS0Y6dy0">https://www.youtube.com/watch?v=Gy9IS0Y6dy0</a></p><p>One hover. Three images. A quiet little animation that does way too much. Built with HTML, CSS, JavaScript, and GSAP. All it takes is one hover to shift the entire mood of the layout. This is how.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Wildy Riftian</p><p>Website: <a href="https://www.wildyriftian.com/">https://www.wildyriftian.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:28 HTML</p><p>3:28 CSS</p><p>8:58 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/Gy9IS0Y6dy0/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=Gy9IS0Y6dy0">https://www.youtube.com/watch?v=Gy9IS0Y6dy0</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何從零開始重建令人印象深刻的網頁互動效果，提升網站的視覺吸引力與使用者體驗。</li> <li>掌握使用純 HTML、CSS 和 JavaScript（搭配 GSAP 動畫庫）創建複雜動畫的實用技巧，加強前端開發能力。</li> <li>了解響應式設計的實用策略，使網頁在不同裝置上（包括行動裝置）都能良好呈現，確保設計的全面性。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片簡介與互動概念</h2> <p> Just last week on September 12th, an incredible portfolio was featured as「每日之選」在 Awwwards 網站上。作者在瀏覽該網站時，特別被其「作品」頁面所吸引。該頁面以<strong>創新的方塊式設計</strong>展示專案類別，這些方塊類似於文件夾介面。當使用者將滑鼠懸停在任一個方塊上時，其他文件夾會輕微淡出，而選中的文件夾則會突顯出來。同時，三個預覽圖片會從該文件夾內部向上動畫顯示，提供專案視覺效果的快速一瞥。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_25.jpg" /></p> <p> 作者對這種<strong>乾淨且流暢的互動</strong>印象深刻，並認為這個概念太好而不能不嘗試自己重建。因此，他僅使用 HTML、CSS、JavaScript 和 <strong>GSAP 動畫庫</strong>，成功地搭建了一個類似的互動區塊。這種動畫效果僅由兩個簡單的 JavaScript 事件（`mouseenter` 和 `mouseleave`）和 GSAP 處理所有動作所驅動。在本影片中，作者將逐步引導觀眾如何從頭開始使用純 JavaScript 和 GSAP 重現這種互動效果。 </p> <hr /> <h2>HTML 結構建置</h2> <p> 作者首先從 <strong>HTML 結構</strong>開始。頁面頂部添加了一個簡單的導覽列以提供頁面結構，這是可選的。接著創建了一個名為 `folders` 的包裝 `div`，它將作為主要容器，容納所有文件夾式區塊並佔據全螢幕，所有內容都將堆疊在底部。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_100.jpg" /></p> <p> 依據原始範例，總共有六個文件夾，因此作者將其分成三列，每列包含兩個文件夾。他首先添加一個名為 `row` 的 `div`，其中包含一個代表文件夾卡片的 `folder` 區塊。每個文件夾都分為兩個主要部分：`folder-preview` 用於放置圖片，以及 `folder-wrapper` 用於放置所有文字內容。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_130.jpg" /></p> <p> 在 `folder-preview` 內部，作者添加了三張圖片，每張都包裹在各自的 `folder-preview-image` 中。在 `folder-wrapper` 內部，包含兩個元素：一個是顯示文件夾編號的段落 `folder-index`，另一個是使用 `h1` 標籤顯示文件夾標題的 `folder-name`。這就是一個文件夾的完整結構。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_160.jpg" /></p> <p> 接著，作者只需複製並貼上該文件夾一次以完成該列，然後再重複整個列結構兩次以創建第二和第三列。每個文件夾都獲得不同的內容和圖片。為了實現視覺上的多樣性，作者還為每個文件夾添加了如 `variant-1`、`variant-2` 和 `variant-3` 的額外類別，用於為每張卡片分配不同的背景顏色，這與原始網站為每個文件夾提供不同視覺處理的方式相似。這些類別將在後續的 CSS 中用於應用不同的顏色。至此，基礎的 HTML 結構已經完成。 </p> <hr /> <h2>CSS 樣式與佈局</h2> <p> 在 CSS 部分，作者首先從 Google Fonts 導入了兩種字體：DM Sans 用於標題，DM Mono 用於較小的標籤文字，這為佈局帶來了簡潔現代的美感。接著，他設定了一些根級的 <strong>CSS 變數</strong>，包括背景色、前景文字色，以及三種不同文件夾變體（黃色、淺灰色、深灰色）的顏色，還額外定義了文件夾<strong>停用狀態</strong>下的柔和背景色和靜音文字色。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_235.jpg" /></p> <p> 隨後，作者進行了快速的全域重設，移除了預設的邊距和內邊距，並將 `border-box` 應用於所有元素以保持尺寸一致。接著，他樣式化了 `body`，賦予其柔和的背景色，並全域應用了前景文字色。對於圖片，作者確保它們始終填充容器並裁剪為正確的長寬比，以保持視覺平衡。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_270.jpg" /></p> <p> 在排版方面，標題使用 DM Sans 字體，具備粗體、超大樣式和更緊湊的行高。段落則設定為 DM Mono 字體，大寫且略小，使其更像 UI 標籤。文字和段落都應用了平滑的顏色轉換，以便日後在懸停時可以進行狀態動畫。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_305.jpg" /></p> <p> 接下來，作者樣式化了頂部導覽列，將其定位在頁面頂部並全寬顯示，並在邊緣留有間距。他使用 Flexbox 來間隔兩行文字。對於主要部分，即 `folders` 容器，它被設定為佔據全螢幕高度，並將內容對齊到頁面底部。它使用 Flexbox 的欄（column）佈局垂直堆疊其子元素，並隱藏任何溢出以保持佈局整潔。該容器內的每一列都被樣式化為水平排列，再次使用 Flexbox 使文件夾並排對齊。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_360.jpg" /></p> <p> 針對文件夾本身，每個文件夾都採用相對定位，在行內佔據相等空間，並設定固定高度。作者在這裡設定固定高度是為了更輕鬆地處理內部佈局，尤其是在不同螢幕尺寸下進行縮放時。在第二列中，他稍微調整了大小，使一個文件夾佔用兩倍空間，另一個佔用三倍，以打破均勻性並增加視覺節奏。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_390.jpg" /></p> <p> 對於圖片預覽部分，每個 `folder-preview` 都採用絕對定位並覆蓋文件夾的整個高度。其中，每個圖片包裝器都垂直堆疊在中心並均勻分佈。作者將每張圖片沿水平軸定位，一張靠左、一張居中、一張靠右，以在懸停時創建<strong>分層顯示效果</strong>。同時，他為每張圖片設定了 `transform-origin`，以便稍後在使用 GSAP 進行動畫時獲得更平滑、更受控的旋轉。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_425.jpg" /></p> <p> 接著，作者樣式化了容納文字的 `folder-wrapper`。它採用相對定位並填充整個文件夾空間，並添加了 `will-change: transform` 以優化後續懸停動畫的性能。隨後，他定義了 `folder-index`，這是顯示在標籤內部的數字標籤，設定了寬度和內邊距。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_455.jpg" /></p> <p> 然後，作者使用偽元素在索引的右側添加了一個<strong>自定義形狀</strong>，創造出文件夾標籤般的側切口。這個形狀被設置為緊鄰索引，並使用 `clip-path` 進行塑形。他特別調整了其高度和位置，以確保它始終與索引齊平，避免任何不需要的視覺間隙。之後，他樣式化了 `folder-name`，這是標題區域，將文字對齊頂部並帶有內邊距。索引、切口和名稱都應用了平滑的背景過渡，確保在懸停狀態下改變顏色變體時，所有內容都能乾淨地淡入淡出。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_495.jpg" /></p> <p> 接下來，作者應用了顏色變體。每個文件夾都根據其 `variant-1`、`variant-2` 和 `variant-3` 等類別，為索引、切口和文件夾名稱部分應用不同的背景顏色。他也定義了<strong>停用狀態</strong>：當文件夾變為非活動狀態時，其背景色會變柔和，文字顏色會使用先前定義的自定義變數淡出。這使得懸停的文件夾能夠突顯，而其他文件夾則在視覺上退後。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_525.jpg" /></p> <p> 最後，在 CSS 部分，作者討論了行的定位，這非常重要。每一行都使用不同的底部偏移量略微向下推移。第一行推移最遠，第二行少一些，第三行推移最少。這種堆疊創造了優美的<strong>文件夾重疊效果</strong>，這不僅使佈局感覺更自然，而且也為每個文件夾在懸停時稍微向上滑動創造了足夠的呼吸空間。 </p> <hr /> <h2>響應式設計</h2> <p> 在針對小型螢幕的媒體查詢中，作者實施了多項<strong>響應式調整</strong>。他縮小了字體大小以保持可讀性，所有文件夾列都垂直堆疊而不是水平排列，使佈局更適合行動裝置。此外，由於空間有限時預覽圖片效果不佳，作者在小型螢幕上完全隱藏了文件夾預覽。文件夾名稱在行動裝置上獲得更多內邊距以保持平衡。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_580.jpg" /></p> <p> 一個小細節是，在小型螢幕上，作者還交換了第二列中 `variant-2` 和 `variant-3` 的背景顏色，這只是一個視覺調整，旨在使顏色在垂直佈局中流暢呈現。至此，CSS 設置完成，包含乾淨且響應式的佈局以及所有必要的狀態和結構。 </p> <hr /> <h2>JavaScript 動畫準備</h2> <p> 影片的最後，作者開始準備 JavaScript 部分，以連接動畫功能。他首先導入了 <strong>GSAP 動畫庫</strong>，這將提供對轉換的精確控制，無論是文件夾懸停時的動畫還是重置回原始狀態。接著，他從 DOM 中獲取了兩組元素：一是所有文件夾元素列表，這些是頁面上主要互動的區塊。 </p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Just last week on September 12th, this. incredible portfolio was featured as. site of the day on awards. While. browsing through it, this page in. particular really stood out to me, the. work page. It showcased project. categories in a really fresh way using. these blocks that mimic sort of. folder-like interface. And here's the. cool part. When you hover over any one. of them, the rest of the folders gently. fade back, almost like they are. inactive, while the hovered folder pops. into focus. At the same time, three. preview images animate upward from. inside it, giving you a quick glimpse of. the project visuals. It's a super clean. interaction, and honestly, the concept. felt too good not to try rebuilding. myself. So, just a couple days ago, I. put together a similar interactive. section using nothing but HTML, CSS,. JavaScript, and Gab. It's always. surprising how much cool stuff you can. build without relying on any heavy. frameworks or over complicating things. In fact, the entire animation is driven. by just two simple JavaScript events,. mouse enter and mouse leave with Gap. handling all the motion. In today's. video, I'll walk you through how to. recreate this kind of interaction from. scratch step by step using plain. JavaScript and a bit of GSAP. If you. find these kinds of ribbles helpful,. make sure to drop a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_88.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=88" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, let's start with the HTML. At. the very top, I'm adding a simple nav. just to give the page a bit of. structure. This part is totally. optional, but I've added two placeholder. lines of text for now. Next, I'm. creating a wrapper div with the class. name folders. This will act as the main. container that holds all our folder-l. like blocks and it will span the full. screen. All of our content will sit. within this section stacked toward the. bottom. Now, if you look back at the. original demo, we need a total of six. folders. So, to lay that out cleanly, we. are splitting it into three rows with. two folders per row. To start, I'm. adding a div with the class name row. Inside that, I'm creating a single. folder block which will represent one of. the folder cards. Each folder is divided. into two main parts. The first part is. called folder preview. This is where. we'll hold our images. The second part. is called folder wrapper. And this is. where all the text goes. Inside the. folder preview, I'll add three images. Each one sits inside its own wrapper. with the class folder preview image. Inside folder wrapper, we have got two. elements. One is folder index, which is. just a paragraph tag that shows the. folder number. And the other is the. folder name, which uses an H1 tag to. display the folder title. That's the. full structure for one folder. From. there, I just copy and paste the folder. once more inside the same row and then. repeat that whole row structure two more. times to create the second and third. rows. Each folder gets different content. and images. Now, if you look closely, I. also added an extra class to each. folder, something like variant 1, 2, and. three. This is just a way for us to. assign different background colors to. each card, similar to how the original. site had different visual treatments for. each folder. So folder 1 and five use. variant one. Folder 2, 3, and six use. variant 2. And folder four uses variant. 3. We'll use those class names later in. CSS to apply different colors to each. folder. And that's pretty much it for. the HTML. The base structure is now in. place. Next, we'll move on to the. styling and start shipping everything. visually with CSS. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_208.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=208" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">You can see I've already imported two. fonts from Google Fonts. DM Sense for. the headings and DM mono for the smaller. label text. These give the layout a. clean modern aesthetic that fits well. with the overall minimal feel. Next, I. also set up some root level CSS. variables. We have got one for the. background, one for the foreground text. color, and then three for the different. folder variants, yellow, light gray, and. a darker gray. I've also added two extra. ones for when a folder is disabled, just. a softer background and muted text. color. After that, I'm doing a quick. global reset, removing default margin. and padding, and applying border box to. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">all elements to keep the sizing. consistent. Then I'm styling the body,. giving it a soft background color, and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">applying our foreground text color. globally. For the images, I making sure they. always fill their containers and stay. cropped to the right aspect ratio, so. everything looks balanced regardless of. the screen size. Now, for the. typography, headings use DMs with a bold. oversized style and a tighter line. height. Paragraphs are set in DM mono. uppercased and slightly smaller just to. feel more like UI labels. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_275.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Both have a smooth color transition. applied so we can animate those states. later on hover. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Next, let's style the top. Now it's. positioned at the top of the page and. stretched full width with some spacing. around the edges. We are using flexbox. to space out the two lines of text. one. on the left and one on the right. Now. for the main section, the folders. container. This is set to take up the. full screen height and it aligns the. content toward the bottom of the page. We are stacking its children vertically. using column flex layout and we are. hiding any overflow just to keep the. layout clean. Each row inside this. container is styled to sit horizontally. We are using flexbox again to line up. the folder side by side. Now for the. folder itself, this is where the real. interaction lives. Each folder is. relatively positioned, takes up equal. space inside the row, and is given a. fixed height. I'm setting the height to. a specific value here because it makes. handling the inner layout way easier,. especially when scaling across different. screen sizes. Inside the second row,. I've adjusted the sizing a bit, giving. one folder twice the space and the other. three times just to break the uniformity. and add some visual rhythm to the. layout. Now, for the image previews,. each folder preview is absolutely. positioned and covers the full height of. the folder. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_353.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Inside that each image wrapper is. stacked vertically at the center and. sized evenly. We have also positioned each image along. the horizontal axis. One toward the. left, one in the center, and one on the. right to create that layered reveal. effect when hovering. I'm also setting. the transform origin for each one. That. way, we get smoother, more controlled. rotations later when animating with Gap. Next, we are styling the folder wrapper,. which holds the text. It's relatively. positioned and fills the full folder. space. And I've added will change. transform here to optimize performance. for the hover animation coming later. Now we define the folder index. This is. the number label that appears inside the. tab. It's given a width and some. internal padding. Then we add a custom shape on the right. side of that index using a pseudo. element. This is what creates that side. notch giving it that folder tab-like. feel. We are setting it to sit just next. to the index and shaping it with a clip. path. Now technically you could use full. height here with left 100% but I found. that on some screen sizes it leaves a. small visual cap underneath and on the. side. So I'm intentionally giving it. just a bit of extra height and pulling. it to a bit more left to make sure it. always sits flush with no unwanted white. space. After that we style the folder. name. This is the heading area. It. aligns the text at the top with subside. padding. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_437.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All three the index the notch and the. name are given smooth background. transitions. That way when we change. variants on hover states later. everything fades cleanly. Now we apply color variants. Each folder. uses a class like variant 1 2 and three. Based on the class we apply different. background colors to the index the notch. and the folder name section. We also. define the disabled state. When a folder. becomes inactive, its background color. softens and its text color fades using. the custom variables we defined earlier. This is what lets the hover folder pop. while the others fall back visually. Now. we move on to positioning the rows. This. part's important. Each row is slightly. pushed downward using a different bottom. offset. The first row is pushed the. furthest down, the second a bit less,. and the third one just a slight. This. tagging creates a nice folder-like. overlap which not only helps the layout. feel more organic but also creates just. enough breathing room for each folder to. slide upward slightly during hover. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Finally, let's talk about. responsiveness. Inside of media query. for smaller screens, I'm scaling down. the font size to keep things readable. All rows tag vertically instead of. horizontally, making the layout mobile. friendly. I'm also adding the folder previews. entirely on smaller screens since they. don't really add much when there is. limited space. The folder name gets a little more. padding on mobile just to keep things. balanced. One small detail here on. smaller screens. I'm also swapping the. background colors on variant two and. three inside the second row. That's just. a visual adjustment to keep the colors. flowing nicely in the vertical layout. And that's it for the CSS. We have got a. clean responsive layout with all the. necessary states and structure in place. And now we are ready to wire up the. animation using JavaScript. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_538.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=538" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm importing gap, which is the. animation library we'll be using to. handle all the motion. This is what. gives us precise control over the. transitions, both when a folder is over. and when it resets back. Then I'm. grabbing two sets of elements from the. DOM. One is a list of all the folder. elements. These are the main interactive. blocks on the page. And the other is a. list of all the folder wrapper elements. These are the inner containers that hold. the index and the folder title. We'll be. animating these wrappers directly to. create that upward nudge on hover. Next,. I'm setting a flag called is mobile. We. are checking if the current screen width. is below a certain break point. In this. case, 1,000 pixels. This will help us. disable hover interactions on smaller. screens for the touch devices where. those animations aren't really. necessary. After that, I'm creating a. utility function called set initial. positions. Inside this, I'm using Gap's. set method to define the starting by. position for every folder wrapper. So on. mobile we set it to zero meaning no. offset but on larger screens we push it. down slightly just a small vertical. shift so that on hover we can animate it. back up and make it feel like it rises. into focus. This offset is part of that. polished folder interaction where the. hover folder lifts slightly from the. stack while the others fade back. We'll. be calling this function both on load. and later on resize to make sure the. layout always stays synced with the. current screen size. Next let's set up. the hover interaction. We are looping. through all the folders using for each. and for each one we grab all the folder. preview image elements inside it. These. are three image thumbnails that will. animate upward when the folder is over. Now we attach a mouse enter event to. each folder. This means when you hover. over a folder, this entire block of code. will run. But before we do anything, we. check if we are on a mobile screen. If. we are, we return early and skip the. hover effect completely just to keep. things clean and avoid unnecessary. animations on touch devices. Then we. move on to the interaction itself. Inside the event, we loop through all. the folders again. And for each one that. isn't the folder currently being. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">hovered, we apply a disabled class. This. is what fades the color out on the other. folders, making them fall into. background visually and lets the. hoverward one pop into focus just like. in the original concept. Once that's. done, we animate the folder wrapper of. the hoverward folder. We are using gaps. 2 method to move the wrapper upward to. zero which brings it to its natural. position essentially undoing the. downward offset we applied earlier using. set initial positions. The animation is. short and springy thanks to the easing. function back out. This gives it a soft. lift and a nice responsive feel. Next,. we animate the preview images inside the. hoverboard folder. We loop through each. image and assign a random rotation to it. based on its index. The first image gets. a random angle between minus 20 and. minus 10. The second one is somewhere. between minus 10 and 10. And the third. one gets a positive tilt between 10 and. 20. This creates a natural fan-like. spread where each image tilts in a. slightly different direction. We also. animate the Y position moving them. upward of their base by a set amount so. they look like they are sliding out of. the folder in real time. Each image is. also delayed slightly based on its index. so they don't all move at once. This. staggered timing makes the animation. feel more dynamic and less robotic. Altogether, this gives us that polished. horror experience where the folder rises. into view and the others fade out and a. set of preview images smoothly lift and. rotate into place. Now, let's handle. what happens when you move your mouse. away from a folder. Just like before, we. are still inside the loop. And now, we. are attaching a mouse event to each. folder. As always, we start by checking. if we are on mobile. If we are, we skip. everything here since the hover effect. isn't used on smaller screens. Now, when. the cursor leaves the folder, the first. thing we do is reset the state of all. the folders. We loop through them and. remove the disabled class, which brings. their original colors and styles back. into view. This way, once you stop. hovering, the layout returns to normal. and nothing stays dimmed. Next, we. animate the folder wrapper back down to. its original position. The same slight. offset we used earlier and set initial. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">positions. This gives that gentle deep. effect almost like the folder is. settling back into place. And finally,. we reset the preview images. Each one. animates back to its starting position,. sliding back to zero on the Y-axis and. resetting its rotation to a clean flat. angle. We also add a small delay for. each one, just like before, but this. time the delay is slightly longer, so. the animation feels a bit smoother as it. resets altogether. This gives us a clean. exit animation. The folder drops down,. the images fold back into place, and the. full layout fades back into its original. state, ready for the next interaction. All right, now let's wrap things up by. handling screen resizing and setting the. initial state. First, I'm adding an. event listener on resize. This means. whenever the browser window is resized,. we'll run a small block of logic to. update the layout based on the new. screen size. Inside that listener, we. check the current screen width again,. just like we did earlier, we compare it. to our mobile break point, and if the. value has changed, we update the flag. This is important because we only want. to rerun the layout logic when we are. actually crossed over that threshold. For example, going from desktop to. mobile view or vice versa. If that. change is detected, we call our set. initial positions function again just to. reapply the correct offset for each. folder wrapper based on the new screen. mode. Then as a safety measure, we reset. all the folders removing any disabled. class that may have been left over from. a previous over interaction. And. finally, we select all the preview. images and reset their animation state. as well, bringing them back to their. original position and zero rotation. This ensures that everything stays. perfectly in sync no matter how the. window is resized. And at the very end. of the script, the call set initial. positions once when the page first. loads. This applies that small vertical. offset to all the folder wrappers right. from the start. So that the hover effect. works exactly as intended the moment. user interacts with it. And that's the. full build. A simple but really polished. interaction using just HTML, CSS,. JavaScript, and a bit of GAP. Hope you. found the video helpful. See you in the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=Gy9IS0Y6dy0">https://www.youtube.com/watch?v=Gy9IS0Y6dy0</a></p><p>One hover. Three images. A quiet little animation that does way too much. Built with HTML, CSS, JavaScript, and GSAP. All it takes is one hover to shift the entire mood of the layout. This is how.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Wildy Riftian</p><p>Website: <a href="https://www.wildyriftian.com/">https://www.wildyriftian.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:28 HTML</p><p>3:28 CSS</p><p>8:58 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/Gy9IS0Y6dy0/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=Gy9IS0Y6dy0">https://www.youtube.com/watch?v=Gy9IS0Y6dy0</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何從零開始重建令人印象深刻的網頁互動效果，提升網站的視覺吸引力與使用者體驗。</li> <li>掌握使用純 HTML、CSS 和 JavaScript（搭配 GSAP 動畫庫）創建複雜動畫的實用技巧，加強前端開發能力。</li> <li>了解響應式設計的實用策略，使網頁在不同裝置上（包括行動裝置）都能良好呈現，確保設計的全面性。</li> </ul> <hr /> <h1>摘要</h1> <h2>影片簡介與互動概念</h2> <p> Just last week on September 12th, an incredible portfolio was featured as「每日之選」在 Awwwards 網站上。作者在瀏覽該網站時，特別被其「作品」頁面所吸引。該頁面以<strong>創新的方塊式設計</strong>展示專案類別，這些方塊類似於文件夾介面。當使用者將滑鼠懸停在任一個方塊上時，其他文件夾會輕微淡出，而選中的文件夾則會突顯出來。同時，三個預覽圖片會從該文件夾內部向上動畫顯示，提供專案視覺效果的快速一瞥。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_25.jpg" /></p> <p> 作者對這種<strong>乾淨且流暢的互動</strong>印象深刻，並認為這個概念太好而不能不嘗試自己重建。因此，他僅使用 HTML、CSS、JavaScript 和 <strong>GSAP 動畫庫</strong>，成功地搭建了一個類似的互動區塊。這種動畫效果僅由兩個簡單的 JavaScript 事件（`mouseenter` 和 `mouseleave`）和 GSAP 處理所有動作所驅動。在本影片中，作者將逐步引導觀眾如何從頭開始使用純 JavaScript 和 GSAP 重現這種互動效果。 </p> <hr /> <h2>HTML 結構建置</h2> <p> 作者首先從 <strong>HTML 結構</strong>開始。頁面頂部添加了一個簡單的導覽列以提供頁面結構，這是可選的。接著創建了一個名為 `folders` 的包裝 `div`，它將作為主要容器，容納所有文件夾式區塊並佔據全螢幕，所有內容都將堆疊在底部。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_100.jpg" /></p> <p> 依據原始範例，總共有六個文件夾，因此作者將其分成三列，每列包含兩個文件夾。他首先添加一個名為 `row` 的 `div`，其中包含一個代表文件夾卡片的 `folder` 區塊。每個文件夾都分為兩個主要部分：`folder-preview` 用於放置圖片，以及 `folder-wrapper` 用於放置所有文字內容。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_130.jpg" /></p> <p> 在 `folder-preview` 內部，作者添加了三張圖片，每張都包裹在各自的 `folder-preview-image` 中。在 `folder-wrapper` 內部，包含兩個元素：一個是顯示文件夾編號的段落 `folder-index`，另一個是使用 `h1` 標籤顯示文件夾標題的 `folder-name`。這就是一個文件夾的完整結構。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_160.jpg" /></p> <p> 接著，作者只需複製並貼上該文件夾一次以完成該列，然後再重複整個列結構兩次以創建第二和第三列。每個文件夾都獲得不同的內容和圖片。為了實現視覺上的多樣性，作者還為每個文件夾添加了如 `variant-1`、`variant-2` 和 `variant-3` 的額外類別，用於為每張卡片分配不同的背景顏色，這與原始網站為每個文件夾提供不同視覺處理的方式相似。這些類別將在後續的 CSS 中用於應用不同的顏色。至此，基礎的 HTML 結構已經完成。 </p> <hr /> <h2>CSS 樣式與佈局</h2> <p> 在 CSS 部分，作者首先從 Google Fonts 導入了兩種字體：DM Sans 用於標題，DM Mono 用於較小的標籤文字，這為佈局帶來了簡潔現代的美感。接著，他設定了一些根級的 <strong>CSS 變數</strong>，包括背景色、前景文字色，以及三種不同文件夾變體（黃色、淺灰色、深灰色）的顏色，還額外定義了文件夾<strong>停用狀態</strong>下的柔和背景色和靜音文字色。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_235.jpg" /></p> <p> 隨後，作者進行了快速的全域重設，移除了預設的邊距和內邊距，並將 `border-box` 應用於所有元素以保持尺寸一致。接著，他樣式化了 `body`，賦予其柔和的背景色，並全域應用了前景文字色。對於圖片，作者確保它們始終填充容器並裁剪為正確的長寬比，以保持視覺平衡。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_270.jpg" /></p> <p> 在排版方面，標題使用 DM Sans 字體，具備粗體、超大樣式和更緊湊的行高。段落則設定為 DM Mono 字體，大寫且略小，使其更像 UI 標籤。文字和段落都應用了平滑的顏色轉換，以便日後在懸停時可以進行狀態動畫。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_305.jpg" /></p> <p> 接下來，作者樣式化了頂部導覽列，將其定位在頁面頂部並全寬顯示，並在邊緣留有間距。他使用 Flexbox 來間隔兩行文字。對於主要部分，即 `folders` 容器，它被設定為佔據全螢幕高度，並將內容對齊到頁面底部。它使用 Flexbox 的欄（column）佈局垂直堆疊其子元素，並隱藏任何溢出以保持佈局整潔。該容器內的每一列都被樣式化為水平排列，再次使用 Flexbox 使文件夾並排對齊。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_360.jpg" /></p> <p> 針對文件夾本身，每個文件夾都採用相對定位，在行內佔據相等空間，並設定固定高度。作者在這裡設定固定高度是為了更輕鬆地處理內部佈局，尤其是在不同螢幕尺寸下進行縮放時。在第二列中，他稍微調整了大小，使一個文件夾佔用兩倍空間，另一個佔用三倍，以打破均勻性並增加視覺節奏。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_390.jpg" /></p> <p> 對於圖片預覽部分，每個 `folder-preview` 都採用絕對定位並覆蓋文件夾的整個高度。其中，每個圖片包裝器都垂直堆疊在中心並均勻分佈。作者將每張圖片沿水平軸定位，一張靠左、一張居中、一張靠右，以在懸停時創建<strong>分層顯示效果</strong>。同時，他為每張圖片設定了 `transform-origin`，以便稍後在使用 GSAP 進行動畫時獲得更平滑、更受控的旋轉。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_425.jpg" /></p> <p> 接著，作者樣式化了容納文字的 `folder-wrapper`。它採用相對定位並填充整個文件夾空間，並添加了 `will-change: transform` 以優化後續懸停動畫的性能。隨後，他定義了 `folder-index`，這是顯示在標籤內部的數字標籤，設定了寬度和內邊距。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_455.jpg" /></p> <p> 然後，作者使用偽元素在索引的右側添加了一個<strong>自定義形狀</strong>，創造出文件夾標籤般的側切口。這個形狀被設置為緊鄰索引，並使用 `clip-path` 進行塑形。他特別調整了其高度和位置，以確保它始終與索引齊平，避免任何不需要的視覺間隙。之後，他樣式化了 `folder-name`，這是標題區域，將文字對齊頂部並帶有內邊距。索引、切口和名稱都應用了平滑的背景過渡，確保在懸停狀態下改變顏色變體時，所有內容都能乾淨地淡入淡出。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_495.jpg" /></p> <p> 接下來，作者應用了顏色變體。每個文件夾都根據其 `variant-1`、`variant-2` 和 `variant-3` 等類別，為索引、切口和文件夾名稱部分應用不同的背景顏色。他也定義了<strong>停用狀態</strong>：當文件夾變為非活動狀態時，其背景色會變柔和，文字顏色會使用先前定義的自定義變數淡出。這使得懸停的文件夾能夠突顯，而其他文件夾則在視覺上退後。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_525.jpg" /></p> <p> 最後，在 CSS 部分，作者討論了行的定位，這非常重要。每一行都使用不同的底部偏移量略微向下推移。第一行推移最遠，第二行少一些，第三行推移最少。這種堆疊創造了優美的<strong>文件夾重疊效果</strong>，這不僅使佈局感覺更自然，而且也為每個文件夾在懸停時稍微向上滑動創造了足夠的呼吸空間。 </p> <hr /> <h2>響應式設計</h2> <p> 在針對小型螢幕的媒體查詢中，作者實施了多項<strong>響應式調整</strong>。他縮小了字體大小以保持可讀性，所有文件夾列都垂直堆疊而不是水平排列，使佈局更適合行動裝置。此外，由於空間有限時預覽圖片效果不佳，作者在小型螢幕上完全隱藏了文件夾預覽。文件夾名稱在行動裝置上獲得更多內邊距以保持平衡。 </p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_580.jpg" /></p> <p> 一個小細節是，在小型螢幕上，作者還交換了第二列中 `variant-2` 和 `variant-3` 的背景顏色，這只是一個視覺調整，旨在使顏色在垂直佈局中流暢呈現。至此，CSS 設置完成，包含乾淨且響應式的佈局以及所有必要的狀態和結構。 </p> <hr /> <h2>JavaScript 動畫準備</h2> <p> 影片的最後，作者開始準備 JavaScript 部分，以連接動畫功能。他首先導入了 <strong>GSAP 動畫庫</strong>，這將提供對轉換的精確控制，無論是文件夾懸停時的動畫還是重置回原始狀態。接著，他從 DOM 中獲取了兩組元素：一是所有文件夾元素列表，這些是頁面上主要互動的區塊。 </p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Just last week on September 12th, this. incredible portfolio was featured as. site of the day on awards. While. browsing through it, this page in. particular really stood out to me, the. work page. It showcased project. categories in a really fresh way using. these blocks that mimic sort of. folder-like interface. And here's the. cool part. When you hover over any one. of them, the rest of the folders gently. fade back, almost like they are. inactive, while the hovered folder pops. into focus. At the same time, three. preview images animate upward from. inside it, giving you a quick glimpse of. the project visuals. It's a super clean. interaction, and honestly, the concept. felt too good not to try rebuilding. myself. So, just a couple days ago, I. put together a similar interactive. section using nothing but HTML, CSS,. JavaScript, and Gab. It's always. surprising how much cool stuff you can. build without relying on any heavy. frameworks or over complicating things. In fact, the entire animation is driven. by just two simple JavaScript events,. mouse enter and mouse leave with Gap. handling all the motion. In today's. video, I'll walk you through how to. recreate this kind of interaction from. scratch step by step using plain. JavaScript and a bit of GSAP. If you. find these kinds of ribbles helpful,. make sure to drop a like on the video. and subscribe to the channel if you. haven't already. And if you'd like to. access the source code for this project,. plus hundreds of other similar micro. projects and a brand new website. template every month, you can check out. the pro membership via the link in the. description. All right, let's jump into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_88.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=88" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, let's start with the HTML. At. the very top, I'm adding a simple nav. just to give the page a bit of. structure. This part is totally. optional, but I've added two placeholder. lines of text for now. Next, I'm. creating a wrapper div with the class. name folders. This will act as the main. container that holds all our folder-l. like blocks and it will span the full. screen. All of our content will sit. within this section stacked toward the. bottom. Now, if you look back at the. original demo, we need a total of six. folders. So, to lay that out cleanly, we. are splitting it into three rows with. two folders per row. To start, I'm. adding a div with the class name row. Inside that, I'm creating a single. folder block which will represent one of. the folder cards. Each folder is divided. into two main parts. The first part is. called folder preview. This is where. we'll hold our images. The second part. is called folder wrapper. And this is. where all the text goes. Inside the. folder preview, I'll add three images. Each one sits inside its own wrapper. with the class folder preview image. Inside folder wrapper, we have got two. elements. One is folder index, which is. just a paragraph tag that shows the. folder number. And the other is the. folder name, which uses an H1 tag to. display the folder title. That's the. full structure for one folder. From. there, I just copy and paste the folder. once more inside the same row and then. repeat that whole row structure two more. times to create the second and third. rows. Each folder gets different content. and images. Now, if you look closely, I. also added an extra class to each. folder, something like variant 1, 2, and. three. This is just a way for us to. assign different background colors to. each card, similar to how the original. site had different visual treatments for. each folder. So folder 1 and five use. variant one. Folder 2, 3, and six use. variant 2. And folder four uses variant. 3. We'll use those class names later in. CSS to apply different colors to each. folder. And that's pretty much it for. the HTML. The base structure is now in. place. Next, we'll move on to the. styling and start shipping everything. visually with CSS. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_208.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=208" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">You can see I've already imported two. fonts from Google Fonts. DM Sense for. the headings and DM mono for the smaller. label text. These give the layout a. clean modern aesthetic that fits well. with the overall minimal feel. Next, I. also set up some root level CSS. variables. We have got one for the. background, one for the foreground text. color, and then three for the different. folder variants, yellow, light gray, and. a darker gray. I've also added two extra. ones for when a folder is disabled, just. a softer background and muted text. color. After that, I'm doing a quick. global reset, removing default margin. and padding, and applying border box to. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">all elements to keep the sizing. consistent. Then I'm styling the body,. giving it a soft background color, and. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">applying our foreground text color. globally. For the images, I making sure they. always fill their containers and stay. cropped to the right aspect ratio, so. everything looks balanced regardless of. the screen size. Now, for the. typography, headings use DMs with a bold. oversized style and a tighter line. height. Paragraphs are set in DM mono. uppercased and slightly smaller just to. feel more like UI labels. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_275.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Both have a smooth color transition. applied so we can animate those states. later on hover. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Next, let's style the top. Now it's. positioned at the top of the page and. stretched full width with some spacing. around the edges. We are using flexbox. to space out the two lines of text. one. on the left and one on the right. Now. for the main section, the folders. container. This is set to take up the. full screen height and it aligns the. content toward the bottom of the page. We are stacking its children vertically. using column flex layout and we are. hiding any overflow just to keep the. layout clean. Each row inside this. container is styled to sit horizontally. We are using flexbox again to line up. the folder side by side. Now for the. folder itself, this is where the real. interaction lives. Each folder is. relatively positioned, takes up equal. space inside the row, and is given a. fixed height. I'm setting the height to. a specific value here because it makes. handling the inner layout way easier,. especially when scaling across different. screen sizes. Inside the second row,. I've adjusted the sizing a bit, giving. one folder twice the space and the other. three times just to break the uniformity. and add some visual rhythm to the. layout. Now, for the image previews,. each folder preview is absolutely. positioned and covers the full height of. the folder. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_353.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Inside that each image wrapper is. stacked vertically at the center and. sized evenly. We have also positioned each image along. the horizontal axis. One toward the. left, one in the center, and one on the. right to create that layered reveal. effect when hovering. I'm also setting. the transform origin for each one. That. way, we get smoother, more controlled. rotations later when animating with Gap. Next, we are styling the folder wrapper,. which holds the text. It's relatively. positioned and fills the full folder. space. And I've added will change. transform here to optimize performance. for the hover animation coming later. Now we define the folder index. This is. the number label that appears inside the. tab. It's given a width and some. internal padding. Then we add a custom shape on the right. side of that index using a pseudo. element. This is what creates that side. notch giving it that folder tab-like. feel. We are setting it to sit just next. to the index and shaping it with a clip. path. Now technically you could use full. height here with left 100% but I found. that on some screen sizes it leaves a. small visual cap underneath and on the. side. So I'm intentionally giving it. just a bit of extra height and pulling. it to a bit more left to make sure it. always sits flush with no unwanted white. space. After that we style the folder. name. This is the heading area. It. aligns the text at the top with subside. padding. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_437.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All three the index the notch and the. name are given smooth background. transitions. That way when we change. variants on hover states later. everything fades cleanly. Now we apply color variants. Each folder. uses a class like variant 1 2 and three. Based on the class we apply different. background colors to the index the notch. and the folder name section. We also. define the disabled state. When a folder. becomes inactive, its background color. softens and its text color fades using. the custom variables we defined earlier. This is what lets the hover folder pop. while the others fall back visually. Now. we move on to positioning the rows. This. part's important. Each row is slightly. pushed downward using a different bottom. offset. The first row is pushed the. furthest down, the second a bit less,. and the third one just a slight. This. tagging creates a nice folder-like. overlap which not only helps the layout. feel more organic but also creates just. enough breathing room for each folder to. slide upward slightly during hover. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Finally, let's talk about. responsiveness. Inside of media query. for smaller screens, I'm scaling down. the font size to keep things readable. All rows tag vertically instead of. horizontally, making the layout mobile. friendly. I'm also adding the folder previews. entirely on smaller screens since they. don't really add much when there is. limited space. The folder name gets a little more. padding on mobile just to keep things. balanced. One small detail here on. smaller screens. I'm also swapping the. background colors on variant two and. three inside the second row. That's just. a visual adjustment to keep the colors. flowing nicely in the vertical layout. And that's it for the CSS. We have got a. clean responsive layout with all the. necessary states and structure in place. And now we are ready to wire up the. animation using JavaScript. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/Gy9IS0Y6dy0_538.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Gy9IS0Y6dy0&t=538" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm importing gap, which is the. animation library we'll be using to. handle all the motion. This is what. gives us precise control over the. transitions, both when a folder is over. and when it resets back. Then I'm. grabbing two sets of elements from the. DOM. One is a list of all the folder. elements. These are the main interactive. blocks on the page. And the other is a. list of all the folder wrapper elements. These are the inner containers that hold. the index and the folder title. We'll be. animating these wrappers directly to. create that upward nudge on hover. Next,. I'm setting a flag called is mobile. We. are checking if the current screen width. is below a certain break point. In this. case, 1,000 pixels. This will help us. disable hover interactions on smaller. screens for the touch devices where. those animations aren't really. necessary. After that, I'm creating a. utility function called set initial. positions. Inside this, I'm using Gap's. set method to define the starting by. position for every folder wrapper. So on. mobile we set it to zero meaning no. offset but on larger screens we push it. down slightly just a small vertical. shift so that on hover we can animate it. back up and make it feel like it rises. into focus. This offset is part of that. polished folder interaction where the. hover folder lifts slightly from the. stack while the others fade back. We'll. be calling this function both on load. and later on resize to make sure the. layout always stays synced with the. current screen size. Next let's set up. the hover interaction. We are looping. through all the folders using for each. and for each one we grab all the folder. preview image elements inside it. These. are three image thumbnails that will. animate upward when the folder is over. Now we attach a mouse enter event to. each folder. This means when you hover. over a folder, this entire block of code. will run. But before we do anything, we. check if we are on a mobile screen. If. we are, we return early and skip the. hover effect completely just to keep. things clean and avoid unnecessary. animations on touch devices. Then we. move on to the interaction itself. Inside the event, we loop through all. the folders again. And for each one that. isn't the folder currently being. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">hovered, we apply a disabled class. This. is what fades the color out on the other. folders, making them fall into. background visually and lets the. hoverward one pop into focus just like. in the original concept. Once that's. done, we animate the folder wrapper of. the hoverward folder. We are using gaps. 2 method to move the wrapper upward to. zero which brings it to its natural. position essentially undoing the. downward offset we applied earlier using. set initial positions. The animation is. short and springy thanks to the easing. function back out. This gives it a soft. lift and a nice responsive feel. Next,. we animate the preview images inside the. hoverboard folder. We loop through each. image and assign a random rotation to it. based on its index. The first image gets. a random angle between minus 20 and. minus 10. The second one is somewhere. between minus 10 and 10. And the third. one gets a positive tilt between 10 and. 20. This creates a natural fan-like. spread where each image tilts in a. slightly different direction. We also. animate the Y position moving them. upward of their base by a set amount so. they look like they are sliding out of. the folder in real time. Each image is. also delayed slightly based on its index. so they don't all move at once. This. staggered timing makes the animation. feel more dynamic and less robotic. Altogether, this gives us that polished. horror experience where the folder rises. into view and the others fade out and a. set of preview images smoothly lift and. rotate into place. Now, let's handle. what happens when you move your mouse. away from a folder. Just like before, we. are still inside the loop. And now, we. are attaching a mouse event to each. folder. As always, we start by checking. if we are on mobile. If we are, we skip. everything here since the hover effect. isn't used on smaller screens. Now, when. the cursor leaves the folder, the first. thing we do is reset the state of all. the folders. We loop through them and. remove the disabled class, which brings. their original colors and styles back. into view. This way, once you stop. hovering, the layout returns to normal. and nothing stays dimmed. Next, we. animate the folder wrapper back down to. its original position. The same slight. offset we used earlier and set initial. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">positions. This gives that gentle deep. effect almost like the folder is. settling back into place. And finally,. we reset the preview images. Each one. animates back to its starting position,. sliding back to zero on the Y-axis and. resetting its rotation to a clean flat. angle. We also add a small delay for. each one, just like before, but this. time the delay is slightly longer, so. the animation feels a bit smoother as it. resets altogether. This gives us a clean. exit animation. The folder drops down,. the images fold back into place, and the. full layout fades back into its original. state, ready for the next interaction. All right, now let's wrap things up by. handling screen resizing and setting the. initial state. First, I'm adding an. event listener on resize. This means. whenever the browser window is resized,. we'll run a small block of logic to. update the layout based on the new. screen size. Inside that listener, we. check the current screen width again,. just like we did earlier, we compare it. to our mobile break point, and if the. value has changed, we update the flag. This is important because we only want. to rerun the layout logic when we are. actually crossed over that threshold. For example, going from desktop to. mobile view or vice versa. If that. change is detected, we call our set. initial positions function again just to. reapply the correct offset for each. folder wrapper based on the new screen. mode. Then as a safety measure, we reset. all the folders removing any disabled. class that may have been left over from. a previous over interaction. And. finally, we select all the preview. images and reset their animation state. as well, bringing them back to their. original position and zero rotation. This ensures that everything stays. perfectly in sync no matter how the. window is resized. And at the very end. of the script, the call set initial. positions once when the page first. loads. This applies that small vertical. offset to all the folder wrappers right. from the start. So that the hover effect. works exactly as intended the moment. user interacts with it. And that's the. full build. A simple but really polished. interaction using just HTML, CSS,. JavaScript, and a bit of GAP. Hope you. found the video helpful. See you in the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=Gy9IS0Y6dy0">https://www.youtube.com/watch?v=Gy9IS0Y6dy0</a></p><p>One hover. Three images. A quiet little animation that does way too much. Built with HTML, CSS, JavaScript, and GSAP. All it takes is one hover to shift the entire mood of the layout. This is how.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Wildy Riftian</p><p>Website: <a href="https://www.wildyriftian.com/">https://www.wildyriftian.com/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:28 HTML</p><p>3:28 CSS</p><p>8:58 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/Gy9IS0Y6dy0/hqdefault.jpg"/>
      <pubDate>2025-09-28T15:30:12.000Z</pubDate>
    </item><item>
      <title><![CDATA[This GSAP Site of the Week Scroll Animation Was TOO Good Not to Rebuild]]></title>
      <link>https://www.youtube.com/watch?v=W6LiANv2Gao</link>
      <itunes:title><![CDATA[This GSAP Site of the Week Scroll Animation Was TOO Good Not to Rebuild]]></itunes:title>
      <itunes:author><![CDATA[Codegrid]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/W6LiANv2Gao/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=W6LiANv2Gao">https://www.youtube.com/watch?v=W6LiANv2Gao</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用GSAP和ScrollTrigger重建DSAP本週精選網站的複雜動畫，深入了解其背後的技術細節。</li> <li>掌握製作時間軸風格動畫（文字揭示、標題滑入合併與縮放）所需的HTML結構、CSS樣式和JavaScript實現技巧。</li> <li>了解如何在動畫中處理時序、元素定位、響應式設計，以及實現流暢滾動體驗的詳細解決方案。</li> </ul> <hr /> <h1>摘要</h1> <h2>簡介：動畫重建之旅</h2> <p>作者在一開始提到，他被DSAP本週精選網站上的一個<strong>時間軸風格動畫序列</strong>深深吸引，這個動畫包含<strong>文字漸進揭示</strong>、<strong>特大標題滑入合併</strong>以及整體縮放效果。他決定使用<strong>GSAP</strong>和<strong>ScrollTrigger</strong>從零開始重建這個動畫，並在這段影片中逐步分享其實現過程，旨在展示其執行之精妙。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_45.jpg" /></p> <hr /> <h2>HTML結構的精心規劃</h2> <p>為了構建動畫，作者首先建立了一個清晰的HTML結構。他設置了「hero」與「outro」區塊作為頁面的視覺錨點，並創建了包含初始文字內容的「about」區塊，其中一個帶有<strong>`animate-text`</strong>類別的標題元素將用於文字填滿動畫。接著，主要動畫部分「services」區塊被設計來容納三個大型標題元素，這些標題實際上是<strong>SVG圖片</strong>，以提供更好的佈局和縮放控制。最後，為了保持動畫邏輯的清晰，他將包含後續文字內容的「services copy」區塊獨立出來，避免了因父級轉換（transform）而導致的<strong>ScrollTrigger</strong>衝突。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_120.jpg" /></p> <hr /> <h2>CSS樣式與動畫前置準備</h2> <p>在CSS部分，作者首先引入了簡潔的字體並應用了全域重置，以確保一致的基礎樣式和深色背景。接著，他定義了主標題為<strong>粗體、特大字型</strong>並居中顯示。對於「hero」、「outro」和「about」區塊，它們被設定為全螢幕並垂直水平居中內容，以提供寬敞的視覺體驗。關鍵的「services」區塊同樣是全螢幕並垂直堆疊，其中<strong>頂部和底部標題被推到螢幕右側</strong>，而<strong>中間標題則向左偏移</strong>，為滑入動畫做準備，同時透過更高的<strong>`z-index`</strong>確保中間標題在合併時位於最上層。為了解決動畫時序問題，作者巧妙地在「services copy」區塊上方添加了<strong>大量外邊距</strong>，以防止它在主標題動畫被固定時過早顯示，並提供足夠的緩衝空間，讓動畫流暢呼吸。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_260.jpg" /></p> <hr /> <h2>文字填滿效果的巧妙實現</h2> <p>作者詳細闡述了文字填滿動畫的原理。他透過為具有<strong>`animate-text`</strong>類別的每個標題應用一個包含文本內容的<strong>偽元素</strong>，創建了一個視覺上的第二層。這個偽元素最初被<strong>裁剪遮罩（clipping mask）</strong>完全隱藏，隨著用戶滾動，JavaScript會動態更新遮罩，逐步揭示文字內容，直到完全填充。這種方法不僅提供了對文字動畫的精確控制，而且由於僅動畫化裁剪而非改變佈局，因此具有<strong>極高的性能</strong>。此外，作者也調整了響應式設計，以確保在不同裝置上文字的可讀性和對齊。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_270.jpg" /></p> <hr /> <h2>JavaScript的核心整合</h2> <p>在JavaScript部分，作者首先導入了三個關鍵工具：用於處理所有動作的<strong>GSAP</strong>動畫引擎、將動畫與滾動直接綁定的<strong>ScrollTrigger</strong>，以及提供流暢滾動行為的<strong>Lennis</strong>。當頁面完全載入後，作者會註冊ScrollTrigger與GSAP，初始化Lennis，並將Lennis的滾動更新連接到ScrollTrigger，再將這些更新整合到GSAP的內部定時器中，確保所有與滾動相關的動畫都能協同運作。為了實現精確的滾動響應，他特別提到了關閉GSAP的<strong>延遲平滑（lag smoothing）</strong>功能，並指出這一精確的設定步驟可以在Lennis的官方文件中找到。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_330.jpg" /></p> <hr /> <h2>文字填滿動畫的JavaScript邏輯（起始）</h2> <p>作者開始講解文字填滿動畫的JavaScript邏輯。他首先選取所有帶有<strong>`animate-text`</strong>類別的文本元素。對於每一個這樣的元素，作者會提取其原始文本內容並進行儲存，這將是後續應用文字填滿動畫的基礎。儘管影片在此處結束，但它暗示了下一步將會利用這些準備好的文本數據，結合ScrollTrigger動態控制CSS的裁剪遮罩，以實現文字內容的逐層揭示效果。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_359.jpg" /></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">If you have been following the channel. lately, this site might look familiar. As I mentioned in the last Sunday's. video, it was recently featured as. DSAP's site of the week on Twitter. And. at the time, we explored this clever. marquee animation that morphs into a. horizontal scroll. But honestly, like I. said, the site has way more going on. Right after my first visit, I knew I had. to make one more video. This time. focusing on this amazing timeline style. sequence from the about page. As you can. see, it starts with the subtle text. reveal, that signature animated feel. effect you have probably seen before. But right after that, these oversized. headings slide in from opposite. directions. They don't just pass. through. They straight and collapse into. just one bold heading at the center. And. just when you think it's done, the whole. thing scales down and a new block of. text slides up into place, continuing. that same animated fill effect. It's a. seamless, thoughtful progression. And I. was really impressed by how cleanly it. was executed. So over the weekend, I. decided to rebuild the entire thing from. scratch just using GSAP and scroll. trigger. And in this video, I'll walk. you through how I recreated all the base. animations of the scroll experience from. scratch step by step. If you find these. kinds of rebels helpful, make sure to. drop a like on the video and subscribe. to the channel if you haven't already. And if you would like to access the. source code for this project, plus. hundreds of other similar micro projects. and a brand new website template every. month, you can check out the pro. membership via the link in the. description. All right, let's get into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_88.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=88" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm starting with two simple. sections. One for the hero and one for. the outro. These aren't doing anything. fancy right now, but they help give the. scroll experience a clear beginning and. end. It's just a nice way to anchor the. page visually before and after the. animated part kicks in. Inside each of. those, I'm dropping in an image. Nothing. interactive or animated, just some. filler content so the layout doesn't. feel empty. You can skip this if you. want. It's not tied to any of the scroll. logic. we'll be adding later. Next, I'm. adding a new section called about. This. is where we'll place that first block of. introductory text, the one you saw in. the demo earlier with the animated fill. effect. Inside this section, I'm placing. a heading element and giving it some. placeholder text. I'm also adding a. class called animate text to this. heading. That class is important because. later in JavaScript, we'll use it to. apply the text fill animation as the. user scrolls. Next, let's move on to the. main animated part, the services. section. This one will hold three large. heading elements each wrapped inside a. div with the class services header. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">instead of using plain text. Here I'm. placing an image inside each one. specifically an SVG version of the. heading. This is because using images. here gives us a bit more control over. the layout and scaling especially on. different screen sizes. I think the. original site used SVGs too and in this. case it just makes things easier to. manage visually. After that I'm creating. one final section. This one's called. services copy. Just like the about. section earlier, it holds a single. heading with some placeholder text. And. it also uses the animate text class. So. we can animate the text fill here too. Now I'm placing this section separately. instead of tucking it inside the main. services section. The reason is simple. The services section is going to have a. bunch of transforms applied to it,. especially for the big animated headers. And trying to run scrollbased triggers. on a heading inside that same section. ended up getting messy. So splitting it. out into its own block keeps the. animation logic cleaner and easier to. manage, especially when we pin or unpin. things later. That's everything we need. for the HTML structure. Now let's jump. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">into the CSS and start styling it. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_211.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=211" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, first I'm importing a clean. modern type face that fits well with the. overall minimal aesthetic of the layout. Then I'm applying a quick reset across. all elements just to remove any default. spacing and make sure the box model is. consistent everywhere. After that I'm. setting the font on the body along with. the dark background color that gives the. whole page a moody minimal look. Now for. the images I'm making sure they always. fill their containers and stay cropped. to the correct aspect ratio so we get a. clean consistent look no matter what. size we are working with. For the main. headings, I'm giving them a bold. oversized style with a tighter line. height and reduced letter spacing. They're also centered to keep everything. feeling balanced in the layout. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then I'm styling the hero, outro, and. about sections. These are all full. screen blocks that center the inner. content vertically and horizontally. This gives them a nice spacious feel and. make sure they hold their place clearly. in the scroll sequence. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_271.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The images inside the hero and outro are. constrained to a fixed shape. I'm using. a portrait style ratio here just to make. them look more minimal. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's move on to the services. section. This is where the main heading. animation takes place. I have set it up as a full screen block. centered in both directions and stacked. in a vertical layout. That way all three header rows are. aligned clearly one after the other. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Each row uses the same class and holds. an image. And this is where we start. prepping for the animation. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">to begin with. The top and bottom rows. are pushed off screen to the right while. the middle one is shifted to the left. That opposing direction is what creates. that sliding reveal you saw in the demo. The reason we offset the rows like this. is we can animate them separately and. have them meet at the center. We're also. assigning a higher striking order to the. middle row. So when all three align, the. center one sits cleanly above the. others. That gives us a sharper, more. intentional snap as they collapse into a. single heading. Now let's talk about the. next section, the one that holds the. follow-up block of text. This section is. placed far down the page with a large. margin at the top. The reason for this. is timing. As you saw in the animation,. I pin the header section for a while. just to let the slide, snap, and scale. transitions play out. But during that. time, I didn't want the services copy. section to be pulled into view early and. I definitely didn't want to turn on pin. spacing for the headers because that. created some really weird scroll trigger. issues with the text blocks fill. animation due to hijacking the scroll. So instead, I added a large top margin. to the text block enough to offset it. while the headers are pinned and give. the whole transition time to breathe. Now, technically, I only needed a. certain height around 150 view port. height, just enough to let the animation. finish. But I added a bit more buffer. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">beyond that, that five view port height. extra, so the text wouldn't snap right. up against the scale down heading. This. way, the new text settles gently just. below it when we unpin the headers with. some intentional breathing room. Next,. let's look at how the text fill effect. works. Each heading that uses the. animated fill has a special class. applied to it. And that class adds a. second visual layer on top using a. pseudo element. At first, the second. layer is fully hidden using a clipping. mask. But as the user scrolls, we'll. update that mask dynamically in. JavaScript, revealing more and more of. the text until the whole thing is filled. in. To make this work, we'll also inject. the text content into that upper layer. using a data attribute. I'll show you. how we do that in the JavaScript section. coming up. This technique gives us full. control over how the text animates and. it's super performant too since we are. only animating the clip and not changing. the layout. Lastly, I've added a few. responsive tweaks on smaller screens. I. reduce the font sizes and loosen the. spacing a bit. I'm also making the. animated text headings expand to full. width so they stay legible and well. aligned across all devices. That's it. for the CSS. The structure is styled,. the animation layers are in place, and. we are ready to start wiring everything. up in JavaScript. Before. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_476.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=476" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">we jump in, just a heads up to keep the. video short and to save myself some. editing time, I'll be pasting the code. block by block instead of typing it out. line by line. You can just pause the. video if you need to follow along. And. even though I'm not writing it line by. line, I'll still break down every part. of the code and explain exactly what's. going on and why we are doing it. So,. let's get into it. First, we are setting. things up by pulling in three tools. we'll use throughout this project. We. have got GAP as the animation engine. that handles all the motion. then scroll. trigger so we can tie animations. directly to scrolling and Lennis which. gives a smooth defined scrolling. behavior. Now once the page is fully. loaded we register scroll trigger with. GSAP that's just a one-time step to make. sure everything is wired up correctly. Then we initialize Lennis hook it up so. scroll trigger gets scroll updates and. plug those into Gap's internal ticker. that makes sure everything tied to. scroll moves together nicely. Finally we. turn off GSAP's lag smoothing because. for scroll based effects like this we. want everything to respond precisely as. you scroll. no soft delays. You'll. actually find the exact setup in the. Lennis documentation. So, if anything. here feels unfamiliar, their site is a. great reference. That wraps up the. initial setup. Next, we'll start. animating the text fill effect using. scroll trigger. All right, we are. starting by selecting all the text. elements that have the animate text. class. Each of these has a heading we. want to animate as user scrolls. For. every one of those elements, we first. grab the raw text inside and store that. text inside a custom data attribute. This is a really important step because. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">if you remember from earlier in the CSS. section, we are using a pseudo element. to create a second copy of the text that. animates over the original. By storing. the text content in a data text. attribute, we can inject it directly. into the pseudo element using CSS that. gives us full control and keeps our HTML. clean without any duplicate markup. Once. that's done, we set up a scroll trigger. for each heading. We want the animation. to start when the top of the element. reaches the middle of the view port and. finish when the bottom of the element. hits the same point. So that gives us a. nice middle section where the animation. plays based on scroll progress. We also. enable scrubbing. So instead of the. animation just playing on its own, it. stays fully linked to scroll. That way. the feel happens smoothly as the user. scrolls and reverses just as smoothly. when scrolling back up. Inside the. trigger, we calculate the clip progress. using the scroll percentage. As we. scroll through the trigger zone, we take. the current progress and subtract it. from 100. That gives us a decreasing. value that controls how much of the. pseudo text is visible. We then apply. that value to a custom CSS variable,. which is what updates the clipping mask. we defined earlier. The lower the. number, the more of the white text is. revealed until eventually the entire. heading is filled. This gives us a clean. text animation that reacts fluidly to. scroll without needing to animate. position or opacity directly. That wraps. up the text fill logic. Next, we'll move. on to animating the large what I do. headers as they slide into view. We are. creating a new scroll trigger that. tracks the scroll position as we move. into that section. It starts when the. section first enters the bottom of the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">viewport and ends when the top of the. section reaches the top of the screen. So, we are essentially creating a range. that spans the entire vertical scroll of. that section. We have turned scrubbing. on here as well. So, everything stays. synced to scroll. That way, as the user. scrolls, the motion feels completely. connected to their movement. Inside the. on-update call back, we grab all three. of the heading elements using their. shared class. Now, here is where the. horizontal animation comes in. We. animate the left and right headers,. meaning the first and third, by shifting. them from the right edge of the screen. toward the center. At the same time, the. middle one moves in from the opposite. direction, starting off screen to the. left and sliding into position as well. This opposing motion gives the whole. section a really dynamic feel, just as. we saw on the inspiration side. The. headings don't just slide in together. They move in a staggered mirrored flow. that makes the animation feel. intentional and designed. We are. calculating each of their positions. using scroll progress. So as the scroll. moves from start to end, the offset. decreases until all three headings line. up perfectly in the center. This is just. the first phase of the header animation. In the next part, we'll pin this entire. section and start layering in the. vertical movement and scaling you saw. earlier. For that, we are targeting the. same services section again, but this. time we are pinning it in place. as soon. as it reaches the top of the viewport. And we keep it pinned for a custom. distance. In this case, twice the height. of the screen. That gives us enough. scroll time to animate everything. cleanly. First, the vertical moment and. then the scale down effect. We also set. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">pin spacing to false here. That's. because we already manually added margin. to the next section, the one with the. second block of text, so we don't want. scroll trigger to inject extra space. below this one. Leaving it off keeps. everything cleaner and avoids any layout. issues. Now inside the on update call. back we start by grabbing all three. header elements again. Then we split the. scroll logic into two parts for the. first half of the scroll when progress. is between zero and 50%. We animate the. vertical movement. We calculate how far. into that first half we are and we use. that value to shift the top and bottom. headers. The top one moves downward and. the bottom one moves upward. The middle. heading doesn't move. It stays in place. and acts as the anchor. Once we hit the. halfway point, we lock the top and. bottom rows in their final vertical. positions. The top one is fully mowed. down and the bottom one is fully modeed. up and that completes the drift in part. of the sequence. Now we start the second. half of the animation which is where the. scaling kicks in. We calculate how far. into the second half we are and we then. use that value to reduce the size of all. three headers evenly. We also add a. fallback for smaller screens. If the. window width is below certain point we. stop the scale from going too small so. the text always stays readable. The. final scale value is interpolated. between full size and that minimum,. creating a smooth shrink down effect. that finishes right as the section. scroll ends. The result is this really. polished moment where the headers come. together and snap into a centered title. just before the text section appears. This final scroll trigger ties the whole. thing together and gives the animation a. clear, satisfying ending. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_826.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Hope you found the video helpful. See. you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=W6LiANv2Gao">https://www.youtube.com/watch?v=W6LiANv2Gao</a></p><p>Learn to build a scroll timeline where stacked headers slide, scale, and settle — all with HTML, CSS, JavaScript, GSAP, and ScrollTrigger.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Won J You</p><p>Website: <a href="https://wonjyou.studio/">https://wonjyou.studio/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:28 HTML</p><p>3:31 CSS</p><p>7:56 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/W6LiANv2Gao/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=W6LiANv2Gao">https://www.youtube.com/watch?v=W6LiANv2Gao</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用GSAP和ScrollTrigger重建DSAP本週精選網站的複雜動畫，深入了解其背後的技術細節。</li> <li>掌握製作時間軸風格動畫（文字揭示、標題滑入合併與縮放）所需的HTML結構、CSS樣式和JavaScript實現技巧。</li> <li>了解如何在動畫中處理時序、元素定位、響應式設計，以及實現流暢滾動體驗的詳細解決方案。</li> </ul> <hr /> <h1>摘要</h1> <h2>簡介：動畫重建之旅</h2> <p>作者在一開始提到，他被DSAP本週精選網站上的一個<strong>時間軸風格動畫序列</strong>深深吸引，這個動畫包含<strong>文字漸進揭示</strong>、<strong>特大標題滑入合併</strong>以及整體縮放效果。他決定使用<strong>GSAP</strong>和<strong>ScrollTrigger</strong>從零開始重建這個動畫，並在這段影片中逐步分享其實現過程，旨在展示其執行之精妙。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_45.jpg" /></p> <hr /> <h2>HTML結構的精心規劃</h2> <p>為了構建動畫，作者首先建立了一個清晰的HTML結構。他設置了「hero」與「outro」區塊作為頁面的視覺錨點，並創建了包含初始文字內容的「about」區塊，其中一個帶有<strong>`animate-text`</strong>類別的標題元素將用於文字填滿動畫。接著，主要動畫部分「services」區塊被設計來容納三個大型標題元素，這些標題實際上是<strong>SVG圖片</strong>，以提供更好的佈局和縮放控制。最後，為了保持動畫邏輯的清晰，他將包含後續文字內容的「services copy」區塊獨立出來，避免了因父級轉換（transform）而導致的<strong>ScrollTrigger</strong>衝突。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_120.jpg" /></p> <hr /> <h2>CSS樣式與動畫前置準備</h2> <p>在CSS部分，作者首先引入了簡潔的字體並應用了全域重置，以確保一致的基礎樣式和深色背景。接著，他定義了主標題為<strong>粗體、特大字型</strong>並居中顯示。對於「hero」、「outro」和「about」區塊，它們被設定為全螢幕並垂直水平居中內容，以提供寬敞的視覺體驗。關鍵的「services」區塊同樣是全螢幕並垂直堆疊，其中<strong>頂部和底部標題被推到螢幕右側</strong>，而<strong>中間標題則向左偏移</strong>，為滑入動畫做準備，同時透過更高的<strong>`z-index`</strong>確保中間標題在合併時位於最上層。為了解決動畫時序問題，作者巧妙地在「services copy」區塊上方添加了<strong>大量外邊距</strong>，以防止它在主標題動畫被固定時過早顯示，並提供足夠的緩衝空間，讓動畫流暢呼吸。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_260.jpg" /></p> <hr /> <h2>文字填滿效果的巧妙實現</h2> <p>作者詳細闡述了文字填滿動畫的原理。他透過為具有<strong>`animate-text`</strong>類別的每個標題應用一個包含文本內容的<strong>偽元素</strong>，創建了一個視覺上的第二層。這個偽元素最初被<strong>裁剪遮罩（clipping mask）</strong>完全隱藏，隨著用戶滾動，JavaScript會動態更新遮罩，逐步揭示文字內容，直到完全填充。這種方法不僅提供了對文字動畫的精確控制，而且由於僅動畫化裁剪而非改變佈局，因此具有<strong>極高的性能</strong>。此外，作者也調整了響應式設計，以確保在不同裝置上文字的可讀性和對齊。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_270.jpg" /></p> <hr /> <h2>JavaScript的核心整合</h2> <p>在JavaScript部分，作者首先導入了三個關鍵工具：用於處理所有動作的<strong>GSAP</strong>動畫引擎、將動畫與滾動直接綁定的<strong>ScrollTrigger</strong>，以及提供流暢滾動行為的<strong>Lennis</strong>。當頁面完全載入後，作者會註冊ScrollTrigger與GSAP，初始化Lennis，並將Lennis的滾動更新連接到ScrollTrigger，再將這些更新整合到GSAP的內部定時器中，確保所有與滾動相關的動畫都能協同運作。為了實現精確的滾動響應，他特別提到了關閉GSAP的<strong>延遲平滑（lag smoothing）</strong>功能，並指出這一精確的設定步驟可以在Lennis的官方文件中找到。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_330.jpg" /></p> <hr /> <h2>文字填滿動畫的JavaScript邏輯（起始）</h2> <p>作者開始講解文字填滿動畫的JavaScript邏輯。他首先選取所有帶有<strong>`animate-text`</strong>類別的文本元素。對於每一個這樣的元素，作者會提取其原始文本內容並進行儲存，這將是後續應用文字填滿動畫的基礎。儘管影片在此處結束，但它暗示了下一步將會利用這些準備好的文本數據，結合ScrollTrigger動態控制CSS的裁剪遮罩，以實現文字內容的逐層揭示效果。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_359.jpg" /></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">If you have been following the channel. lately, this site might look familiar. As I mentioned in the last Sunday's. video, it was recently featured as. DSAP's site of the week on Twitter. And. at the time, we explored this clever. marquee animation that morphs into a. horizontal scroll. But honestly, like I. said, the site has way more going on. Right after my first visit, I knew I had. to make one more video. This time. focusing on this amazing timeline style. sequence from the about page. As you can. see, it starts with the subtle text. reveal, that signature animated feel. effect you have probably seen before. But right after that, these oversized. headings slide in from opposite. directions. They don't just pass. through. They straight and collapse into. just one bold heading at the center. And. just when you think it's done, the whole. thing scales down and a new block of. text slides up into place, continuing. that same animated fill effect. It's a. seamless, thoughtful progression. And I. was really impressed by how cleanly it. was executed. So over the weekend, I. decided to rebuild the entire thing from. scratch just using GSAP and scroll. trigger. And in this video, I'll walk. you through how I recreated all the base. animations of the scroll experience from. scratch step by step. If you find these. kinds of rebels helpful, make sure to. drop a like on the video and subscribe. to the channel if you haven't already. And if you would like to access the. source code for this project, plus. hundreds of other similar micro projects. and a brand new website template every. month, you can check out the pro. membership via the link in the. description. All right, let's get into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_88.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=88" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm starting with two simple. sections. One for the hero and one for. the outro. These aren't doing anything. fancy right now, but they help give the. scroll experience a clear beginning and. end. It's just a nice way to anchor the. page visually before and after the. animated part kicks in. Inside each of. those, I'm dropping in an image. Nothing. interactive or animated, just some. filler content so the layout doesn't. feel empty. You can skip this if you. want. It's not tied to any of the scroll. logic. we'll be adding later. Next, I'm. adding a new section called about. This. is where we'll place that first block of. introductory text, the one you saw in. the demo earlier with the animated fill. effect. Inside this section, I'm placing. a heading element and giving it some. placeholder text. I'm also adding a. class called animate text to this. heading. That class is important because. later in JavaScript, we'll use it to. apply the text fill animation as the. user scrolls. Next, let's move on to the. main animated part, the services. section. This one will hold three large. heading elements each wrapped inside a. div with the class services header. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">instead of using plain text. Here I'm. placing an image inside each one. specifically an SVG version of the. heading. This is because using images. here gives us a bit more control over. the layout and scaling especially on. different screen sizes. I think the. original site used SVGs too and in this. case it just makes things easier to. manage visually. After that I'm creating. one final section. This one's called. services copy. Just like the about. section earlier, it holds a single. heading with some placeholder text. And. it also uses the animate text class. So. we can animate the text fill here too. Now I'm placing this section separately. instead of tucking it inside the main. services section. The reason is simple. The services section is going to have a. bunch of transforms applied to it,. especially for the big animated headers. And trying to run scrollbased triggers. on a heading inside that same section. ended up getting messy. So splitting it. out into its own block keeps the. animation logic cleaner and easier to. manage, especially when we pin or unpin. things later. That's everything we need. for the HTML structure. Now let's jump. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">into the CSS and start styling it. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_211.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=211" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, first I'm importing a clean. modern type face that fits well with the. overall minimal aesthetic of the layout. Then I'm applying a quick reset across. all elements just to remove any default. spacing and make sure the box model is. consistent everywhere. After that I'm. setting the font on the body along with. the dark background color that gives the. whole page a moody minimal look. Now for. the images I'm making sure they always. fill their containers and stay cropped. to the correct aspect ratio so we get a. clean consistent look no matter what. size we are working with. For the main. headings, I'm giving them a bold. oversized style with a tighter line. height and reduced letter spacing. They're also centered to keep everything. feeling balanced in the layout. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then I'm styling the hero, outro, and. about sections. These are all full. screen blocks that center the inner. content vertically and horizontally. This gives them a nice spacious feel and. make sure they hold their place clearly. in the scroll sequence. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_271.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The images inside the hero and outro are. constrained to a fixed shape. I'm using. a portrait style ratio here just to make. them look more minimal. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's move on to the services. section. This is where the main heading. animation takes place. I have set it up as a full screen block. centered in both directions and stacked. in a vertical layout. That way all three header rows are. aligned clearly one after the other. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Each row uses the same class and holds. an image. And this is where we start. prepping for the animation. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">to begin with. The top and bottom rows. are pushed off screen to the right while. the middle one is shifted to the left. That opposing direction is what creates. that sliding reveal you saw in the demo. The reason we offset the rows like this. is we can animate them separately and. have them meet at the center. We're also. assigning a higher striking order to the. middle row. So when all three align, the. center one sits cleanly above the. others. That gives us a sharper, more. intentional snap as they collapse into a. single heading. Now let's talk about the. next section, the one that holds the. follow-up block of text. This section is. placed far down the page with a large. margin at the top. The reason for this. is timing. As you saw in the animation,. I pin the header section for a while. just to let the slide, snap, and scale. transitions play out. But during that. time, I didn't want the services copy. section to be pulled into view early and. I definitely didn't want to turn on pin. spacing for the headers because that. created some really weird scroll trigger. issues with the text blocks fill. animation due to hijacking the scroll. So instead, I added a large top margin. to the text block enough to offset it. while the headers are pinned and give. the whole transition time to breathe. Now, technically, I only needed a. certain height around 150 view port. height, just enough to let the animation. finish. But I added a bit more buffer. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">beyond that, that five view port height. extra, so the text wouldn't snap right. up against the scale down heading. This. way, the new text settles gently just. below it when we unpin the headers with. some intentional breathing room. Next,. let's look at how the text fill effect. works. Each heading that uses the. animated fill has a special class. applied to it. And that class adds a. second visual layer on top using a. pseudo element. At first, the second. layer is fully hidden using a clipping. mask. But as the user scrolls, we'll. update that mask dynamically in. JavaScript, revealing more and more of. the text until the whole thing is filled. in. To make this work, we'll also inject. the text content into that upper layer. using a data attribute. I'll show you. how we do that in the JavaScript section. coming up. This technique gives us full. control over how the text animates and. it's super performant too since we are. only animating the clip and not changing. the layout. Lastly, I've added a few. responsive tweaks on smaller screens. I. reduce the font sizes and loosen the. spacing a bit. I'm also making the. animated text headings expand to full. width so they stay legible and well. aligned across all devices. That's it. for the CSS. The structure is styled,. the animation layers are in place, and. we are ready to start wiring everything. up in JavaScript. Before. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_476.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=476" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">we jump in, just a heads up to keep the. video short and to save myself some. editing time, I'll be pasting the code. block by block instead of typing it out. line by line. You can just pause the. video if you need to follow along. And. even though I'm not writing it line by. line, I'll still break down every part. of the code and explain exactly what's. going on and why we are doing it. So,. let's get into it. First, we are setting. things up by pulling in three tools. we'll use throughout this project. We. have got GAP as the animation engine. that handles all the motion. then scroll. trigger so we can tie animations. directly to scrolling and Lennis which. gives a smooth defined scrolling. behavior. Now once the page is fully. loaded we register scroll trigger with. GSAP that's just a one-time step to make. sure everything is wired up correctly. Then we initialize Lennis hook it up so. scroll trigger gets scroll updates and. plug those into Gap's internal ticker. that makes sure everything tied to. scroll moves together nicely. Finally we. turn off GSAP's lag smoothing because. for scroll based effects like this we. want everything to respond precisely as. you scroll. no soft delays. You'll. actually find the exact setup in the. Lennis documentation. So, if anything. here feels unfamiliar, their site is a. great reference. That wraps up the. initial setup. Next, we'll start. animating the text fill effect using. scroll trigger. All right, we are. starting by selecting all the text. elements that have the animate text. class. Each of these has a heading we. want to animate as user scrolls. For. every one of those elements, we first. grab the raw text inside and store that. text inside a custom data attribute. This is a really important step because. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">if you remember from earlier in the CSS. section, we are using a pseudo element. to create a second copy of the text that. animates over the original. By storing. the text content in a data text. attribute, we can inject it directly. into the pseudo element using CSS that. gives us full control and keeps our HTML. clean without any duplicate markup. Once. that's done, we set up a scroll trigger. for each heading. We want the animation. to start when the top of the element. reaches the middle of the view port and. finish when the bottom of the element. hits the same point. So that gives us a. nice middle section where the animation. plays based on scroll progress. We also. enable scrubbing. So instead of the. animation just playing on its own, it. stays fully linked to scroll. That way. the feel happens smoothly as the user. scrolls and reverses just as smoothly. when scrolling back up. Inside the. trigger, we calculate the clip progress. using the scroll percentage. As we. scroll through the trigger zone, we take. the current progress and subtract it. from 100. That gives us a decreasing. value that controls how much of the. pseudo text is visible. We then apply. that value to a custom CSS variable,. which is what updates the clipping mask. we defined earlier. The lower the. number, the more of the white text is. revealed until eventually the entire. heading is filled. This gives us a clean. text animation that reacts fluidly to. scroll without needing to animate. position or opacity directly. That wraps. up the text fill logic. Next, we'll move. on to animating the large what I do. headers as they slide into view. We are. creating a new scroll trigger that. tracks the scroll position as we move. into that section. It starts when the. section first enters the bottom of the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">viewport and ends when the top of the. section reaches the top of the screen. So, we are essentially creating a range. that spans the entire vertical scroll of. that section. We have turned scrubbing. on here as well. So, everything stays. synced to scroll. That way, as the user. scrolls, the motion feels completely. connected to their movement. Inside the. on-update call back, we grab all three. of the heading elements using their. shared class. Now, here is where the. horizontal animation comes in. We. animate the left and right headers,. meaning the first and third, by shifting. them from the right edge of the screen. toward the center. At the same time, the. middle one moves in from the opposite. direction, starting off screen to the. left and sliding into position as well. This opposing motion gives the whole. section a really dynamic feel, just as. we saw on the inspiration side. The. headings don't just slide in together. They move in a staggered mirrored flow. that makes the animation feel. intentional and designed. We are. calculating each of their positions. using scroll progress. So as the scroll. moves from start to end, the offset. decreases until all three headings line. up perfectly in the center. This is just. the first phase of the header animation. In the next part, we'll pin this entire. section and start layering in the. vertical movement and scaling you saw. earlier. For that, we are targeting the. same services section again, but this. time we are pinning it in place. as soon. as it reaches the top of the viewport. And we keep it pinned for a custom. distance. In this case, twice the height. of the screen. That gives us enough. scroll time to animate everything. cleanly. First, the vertical moment and. then the scale down effect. We also set. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">pin spacing to false here. That's. because we already manually added margin. to the next section, the one with the. second block of text, so we don't want. scroll trigger to inject extra space. below this one. Leaving it off keeps. everything cleaner and avoids any layout. issues. Now inside the on update call. back we start by grabbing all three. header elements again. Then we split the. scroll logic into two parts for the. first half of the scroll when progress. is between zero and 50%. We animate the. vertical movement. We calculate how far. into that first half we are and we use. that value to shift the top and bottom. headers. The top one moves downward and. the bottom one moves upward. The middle. heading doesn't move. It stays in place. and acts as the anchor. Once we hit the. halfway point, we lock the top and. bottom rows in their final vertical. positions. The top one is fully mowed. down and the bottom one is fully modeed. up and that completes the drift in part. of the sequence. Now we start the second. half of the animation which is where the. scaling kicks in. We calculate how far. into the second half we are and we then. use that value to reduce the size of all. three headers evenly. We also add a. fallback for smaller screens. If the. window width is below certain point we. stop the scale from going too small so. the text always stays readable. The. final scale value is interpolated. between full size and that minimum,. creating a smooth shrink down effect. that finishes right as the section. scroll ends. The result is this really. polished moment where the headers come. together and snap into a centered title. just before the text section appears. This final scroll trigger ties the whole. thing together and gives the animation a. clear, satisfying ending. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_826.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Hope you found the video helpful. See. you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=W6LiANv2Gao">https://www.youtube.com/watch?v=W6LiANv2Gao</a></p><p>Learn to build a scroll timeline where stacked headers slide, scale, and settle — all with HTML, CSS, JavaScript, GSAP, and ScrollTrigger.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Won J You</p><p>Website: <a href="https://wonjyou.studio/">https://wonjyou.studio/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:28 HTML</p><p>3:31 CSS</p><p>7:56 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/W6LiANv2Gao/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=W6LiANv2Gao">https://www.youtube.com/watch?v=W6LiANv2Gao</a></p><h1>值得閱讀的理由</h1> <ul> <li>學習如何使用GSAP和ScrollTrigger重建DSAP本週精選網站的複雜動畫，深入了解其背後的技術細節。</li> <li>掌握製作時間軸風格動畫（文字揭示、標題滑入合併與縮放）所需的HTML結構、CSS樣式和JavaScript實現技巧。</li> <li>了解如何在動畫中處理時序、元素定位、響應式設計，以及實現流暢滾動體驗的詳細解決方案。</li> </ul> <hr /> <h1>摘要</h1> <h2>簡介：動畫重建之旅</h2> <p>作者在一開始提到，他被DSAP本週精選網站上的一個<strong>時間軸風格動畫序列</strong>深深吸引，這個動畫包含<strong>文字漸進揭示</strong>、<strong>特大標題滑入合併</strong>以及整體縮放效果。他決定使用<strong>GSAP</strong>和<strong>ScrollTrigger</strong>從零開始重建這個動畫，並在這段影片中逐步分享其實現過程，旨在展示其執行之精妙。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_45.jpg" /></p> <hr /> <h2>HTML結構的精心規劃</h2> <p>為了構建動畫，作者首先建立了一個清晰的HTML結構。他設置了「hero」與「outro」區塊作為頁面的視覺錨點，並創建了包含初始文字內容的「about」區塊，其中一個帶有<strong>`animate-text`</strong>類別的標題元素將用於文字填滿動畫。接著，主要動畫部分「services」區塊被設計來容納三個大型標題元素，這些標題實際上是<strong>SVG圖片</strong>，以提供更好的佈局和縮放控制。最後，為了保持動畫邏輯的清晰，他將包含後續文字內容的「services copy」區塊獨立出來，避免了因父級轉換（transform）而導致的<strong>ScrollTrigger</strong>衝突。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_120.jpg" /></p> <hr /> <h2>CSS樣式與動畫前置準備</h2> <p>在CSS部分，作者首先引入了簡潔的字體並應用了全域重置，以確保一致的基礎樣式和深色背景。接著，他定義了主標題為<strong>粗體、特大字型</strong>並居中顯示。對於「hero」、「outro」和「about」區塊，它們被設定為全螢幕並垂直水平居中內容，以提供寬敞的視覺體驗。關鍵的「services」區塊同樣是全螢幕並垂直堆疊，其中<strong>頂部和底部標題被推到螢幕右側</strong>，而<strong>中間標題則向左偏移</strong>，為滑入動畫做準備，同時透過更高的<strong>`z-index`</strong>確保中間標題在合併時位於最上層。為了解決動畫時序問題，作者巧妙地在「services copy」區塊上方添加了<strong>大量外邊距</strong>，以防止它在主標題動畫被固定時過早顯示，並提供足夠的緩衝空間，讓動畫流暢呼吸。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_260.jpg" /></p> <hr /> <h2>文字填滿效果的巧妙實現</h2> <p>作者詳細闡述了文字填滿動畫的原理。他透過為具有<strong>`animate-text`</strong>類別的每個標題應用一個包含文本內容的<strong>偽元素</strong>，創建了一個視覺上的第二層。這個偽元素最初被<strong>裁剪遮罩（clipping mask）</strong>完全隱藏，隨著用戶滾動，JavaScript會動態更新遮罩，逐步揭示文字內容，直到完全填充。這種方法不僅提供了對文字動畫的精確控制，而且由於僅動畫化裁剪而非改變佈局，因此具有<strong>極高的性能</strong>。此外，作者也調整了響應式設計，以確保在不同裝置上文字的可讀性和對齊。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_270.jpg" /></p> <hr /> <h2>JavaScript的核心整合</h2> <p>在JavaScript部分，作者首先導入了三個關鍵工具：用於處理所有動作的<strong>GSAP</strong>動畫引擎、將動畫與滾動直接綁定的<strong>ScrollTrigger</strong>，以及提供流暢滾動行為的<strong>Lennis</strong>。當頁面完全載入後，作者會註冊ScrollTrigger與GSAP，初始化Lennis，並將Lennis的滾動更新連接到ScrollTrigger，再將這些更新整合到GSAP的內部定時器中，確保所有與滾動相關的動畫都能協同運作。為了實現精確的滾動響應，他特別提到了關閉GSAP的<strong>延遲平滑（lag smoothing）</strong>功能，並指出這一精確的設定步驟可以在Lennis的官方文件中找到。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_330.jpg" /></p> <hr /> <h2>文字填滿動畫的JavaScript邏輯（起始）</h2> <p>作者開始講解文字填滿動畫的JavaScript邏輯。他首先選取所有帶有<strong>`animate-text`</strong>類別的文本元素。對於每一個這樣的元素，作者會提取其原始文本內容並進行儲存，這將是後續應用文字填滿動畫的基礎。儘管影片在此處結束，但它暗示了下一步將會利用這些準備好的文本數據，結合ScrollTrigger動態控制CSS的裁剪遮罩，以實現文字內容的逐層揭示效果。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_359.jpg" /></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># Intro</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">If you have been following the channel. lately, this site might look familiar. As I mentioned in the last Sunday's. video, it was recently featured as. DSAP's site of the week on Twitter. And. at the time, we explored this clever. marquee animation that morphs into a. horizontal scroll. But honestly, like I. said, the site has way more going on. Right after my first visit, I knew I had. to make one more video. This time. focusing on this amazing timeline style. sequence from the about page. As you can. see, it starts with the subtle text. reveal, that signature animated feel. effect you have probably seen before. But right after that, these oversized. headings slide in from opposite. directions. They don't just pass. through. They straight and collapse into. just one bold heading at the center. And. just when you think it's done, the whole. thing scales down and a new block of. text slides up into place, continuing. that same animated fill effect. It's a. seamless, thoughtful progression. And I. was really impressed by how cleanly it. was executed. So over the weekend, I. decided to rebuild the entire thing from. scratch just using GSAP and scroll. trigger. And in this video, I'll walk. you through how I recreated all the base. animations of the scroll experience from. scratch step by step. If you find these. kinds of rebels helpful, make sure to. drop a like on the video and subscribe. to the channel if you haven't already. And if you would like to access the. source code for this project, plus. hundreds of other similar micro projects. and a brand new website template every. month, you can check out the pro. membership via the link in the. description. All right, let's get into. the code. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_88.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=88" target="_blank"><strong># HTML</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">First, I'm starting with two simple. sections. One for the hero and one for. the outro. These aren't doing anything. fancy right now, but they help give the. scroll experience a clear beginning and. end. It's just a nice way to anchor the. page visually before and after the. animated part kicks in. Inside each of. those, I'm dropping in an image. Nothing. interactive or animated, just some. filler content so the layout doesn't. feel empty. You can skip this if you. want. It's not tied to any of the scroll. logic. we'll be adding later. Next, I'm. adding a new section called about. This. is where we'll place that first block of. introductory text, the one you saw in. the demo earlier with the animated fill. effect. Inside this section, I'm placing. a heading element and giving it some. placeholder text. I'm also adding a. class called animate text to this. heading. That class is important because. later in JavaScript, we'll use it to. apply the text fill animation as the. user scrolls. Next, let's move on to the. main animated part, the services. section. This one will hold three large. heading elements each wrapped inside a. div with the class services header. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">instead of using plain text. Here I'm. placing an image inside each one. specifically an SVG version of the. heading. This is because using images. here gives us a bit more control over. the layout and scaling especially on. different screen sizes. I think the. original site used SVGs too and in this. case it just makes things easier to. manage visually. After that I'm creating. one final section. This one's called. services copy. Just like the about. section earlier, it holds a single. heading with some placeholder text. And. it also uses the animate text class. So. we can animate the text fill here too. Now I'm placing this section separately. instead of tucking it inside the main. services section. The reason is simple. The services section is going to have a. bunch of transforms applied to it,. especially for the big animated headers. And trying to run scrollbased triggers. on a heading inside that same section. ended up getting messy. So splitting it. out into its own block keeps the. animation logic cleaner and easier to. manage, especially when we pin or unpin. things later. That's everything we need. for the HTML structure. Now let's jump. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">into the CSS and start styling it. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_211.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=211" target="_blank"><strong># CSS</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">All right, first I'm importing a clean. modern type face that fits well with the. overall minimal aesthetic of the layout. Then I'm applying a quick reset across. all elements just to remove any default. spacing and make sure the box model is. consistent everywhere. After that I'm. setting the font on the body along with. the dark background color that gives the. whole page a moody minimal look. Now for. the images I'm making sure they always. fill their containers and stay cropped. to the correct aspect ratio so we get a. clean consistent look no matter what. size we are working with. For the main. headings, I'm giving them a bold. oversized style with a tighter line. height and reduced letter spacing. They're also centered to keep everything. feeling balanced in the layout. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Then I'm styling the hero, outro, and. about sections. These are all full. screen blocks that center the inner. content vertically and horizontally. This gives them a nice spacious feel and. make sure they hold their place clearly. in the scroll sequence. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_271.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">The images inside the hero and outro are. constrained to a fixed shape. I'm using. a portrait style ratio here just to make. them look more minimal. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Now let's move on to the services. section. This is where the main heading. animation takes place. I have set it up as a full screen block. centered in both directions and stacked. in a vertical layout. That way all three header rows are. aligned clearly one after the other. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Each row uses the same class and holds. an image. And this is where we start. prepping for the animation. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">to begin with. The top and bottom rows. are pushed off screen to the right while. the middle one is shifted to the left. That opposing direction is what creates. that sliding reveal you saw in the demo. The reason we offset the rows like this. is we can animate them separately and. have them meet at the center. We're also. assigning a higher striking order to the. middle row. So when all three align, the. center one sits cleanly above the. others. That gives us a sharper, more. intentional snap as they collapse into a. single heading. Now let's talk about the. next section, the one that holds the. follow-up block of text. This section is. placed far down the page with a large. margin at the top. The reason for this. is timing. As you saw in the animation,. I pin the header section for a while. just to let the slide, snap, and scale. transitions play out. But during that. time, I didn't want the services copy. section to be pulled into view early and. I definitely didn't want to turn on pin. spacing for the headers because that. created some really weird scroll trigger. issues with the text blocks fill. animation due to hijacking the scroll. So instead, I added a large top margin. to the text block enough to offset it. while the headers are pinned and give. the whole transition time to breathe. Now, technically, I only needed a. certain height around 150 view port. height, just enough to let the animation. finish. But I added a bit more buffer. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">beyond that, that five view port height. extra, so the text wouldn't snap right. up against the scale down heading. This. way, the new text settles gently just. below it when we unpin the headers with. some intentional breathing room. Next,. let's look at how the text fill effect. works. Each heading that uses the. animated fill has a special class. applied to it. And that class adds a. second visual layer on top using a. pseudo element. At first, the second. layer is fully hidden using a clipping. mask. But as the user scrolls, we'll. update that mask dynamically in. JavaScript, revealing more and more of. the text until the whole thing is filled. in. To make this work, we'll also inject. the text content into that upper layer. using a data attribute. I'll show you. how we do that in the JavaScript section. coming up. This technique gives us full. control over how the text animates and. it's super performant too since we are. only animating the clip and not changing. the layout. Lastly, I've added a few. responsive tweaks on smaller screens. I. reduce the font sizes and loosen the. spacing a bit. I'm also making the. animated text headings expand to full. width so they stay legible and well. aligned across all devices. That's it. for the CSS. The structure is styled,. the animation layers are in place, and. we are ready to start wiring everything. up in JavaScript. Before. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_476.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/W6LiANv2Gao&t=476" target="_blank"><strong># JavaScript</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">we jump in, just a heads up to keep the. video short and to save myself some. editing time, I'll be pasting the code. block by block instead of typing it out. line by line. You can just pause the. video if you need to follow along. And. even though I'm not writing it line by. line, I'll still break down every part. of the code and explain exactly what's. going on and why we are doing it. So,. let's get into it. First, we are setting. things up by pulling in three tools. we'll use throughout this project. We. have got GAP as the animation engine. that handles all the motion. then scroll. trigger so we can tie animations. directly to scrolling and Lennis which. gives a smooth defined scrolling. behavior. Now once the page is fully. loaded we register scroll trigger with. GSAP that's just a one-time step to make. sure everything is wired up correctly. Then we initialize Lennis hook it up so. scroll trigger gets scroll updates and. plug those into Gap's internal ticker. that makes sure everything tied to. scroll moves together nicely. Finally we. turn off GSAP's lag smoothing because. for scroll based effects like this we. want everything to respond precisely as. you scroll. no soft delays. You'll. actually find the exact setup in the. Lennis documentation. So, if anything. here feels unfamiliar, their site is a. great reference. That wraps up the. initial setup. Next, we'll start. animating the text fill effect using. scroll trigger. All right, we are. starting by selecting all the text. elements that have the animate text. class. Each of these has a heading we. want to animate as user scrolls. For. every one of those elements, we first. grab the raw text inside and store that. text inside a custom data attribute. This is a really important step because. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">if you remember from earlier in the CSS. section, we are using a pseudo element. to create a second copy of the text that. animates over the original. By storing. the text content in a data text. attribute, we can inject it directly. into the pseudo element using CSS that. gives us full control and keeps our HTML. clean without any duplicate markup. Once. that's done, we set up a scroll trigger. for each heading. We want the animation. to start when the top of the element. reaches the middle of the view port and. finish when the bottom of the element. hits the same point. So that gives us a. nice middle section where the animation. plays based on scroll progress. We also. enable scrubbing. So instead of the. animation just playing on its own, it. stays fully linked to scroll. That way. the feel happens smoothly as the user. scrolls and reverses just as smoothly. when scrolling back up. Inside the. trigger, we calculate the clip progress. using the scroll percentage. As we. scroll through the trigger zone, we take. the current progress and subtract it. from 100. That gives us a decreasing. value that controls how much of the. pseudo text is visible. We then apply. that value to a custom CSS variable,. which is what updates the clipping mask. we defined earlier. The lower the. number, the more of the white text is. revealed until eventually the entire. heading is filled. This gives us a clean. text animation that reacts fluidly to. scroll without needing to animate. position or opacity directly. That wraps. up the text fill logic. Next, we'll move. on to animating the large what I do. headers as they slide into view. We are. creating a new scroll trigger that. tracks the scroll position as we move. into that section. It starts when the. section first enters the bottom of the. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">viewport and ends when the top of the. section reaches the top of the screen. So, we are essentially creating a range. that spans the entire vertical scroll of. that section. We have turned scrubbing. on here as well. So, everything stays. synced to scroll. That way, as the user. scrolls, the motion feels completely. connected to their movement. Inside the. on-update call back, we grab all three. of the heading elements using their. shared class. Now, here is where the. horizontal animation comes in. We. animate the left and right headers,. meaning the first and third, by shifting. them from the right edge of the screen. toward the center. At the same time, the. middle one moves in from the opposite. direction, starting off screen to the. left and sliding into position as well. This opposing motion gives the whole. section a really dynamic feel, just as. we saw on the inspiration side. The. headings don't just slide in together. They move in a staggered mirrored flow. that makes the animation feel. intentional and designed. We are. calculating each of their positions. using scroll progress. So as the scroll. moves from start to end, the offset. decreases until all three headings line. up perfectly in the center. This is just. the first phase of the header animation. In the next part, we'll pin this entire. section and start layering in the. vertical movement and scaling you saw. earlier. For that, we are targeting the. same services section again, but this. time we are pinning it in place. as soon. as it reaches the top of the viewport. And we keep it pinned for a custom. distance. In this case, twice the height. of the screen. That gives us enough. scroll time to animate everything. cleanly. First, the vertical moment and. then the scale down effect. We also set. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">pin spacing to false here. That's. because we already manually added margin. to the next section, the one with the. second block of text, so we don't want. scroll trigger to inject extra space. below this one. Leaving it off keeps. everything cleaner and avoids any layout. issues. Now inside the on update call. back we start by grabbing all three. header elements again. Then we split the. scroll logic into two parts for the. first half of the scroll when progress. is between zero and 50%. We animate the. vertical movement. We calculate how far. into that first half we are and we use. that value to shift the top and bottom. headers. The top one moves downward and. the bottom one moves upward. The middle. heading doesn't move. It stays in place. and acts as the anchor. Once we hit the. halfway point, we lock the top and. bottom rows in their final vertical. positions. The top one is fully mowed. down and the bottom one is fully modeed. up and that completes the drift in part. of the sequence. Now we start the second. half of the animation which is where the. scaling kicks in. We calculate how far. into the second half we are and we then. use that value to reduce the size of all. three headers evenly. We also add a. fallback for smaller screens. If the. window width is below certain point we. stop the scale from going too small so. the text always stays readable. The. final scale value is interpolated. between full size and that minimum,. creating a smooth shrink down effect. that finishes right as the section. scroll ends. The result is this really. polished moment where the headers come. together and snap into a centered title. just before the text section appears. This final scroll trigger ties the whole. thing together and gives the animation a. clear, satisfying ending. </p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202502/file-cache/W6LiANv2Gao_826.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Hope you found the video helpful. See. you in the next one. </p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=W6LiANv2Gao">https://www.youtube.com/watch?v=W6LiANv2Gao</a></p><p>Learn to build a scroll timeline where stacked headers slide, scale, and settle — all with HTML, CSS, JavaScript, GSAP, and ScrollTrigger.</p><p></p><p>Source Code: <a href="https://codegrid.gumroad.com/l/codegridpro">https://codegrid.gumroad.com/l/codegridpro</a></p><p></p><p>Inspiration: Won J You</p><p>Website: <a href="https://wonjyou.studio/">https://wonjyou.studio/</a></p><p></p><p>Timestamps:</p><p>0:00 Intro</p><p>1:28 HTML</p><p>3:31 CSS</p><p>7:56 JavaScript</p><p></p><p>Instagram: <a href="https://www.instagram.com/codegridweb/">https://www.instagram.com/codegridweb/</a></p><p>Twitter: <a href="https://twitter.com/codegridweb/">https://twitter.com/codegridweb/</a></p><p>Public Discord: <a href="https://discord.gg/B8B9MXxuSS">https://discord.gg/B8B9MXxuSS</a></p><p></p><p>Music from Epidemic Sound.</p><p>Thanks for watching!</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/W6LiANv2Gao/hqdefault.jpg"/>
      <pubDate>2025-09-24T15:30:22.000Z</pubDate>
    </item></channel>
</rss>